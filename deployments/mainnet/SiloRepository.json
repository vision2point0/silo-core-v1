{
  "address": "0xd998C35B7900b344bbBe6555cc11576942Cf309d",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_siloFactory",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_tokensFactory",
          "type": "address"
        },
        {
          "internalType": "uint64",
          "name": "_defaultMaxLTV",
          "type": "uint64"
        },
        {
          "internalType": "uint64",
          "name": "_defaultLiquidationThreshold",
          "type": "uint64"
        },
        {
          "internalType": "address[]",
          "name": "_initialBridgeAssets",
          "type": "address[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "AssetAlreadyAdded",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "AssetIsNotABridge",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "AssetIsZero",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "BridgeAssetIsZero",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ConfigDidNotChange",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "EmptyBridgeAssets",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "FeesDidNotChange",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "GlobalLimitDidNotChange",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "GlobalPauseDidNotChange",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InterestRateModelDidNotChange",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidEntryFee",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidInterestRateModel",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidLTV",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidLiquidationThreshold",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidNotificationReceiver",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidPriceProvidersRepository",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidProtocolLiquidationFee",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidProtocolShareFee",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidSiloFactory",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidSiloRouter",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidSiloVersion",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidTokensFactory",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "LastBridgeAsset",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "LiquidationThresholdDidNotChange",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ManagerDidNotChange",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ManagerIsZero",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MaxLiquidityDidNotChange",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MaximumLTVDidNotChange",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NoPriceProviderForAsset",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotificationReceiverDidNotChange",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyManager",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyOwnerOrManager",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "PriceProviderRepositoryDidNotChange",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "RouterDidNotChange",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "SiloAlreadyExistsForAsset",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "SiloAlreadyExistsForBridgeAssets",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "SiloDoesNotExist",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "SiloIsZero",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "SiloMaxLiquidityDidNotChange",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "SiloNotAllowedForBridgeAsset",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "SiloPauseDidNotChange",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "SiloVersionDoesNotExist",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TokenIsNotAContract",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "VersionForAssetDidNotChange",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "silo",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "uint64",
              "name": "maxLoanToValue",
              "type": "uint64"
            },
            {
              "internalType": "uint64",
              "name": "liquidationThreshold",
              "type": "uint64"
            },
            {
              "internalType": "contract IInterestRateModel",
              "name": "interestRateModel",
              "type": "address"
            }
          ],
          "indexed": false,
          "internalType": "struct ISiloRepository.AssetConfig",
          "name": "assetConfig",
          "type": "tuple"
        }
      ],
      "name": "AssetConfigUpdate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "newBridgeAsset",
          "type": "address"
        }
      ],
      "name": "BridgeAssetAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "bridgeAssetRemoved",
          "type": "address"
        }
      ],
      "name": "BridgeAssetRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "pool",
          "type": "address"
        }
      ],
      "name": "BridgePool",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newMaxDeposits",
          "type": "uint256"
        }
      ],
      "name": "DefaultSiloMaxDepositsLimitUpdate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "newEntryFee",
          "type": "uint64"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "newProtocolShareFee",
          "type": "uint64"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "newProtocolLiquidationFee",
          "type": "uint64"
        }
      ],
      "name": "FeeUpdate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bool",
          "name": "globalPause",
          "type": "bool"
        }
      ],
      "name": "GlobalPause",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "contract IInterestRateModel",
          "name": "newModel",
          "type": "address"
        }
      ],
      "name": "InterestRateModel",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bool",
          "name": "newLimitedMaxLiquidityState",
          "type": "bool"
        }
      ],
      "name": "LimitedMaxLiquidityToggled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "manager",
          "type": "address"
        }
      ],
      "name": "ManagerChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "defaultLiquidationThreshold",
          "type": "uint64"
        }
      ],
      "name": "NewDefaultLiquidationThreshold",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "defaultMaximumLTV",
          "type": "uint64"
        }
      ],
      "name": "NewDefaultMaximumLTV",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "silo",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint128",
          "name": "siloVersion",
          "type": "uint128"
        }
      ],
      "name": "NewSilo",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "contract INotificationReceiver",
          "name": "newIncentiveContract",
          "type": "address"
        }
      ],
      "name": "NotificationReceiverUpdate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "newPendingOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipPending",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "contract IPriceProvidersRepository",
          "name": "newProvider",
          "type": "address"
        }
      ],
      "name": "PriceProvidersRepositoryUpdate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "factory",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint128",
          "name": "siloLatestVersion",
          "type": "uint128"
        },
        {
          "indexed": false,
          "internalType": "uint128",
          "name": "siloDefaultVersion",
          "type": "uint128"
        }
      ],
      "name": "RegisterSiloVersion",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "newRouter",
          "type": "address"
        }
      ],
      "name": "RouterUpdate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint128",
          "name": "newDefaultVersion",
          "type": "uint128"
        }
      ],
      "name": "SiloDefaultVersion",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "silo",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newMaxDeposits",
          "type": "uint256"
        }
      ],
      "name": "SiloMaxDepositsLimitsUpdate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "silo",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "pauseValue",
          "type": "bool"
        }
      ],
      "name": "SiloPause",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "newTokensFactory",
          "type": "address"
        }
      ],
      "name": "TokensFactoryUpdate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "factory",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint128",
          "name": "siloVersion",
          "type": "uint128"
        }
      ],
      "name": "UnregisterSiloVersion",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint128",
          "name": "version",
          "type": "uint128"
        }
      ],
      "name": "VersionForAsset",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "acceptOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newBridgeAsset",
          "type": "address"
        }
      ],
      "name": "addBridgeAsset",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "assetConfigs",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "maxLoanToValue",
          "type": "uint64"
        },
        {
          "internalType": "uint64",
          "name": "liquidationThreshold",
          "type": "uint64"
        },
        {
          "internalType": "contract IInterestRateModel",
          "name": "interestRateModel",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "bridgePool",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_manager",
          "type": "address"
        }
      ],
      "name": "changeManager",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "defaultAssetConfig",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "maxLoanToValue",
          "type": "uint64"
        },
        {
          "internalType": "uint64",
          "name": "liquidationThreshold",
          "type": "uint64"
        },
        {
          "internalType": "contract IInterestRateModel",
          "name": "interestRateModel",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_assetIsABridge",
          "type": "bool"
        }
      ],
      "name": "ensureCanCreateSiloFor",
      "outputs": [],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "entryFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fees",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "entryFee",
          "type": "uint64"
        },
        {
          "internalType": "uint64",
          "name": "protocolShareFee",
          "type": "uint64"
        },
        {
          "internalType": "uint64",
          "name": "protocolLiquidationFee",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getBridgeAssets",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_silo",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        }
      ],
      "name": "getInterestRateModel",
      "outputs": [
        {
          "internalType": "contract IInterestRateModel",
          "name": "model",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_silo",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        }
      ],
      "name": "getLiquidationThreshold",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_silo",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        }
      ],
      "name": "getMaxSiloDepositsValue",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_silo",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        }
      ],
      "name": "getMaximumLTV",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "getNotificationReceiver",
      "outputs": [
        {
          "internalType": "contract INotificationReceiver",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRemovedBridgeAssets",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "getSilo",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "getVersionForAsset",
      "outputs": [
        {
          "internalType": "uint128",
          "name": "",
          "type": "uint128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isPaused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "globalPause",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_silo",
          "type": "address"
        }
      ],
      "name": "isSilo",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_silo",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        }
      ],
      "name": "isSiloPaused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "manager",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxLiquidity",
      "outputs": [
        {
          "internalType": "bool",
          "name": "globalLimit",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "defaultMaxLiquidity",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_siloAsset",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "_siloData",
          "type": "bytes"
        }
      ],
      "name": "newSilo",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pendingOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "priceProvidersRepository",
      "outputs": [
        {
          "internalType": "contract IPriceProvidersRepository",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "protocolLiquidationFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "protocolShareFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract ISiloFactory",
          "name": "_factory",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_isDefault",
          "type": "bool"
        }
      ],
      "name": "registerSiloVersion",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_bridgeAssetToRemove",
          "type": "address"
        }
      ],
      "name": "removeBridgeAsset",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "removePendingOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_siloAsset",
          "type": "address"
        },
        {
          "internalType": "uint128",
          "name": "_siloVersion",
          "type": "uint128"
        },
        {
          "internalType": "bytes",
          "name": "_siloData",
          "type": "bytes"
        }
      ],
      "name": "replaceSilo",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "router",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_silo",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "uint64",
              "name": "maxLoanToValue",
              "type": "uint64"
            },
            {
              "internalType": "uint64",
              "name": "liquidationThreshold",
              "type": "uint64"
            },
            {
              "internalType": "contract IInterestRateModel",
              "name": "interestRateModel",
              "type": "address"
            }
          ],
          "internalType": "struct ISiloRepository.AssetConfig",
          "name": "_assetConfig",
          "type": "tuple"
        }
      ],
      "name": "setAssetConfig",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IInterestRateModel",
          "name": "_defaultInterestRateModel",
          "type": "address"
        }
      ],
      "name": "setDefaultInterestRateModel",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "_defaultLiquidationThreshold",
          "type": "uint64"
        }
      ],
      "name": "setDefaultLiquidationThreshold",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "_defaultMaxLTV",
          "type": "uint64"
        }
      ],
      "name": "setDefaultMaximumLTV",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_maxDeposits",
          "type": "uint256"
        }
      ],
      "name": "setDefaultSiloMaxDepositsLimit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint128",
          "name": "_defaultVersion",
          "type": "uint128"
        }
      ],
      "name": "setDefaultSiloVersion",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint64",
              "name": "entryFee",
              "type": "uint64"
            },
            {
              "internalType": "uint64",
              "name": "protocolShareFee",
              "type": "uint64"
            },
            {
              "internalType": "uint64",
              "name": "protocolLiquidationFee",
              "type": "uint64"
            }
          ],
          "internalType": "struct ISiloRepository.Fees",
          "name": "_fees",
          "type": "tuple"
        }
      ],
      "name": "setFees",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_globalPause",
          "type": "bool"
        }
      ],
      "name": "setGlobalPause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_globalLimit",
          "type": "bool"
        }
      ],
      "name": "setLimitedMaxLiquidity",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_silo",
          "type": "address"
        },
        {
          "internalType": "contract INotificationReceiver",
          "name": "_newNotificationReceiver",
          "type": "address"
        }
      ],
      "name": "setNotificationReceiver",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IPriceProvidersRepository",
          "name": "_repository",
          "type": "address"
        }
      ],
      "name": "setPriceProvidersRepository",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_router",
          "type": "address"
        }
      ],
      "name": "setRouter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_silo",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_maxDeposits",
          "type": "uint256"
        }
      ],
      "name": "setSiloMaxDepositsLimit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_silo",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_pauseValue",
          "type": "bool"
        }
      ],
      "name": "setSiloPause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tokensFactory",
          "type": "address"
        }
      ],
      "name": "setTokensFactory",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_siloAsset",
          "type": "address"
        },
        {
          "internalType": "uint128",
          "name": "_version",
          "type": "uint128"
        }
      ],
      "name": "setVersionForAsset",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "siloFactory",
      "outputs": [
        {
          "internalType": "contract ISiloFactory",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "siloRepositoryPing",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "siloReverse",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "siloVersion",
      "outputs": [
        {
          "internalType": "uint128",
          "name": "byDefault",
          "type": "uint128"
        },
        {
          "internalType": "uint128",
          "name": "latest",
          "type": "uint128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tokensFactory",
      "outputs": [
        {
          "internalType": "contract ITokensFactory",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newPendingOwner",
          "type": "address"
        }
      ],
      "name": "transferPendingOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint128",
          "name": "_siloVersion",
          "type": "uint128"
        }
      ],
      "name": "unregisterSiloVersion",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xa9ed116ac65b31922947bb11ae05d7d05276153d39dc9ca2f37586c33b3514eb",
  "receipt": {
    "to": null,
    "from": "0x3E61FA24520C2754593b4544aCb936BC786206EC",
    "contractAddress": "0xd998C35B7900b344bbBe6555cc11576942Cf309d",
    "transactionIndex": 141,
    "gasUsed": "3474154",
    "logsBloom": "0x
    "blockHash": "0x11040e4af21bdfd742a7d84b7d70547e8c3c93efced54201a44c1be9935f03c8",
    "transactionHash": "0xa9ed116ac65b31922947bb11ae05d7d05276153d39dc9ca2f37586c33b3514eb",
    "logs": [
      {
        "transactionIndex": 141,
        "blockNumber": 15307297,
        "transactionHash": "0xa9ed116ac65b31922947bb11ae05d7d05276153d39dc9ca2f37586c33b3514eb",
        "address": "0xd998C35B7900b344bbBe6555cc11576942Cf309d",
        "topics": [
          "0x04dba622d284ed0014ee4b9a6a68386be1a4c08a4913ae272de89199cc686163",
          "0x0000000000000000000000003e61fa24520c2754593b4544acb936bc786206ec"
        ],
        "data": "0x",
        "logIndex": 231,
        "blockHash": "0x11040e4af21bdfd742a7d84b7d70547e8c3c93efced54201a44c1be9935f03c8"
      },
      {
        "transactionIndex": 141,
        "blockNumber": 15307297,
        "transactionHash": "0xa9ed116ac65b31922947bb11ae05d7d05276153d39dc9ca2f37586c33b3514eb",
        "address": "0x4D919CEcfD4793c0D47866C8d0a02a0950737589",
        "topics": [
          "0x62b7374e631dbf873146b0bd9f3390235a4a47128c3336ec4344c32bc28fe292"
        ],
        "data": "0x",
        "logIndex": 232,
        "blockHash": "0x11040e4af21bdfd742a7d84b7d70547e8c3c93efced54201a44c1be9935f03c8"
      },
      {
        "transactionIndex": 141,
        "blockNumber": 15307297,
        "transactionHash": "0xa9ed116ac65b31922947bb11ae05d7d05276153d39dc9ca2f37586c33b3514eb",
        "address": "0x0e37Df413f97fC198a84A21BC463C41b516AD622",
        "topics": [
          "0x62b7374e631dbf873146b0bd9f3390235a4a47128c3336ec4344c32bc28fe292"
        ],
        "data": "0x",
        "logIndex": 233,
        "blockHash": "0x11040e4af21bdfd742a7d84b7d70547e8c3c93efced54201a44c1be9935f03c8"
      },
      {
        "transactionIndex": 141,
        "blockNumber": 15307297,
        "transactionHash": "0xa9ed116ac65b31922947bb11ae05d7d05276153d39dc9ca2f37586c33b3514eb",
        "address": "0xd998C35B7900b344bbBe6555cc11576942Cf309d",
        "topics": [
          "0xda0511750b81a254e0b084c2c863785e3d1c5b2b989afd8ac0e884f8ee2e033c",
          "0x000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2"
        ],
        "data": "0x",
        "logIndex": 234,
        "blockHash": "0x11040e4af21bdfd742a7d84b7d70547e8c3c93efced54201a44c1be9935f03c8"
      },
      {
        "transactionIndex": 141,
        "blockNumber": 15307297,
        "transactionHash": "0xa9ed116ac65b31922947bb11ae05d7d05276153d39dc9ca2f37586c33b3514eb",
        "address": "0xd998C35B7900b344bbBe6555cc11576942Cf309d",
        "topics": [
          "0x3878761190f637385b15245770921955dbd3f3652f86d6bdfcb0a6afe81db04f",
          "0x0000000000000000000000004d919cecfd4793c0d47866c8d0a02a0950737589"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000001",
        "logIndex": 235,
        "blockHash": "0x11040e4af21bdfd742a7d84b7d70547e8c3c93efced54201a44c1be9935f03c8"
      },
      {
        "transactionIndex": 141,
        "blockNumber": 15307297,
        "transactionHash": "0xa9ed116ac65b31922947bb11ae05d7d05276153d39dc9ca2f37586c33b3514eb",
        "address": "0xd998C35B7900b344bbBe6555cc11576942Cf309d",
        "topics": [
          "0x723c9edacabd261ad9586f194e9d5409ac4b22c939d90a8db99556690018bfe0"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000000001",
        "logIndex": 236,
        "blockHash": "0x11040e4af21bdfd742a7d84b7d70547e8c3c93efced54201a44c1be9935f03c8"
      },
      {
        "transactionIndex": 141,
        "blockNumber": 15307297,
        "transactionHash": "0xa9ed116ac65b31922947bb11ae05d7d05276153d39dc9ca2f37586c33b3514eb",
        "address": "0xd998C35B7900b344bbBe6555cc11576942Cf309d",
        "topics": [
          "0x2cf3169753956d21755ee0c43a6802b18cb71131bae8405d5a0b97e919e4ad29",
          "0x0000000000000000000000000e37df413f97fc198a84a21bc463c41b516ad622"
        ],
        "data": "0x",
        "logIndex": 237,
        "blockHash": "0x11040e4af21bdfd742a7d84b7d70547e8c3c93efced54201a44c1be9935f03c8"
      }
    ],
    "blockNumber": 15307297,
    "cumulativeGasUsed": "13528559",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x4D919CEcfD4793c0D47866C8d0a02a0950737589",
    "0x0e37Df413f97fC198a84A21BC463C41b516AD622",
    "500000000000000000",
    "600000000000000000",
    [
      "0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2"
    ]
  ],
  "numDeployments": 1,
  "solcInputHash": "0c7f4a371f5bf54a4ce669d89d2219f9",
  "metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_siloFactory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokensFactory\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"_defaultMaxLTV\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"_defaultLiquidationThreshold\",\"type\":\"uint64\"},{\"internalType\":\"address[]\",\"name\":\"_initialBridgeAssets\",\"type\":\"address[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AssetAlreadyAdded\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AssetIsNotABridge\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AssetIsZero\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BridgeAssetIsZero\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ConfigDidNotChange\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"EmptyBridgeAssets\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FeesDidNotChange\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"GlobalLimitDidNotChange\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"GlobalPauseDidNotChange\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InterestRateModelDidNotChange\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidEntryFee\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidInterestRateModel\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidLTV\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidLiquidationThreshold\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidNotificationReceiver\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidPriceProvidersRepository\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidProtocolLiquidationFee\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidProtocolShareFee\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidSiloFactory\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidSiloRouter\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidSiloVersion\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidTokensFactory\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LastBridgeAsset\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LiquidationThresholdDidNotChange\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ManagerDidNotChange\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ManagerIsZero\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MaxLiquidityDidNotChange\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MaximumLTVDidNotChange\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoPriceProviderForAsset\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotificationReceiverDidNotChange\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyManager\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyOwnerOrManager\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PriceProviderRepositoryDidNotChange\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RouterDidNotChange\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SiloAlreadyExistsForAsset\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SiloAlreadyExistsForBridgeAssets\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SiloDoesNotExist\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SiloIsZero\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SiloMaxLiquidityDidNotChange\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SiloNotAllowedForBridgeAsset\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SiloPauseDidNotChange\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SiloVersionDoesNotExist\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TokenIsNotAContract\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"VersionForAssetDidNotChange\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"silo\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint64\",\"name\":\"maxLoanToValue\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"liquidationThreshold\",\"type\":\"uint64\"},{\"internalType\":\"contract IInterestRateModel\",\"name\":\"interestRateModel\",\"type\":\"address\"}],\"indexed\":false,\"internalType\":\"struct ISiloRepository.AssetConfig\",\"name\":\"assetConfig\",\"type\":\"tuple\"}],\"name\":\"AssetConfigUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newBridgeAsset\",\"type\":\"address\"}],\"name\":\"BridgeAssetAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"bridgeAssetRemoved\",\"type\":\"address\"}],\"name\":\"BridgeAssetRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"BridgePool\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newMaxDeposits\",\"type\":\"uint256\"}],\"name\":\"DefaultSiloMaxDepositsLimitUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"newEntryFee\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"newProtocolShareFee\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"newProtocolLiquidationFee\",\"type\":\"uint64\"}],\"name\":\"FeeUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"globalPause\",\"type\":\"bool\"}],\"name\":\"GlobalPause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IInterestRateModel\",\"name\":\"newModel\",\"type\":\"address\"}],\"name\":\"InterestRateModel\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"newLimitedMaxLiquidityState\",\"type\":\"bool\"}],\"name\":\"LimitedMaxLiquidityToggled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"manager\",\"type\":\"address\"}],\"name\":\"ManagerChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"defaultLiquidationThreshold\",\"type\":\"uint64\"}],\"name\":\"NewDefaultLiquidationThreshold\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"defaultMaximumLTV\",\"type\":\"uint64\"}],\"name\":\"NewDefaultMaximumLTV\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"silo\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"siloVersion\",\"type\":\"uint128\"}],\"name\":\"NewSilo\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract INotificationReceiver\",\"name\":\"newIncentiveContract\",\"type\":\"address\"}],\"name\":\"NotificationReceiverUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newPendingOwner\",\"type\":\"address\"}],\"name\":\"OwnershipPending\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IPriceProvidersRepository\",\"name\":\"newProvider\",\"type\":\"address\"}],\"name\":\"PriceProvidersRepositoryUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"factory\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"siloLatestVersion\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"siloDefaultVersion\",\"type\":\"uint128\"}],\"name\":\"RegisterSiloVersion\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newRouter\",\"type\":\"address\"}],\"name\":\"RouterUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"newDefaultVersion\",\"type\":\"uint128\"}],\"name\":\"SiloDefaultVersion\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"silo\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newMaxDeposits\",\"type\":\"uint256\"}],\"name\":\"SiloMaxDepositsLimitsUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"silo\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"pauseValue\",\"type\":\"bool\"}],\"name\":\"SiloPause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newTokensFactory\",\"type\":\"address\"}],\"name\":\"TokensFactoryUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"factory\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"siloVersion\",\"type\":\"uint128\"}],\"name\":\"UnregisterSiloVersion\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"version\",\"type\":\"uint128\"}],\"name\":\"VersionForAsset\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newBridgeAsset\",\"type\":\"address\"}],\"name\":\"addBridgeAsset\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"assetConfigs\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"maxLoanToValue\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"liquidationThreshold\",\"type\":\"uint64\"},{\"internalType\":\"contract IInterestRateModel\",\"name\":\"interestRateModel\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bridgePool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_manager\",\"type\":\"address\"}],\"name\":\"changeManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"defaultAssetConfig\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"maxLoanToValue\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"liquidationThreshold\",\"type\":\"uint64\"},{\"internalType\":\"contract IInterestRateModel\",\"name\":\"interestRateModel\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_assetIsABridge\",\"type\":\"bool\"}],\"name\":\"ensureCanCreateSiloFor\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"entryFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fees\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"entryFee\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"protocolShareFee\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"protocolLiquidationFee\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBridgeAssets\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_silo\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"}],\"name\":\"getInterestRateModel\",\"outputs\":[{\"internalType\":\"contract IInterestRateModel\",\"name\":\"model\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_silo\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"}],\"name\":\"getLiquidationThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_silo\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"}],\"name\":\"getMaxSiloDepositsValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_silo\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"}],\"name\":\"getMaximumLTV\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"getNotificationReceiver\",\"outputs\":[{\"internalType\":\"contract INotificationReceiver\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRemovedBridgeAssets\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"getSilo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"getVersionForAsset\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"globalPause\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_silo\",\"type\":\"address\"}],\"name\":\"isSilo\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_silo\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"}],\"name\":\"isSiloPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxLiquidity\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"globalLimit\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"defaultMaxLiquidity\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_siloAsset\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_siloData\",\"type\":\"bytes\"}],\"name\":\"newSilo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceProvidersRepository\",\"outputs\":[{\"internalType\":\"contract IPriceProvidersRepository\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"protocolLiquidationFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"protocolShareFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISiloFactory\",\"name\":\"_factory\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isDefault\",\"type\":\"bool\"}],\"name\":\"registerSiloVersion\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_bridgeAssetToRemove\",\"type\":\"address\"}],\"name\":\"removeBridgeAsset\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"removePendingOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_siloAsset\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"_siloVersion\",\"type\":\"uint128\"},{\"internalType\":\"bytes\",\"name\":\"_siloData\",\"type\":\"bytes\"}],\"name\":\"replaceSilo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_silo\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint64\",\"name\":\"maxLoanToValue\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"liquidationThreshold\",\"type\":\"uint64\"},{\"internalType\":\"contract IInterestRateModel\",\"name\":\"interestRateModel\",\"type\":\"address\"}],\"internalType\":\"struct ISiloRepository.AssetConfig\",\"name\":\"_assetConfig\",\"type\":\"tuple\"}],\"name\":\"setAssetConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IInterestRateModel\",\"name\":\"_defaultInterestRateModel\",\"type\":\"address\"}],\"name\":\"setDefaultInterestRateModel\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_defaultLiquidationThreshold\",\"type\":\"uint64\"}],\"name\":\"setDefaultLiquidationThreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_defaultMaxLTV\",\"type\":\"uint64\"}],\"name\":\"setDefaultMaximumLTV\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxDeposits\",\"type\":\"uint256\"}],\"name\":\"setDefaultSiloMaxDepositsLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"_defaultVersion\",\"type\":\"uint128\"}],\"name\":\"setDefaultSiloVersion\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint64\",\"name\":\"entryFee\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"protocolShareFee\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"protocolLiquidationFee\",\"type\":\"uint64\"}],\"internalType\":\"struct ISiloRepository.Fees\",\"name\":\"_fees\",\"type\":\"tuple\"}],\"name\":\"setFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_globalPause\",\"type\":\"bool\"}],\"name\":\"setGlobalPause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_globalLimit\",\"type\":\"bool\"}],\"name\":\"setLimitedMaxLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_silo\",\"type\":\"address\"},{\"internalType\":\"contract INotificationReceiver\",\"name\":\"_newNotificationReceiver\",\"type\":\"address\"}],\"name\":\"setNotificationReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IPriceProvidersRepository\",\"name\":\"_repository\",\"type\":\"address\"}],\"name\":\"setPriceProvidersRepository\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_router\",\"type\":\"address\"}],\"name\":\"setRouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_silo\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_maxDeposits\",\"type\":\"uint256\"}],\"name\":\"setSiloMaxDepositsLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_silo\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_pauseValue\",\"type\":\"bool\"}],\"name\":\"setSiloPause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokensFactory\",\"type\":\"address\"}],\"name\":\"setTokensFactory\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_siloAsset\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"_version\",\"type\":\"uint128\"}],\"name\":\"setVersionForAsset\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"siloFactory\",\"outputs\":[{\"internalType\":\"contract ISiloFactory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"siloRepositoryPing\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"siloReverse\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"siloVersion\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"byDefault\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"latest\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokensFactory\",\"outputs\":[{\"internalType\":\"contract ITokensFactory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newPendingOwner\",\"type\":\"address\"}],\"name\":\"transferPendingOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"_siloVersion\",\"type\":\"uint128\"}],\"name\":\"unregisterSiloVersion\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"custom:security-contact\":\"security@silo.finance\",\"details\":\"Stores configuration for each asset in each silo. Each asset in each Silo starts with a default config that later on can be changed by the contract owner. Stores registry of Factory contracts that deploy different versions of Silos It is possible to have multiple versions/implementations of Silo and use different versions for different tokens. For example, one version can be used for UNI (ERC20) and the other can be used for UniV3LP tokens (ERC721). Manages bridge assets. Each Silo can have 1 or more bridge assets. New Silos are created with all currently active bridge assets. Silos that are already developed must synchronize bridge assets. Sync can be done by anyone, function has public access. Is a single source of truth for other contract addresses.\",\"kind\":\"dev\",\"methods\":{\"acceptOwnership()\":{\"details\":\"Transfers ownership of the contract to a pending owner Can only be called by the pending owner.\"},\"addBridgeAsset(address)\":{\"details\":\"New bridge asset must be unique. Duplicates in bridge assets are not allowed. It's possible to add bridge asset that has been removed in the past. Note that all Silos must be synced manually. Callable only by owner.\",\"params\":{\"_newBridgeAsset\":\"bridge asset address\"}},\"changeManager(address)\":{\"details\":\"Callable by manager or external owner role\",\"params\":{\"_manager\":\"new manager address\"}},\"constructor\":{\"params\":{\"_defaultLiquidationThreshold\":\"liquidation threshold for default configuration\",\"_defaultMaxLTV\":\"maximum Loan-to-Value for default configuration\",\"_initialBridgeAssets\":\"bridge assets to start with\",\"_siloFactory\":\"address of SiloFactory contract that deploys Silos\",\"_tokensFactory\":\"address of TokensFactory contract that deploys debt and collateral tokens for each Silo asset\"}},\"ensureCanCreateSiloFor(address,bool)\":{\"details\":\"Checks all conditions for new silo creation and throws when not possible to create\",\"params\":{\"_asset\":\"address of asset for which you want to create silo\",\"_assetIsABridge\":\"bool TRUE when `_asset` is bridge asset, FALSE when it is not\"}},\"entryFee()\":{\"details\":\"Get protocol fee for opening a borrow position\",\"returns\":{\"_0\":\"fee in precision points (Solvency._PRECISION_DECIMALS == 100%)\"}},\"getBridgeAssets()\":{\"details\":\"Keep in mind that not all Silos may be synced with current bridge assets so it's possible that some assets in that list are not part of given Silo.\",\"returns\":{\"_0\":\"address array of bridge assets\"}},\"getInterestRateModel(address,address)\":{\"details\":\"If dedicated config is not set, method returns default config\",\"params\":{\"_asset\":\"address of an asset\",\"_silo\":\"address of Silo\"},\"returns\":{\"model\":\"address of interest rate model\"}},\"getLiquidationThreshold(address,address)\":{\"details\":\"If dedicated config is not set, method returns default config\",\"params\":{\"_asset\":\"address of an asset\",\"_silo\":\"address of Silo\"},\"returns\":{\"_0\":\"liquidation threshold in precision points (Solvency._PRECISION_DECIMALS)\"}},\"getMaxSiloDepositsValue(address,address)\":{\"params\":{\"_asset\":\"Silo asset for which to set limit\",\"_silo\":\"Silo address for which to set limit\"},\"returns\":{\"_0\":\"deposit limit for Silo\"}},\"getMaximumLTV(address,address)\":{\"details\":\"If dedicated config is not set, method returns default config\",\"params\":{\"_asset\":\"address of an asset\",\"_silo\":\"address of Silo\"},\"returns\":{\"_0\":\"maximum LTV in precision points (Solvency._PRECISION_DECIMALS)\"}},\"getRemovedBridgeAssets()\":{\"details\":\"Keep in mind that not all Silos may be synced with bridge assets so it's possible that some assets in that list are still part of given Silo.\",\"returns\":{\"_0\":\"address array of bridge assets\"}},\"isSilo(address)\":{\"params\":{\"_silo\":\"address of expected Silo\"},\"returns\":{\"_0\":\"true if address is Silo deployment, otherwise false\"}},\"isSiloPaused(address,address)\":{\"params\":{\"_asset\":\"address of an asset\",\"_silo\":\"address of Silo\"},\"returns\":{\"_0\":\"true if given asset in a Silo is paused, otherwise false\"}},\"newSilo(address,bytes)\":{\"details\":\"Silo does NOT support rebase and deflationary tokens\",\"params\":{\"_siloAsset\":\"silo asset\",\"_siloData\":\"(optional) data that may be needed during silo creation\"},\"returns\":{\"_0\":\"address of created silo\"}},\"owner()\":{\"returns\":{\"_0\":\"owner role address\"}},\"pendingOwner()\":{\"details\":\"Returns the address of the pending owner.\"},\"protocolLiquidationFee()\":{\"details\":\"Get protocol liquidation fee\",\"returns\":{\"_0\":\"protocol liquidation fee in precision points (Solvency._PRECISION_DECIMALS == 100%)\"}},\"protocolShareFee()\":{\"details\":\"Get protocol share fee\",\"returns\":{\"_0\":\"protocol share fee in precision points (Solvency._PRECISION_DECIMALS == 100%)\"}},\"registerSiloVersion(address,bool)\":{\"details\":\"User can choose which Silo version he wants to deploy. It's possible to have multiple versions of Silo. Callable only by owner.\",\"params\":{\"_factory\":\"factory contract that deploys new version of Silo\",\"_isDefault\":\"true if this version should be used as default\"}},\"removeBridgeAsset(address)\":{\"details\":\"Note that all Silos must be synced manually. Callable only by owner.\",\"params\":{\"_bridgeAssetToRemove\":\"bridge asset address to be removed\"}},\"removePendingOwnership()\":{\"details\":\"Clears the pending ownership. Can only be called by the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"replaceSilo(address,uint128,bytes)\":{\"details\":\"Silo does NOT support rebase and deflationary tokens\",\"params\":{\"_siloAsset\":\"silo asset\",\"_siloData\":\"(optional) data that may be needed during silo creation\",\"_siloVersion\":\"version of silo implementation. Use 0 for default version which is fine for 99% of cases.\"},\"returns\":{\"_0\":\"address of created silo\"}},\"setAssetConfig(address,address,(uint64,uint64,address))\":{\"details\":\"Callable only by owner\",\"params\":{\"_asset\":\"asset address for which config applies\",\"_assetConfig\":\":    - _maxLoanToValue maximum Loan-to-Value, for details see `Repository.AssetConfig.maxLoanToValue`    - _liquidationThreshold liquidation threshold, for details see `Repository.AssetConfig.maxLoanToValue`    - _interestRateModel interest rate model address, for details see `Repository.AssetConfig.interestRateModel`\",\"_silo\":\"Silo address for which config applies\"}},\"setDefaultInterestRateModel(address)\":{\"details\":\"Callable only by owner\",\"params\":{\"_defaultInterestRateModel\":\"default interest rate model\"}},\"setDefaultLiquidationThreshold(uint64)\":{\"details\":\"Callable only by owner\",\"params\":{\"_defaultLiquidationThreshold\":\"default liquidation threshold in precision points (Solvency._PRECISION_DECIMALS)\"}},\"setDefaultMaximumLTV(uint64)\":{\"details\":\"Callable only by owner\",\"params\":{\"_defaultMaxLTV\":\"default maximum LTV in precision points (Solvency._PRECISION_DECIMALS)\"}},\"setDefaultSiloMaxDepositsLimit(uint256)\":{\"params\":{\"_maxDeposits\":\"deposit limit amount in quote token\"}},\"setDefaultSiloVersion(uint128)\":{\"details\":\"Callable only by owner.\",\"params\":{\"_defaultVersion\":\"Silo version to be set as default\"}},\"setFees((uint64,uint64,uint64))\":{\"details\":\"Callable only by owner\",\"params\":{\"_fees\":\": - _entryFee one time protocol fee for opening a borrow position in precision points (Solvency._PRECISION_DECIMALS) - _protocolShareFee protocol revenue share in interest paid in precision points (Solvency._PRECISION_DECIMALS) - _protocolLiquidationFee protocol share in liquidation profit in precision points (Solvency._PRECISION_DECIMALS). It's calculated from total collateral amount to be transferred to liquidator.\"}},\"setGlobalPause(bool)\":{\"details\":\"Callable only by owner.\",\"params\":{\"_globalPause\":\"true to pause all Silos, otherwise false\"}},\"setNotificationReceiver(address,address)\":{\"details\":\"Callable only by owner\",\"params\":{\"_notificationReceiver\":\"NotificationReceiver address\",\"_silo\":\"silo address for which to set `_notificationReceiver`\"}},\"setPriceProvidersRepository(address)\":{\"details\":\"Callable only by owner\",\"params\":{\"_repository\":\"price provider repository address\"}},\"setRouter(address)\":{\"details\":\"Callable only by owner\",\"params\":{\"_router\":\"router address\"}},\"setSiloMaxDepositsLimit(address,address,uint256)\":{\"params\":{\"_asset\":\"Silo asset for which to set limit\",\"_maxDeposits\":\"deposit limit amount in quote token\",\"_silo\":\"Silo address for which to set limit\"}},\"setSiloPause(address,address,bool)\":{\"details\":\"Callable only by owner.\",\"params\":{\"_asset\":\"address of an asset that is being paused\",\"_pauseValue\":\"true to pause, false to unpause\",\"_silo\":\"address of Silo in which `_asset` is being paused\"}},\"setTokensFactory(address)\":{\"details\":\"Callable only by owner\",\"params\":{\"_tokensFactory\":\"address of TokensFactory contract that deploys debt and collateral tokens\"}},\"setVersionForAsset(address,uint128)\":{\"params\":{\"_siloAsset\":\"silo asset\",\"_version\":\"version of Silo that will be assigned for `_siloAsset`, zero (default) is acceptable\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"transferPendingOwnership(address)\":{\"details\":\"Transfers pending ownership of the contract to a new account (`newPendingOwner`) and clears any existing pending ownership. Can only be called by the current owner.\"},\"unregisterSiloVersion(uint128)\":{\"details\":\"Callable only by owner.\",\"params\":{\"_siloVersion\":\"Silo version to be unregistered\"}}},\"stateVariables\":{\"_INITIAL_SILO_VERSION\":{\"details\":\"Value used to initialize the Silo's version data\"},\"_ONE_HUNDRED_PERCENT\":{\"details\":\"representation of 100%\"},\"_bridgeAssets\":{\"details\":\"List of bridge assets supported by the protocol\"},\"_removedBridgeAssets\":{\"details\":\"List of bridge assets removed by the protocol\"},\"assetConfigs\":{\"details\":\"maps silo => asset => config\"},\"bridgePool\":{\"details\":\"Silo for bridge asset. We can have only one bridge pool\"},\"defaultAssetConfig\":{\"details\":\"Default values for AssetConfig. Used if values are not configured manually.\"},\"fees\":{\"details\":\"Protocol fee configuration\"},\"getNotificationReceiver\":{\"details\":\"Maps Silo address to incentive contract that will distribute rewards for that Silo\"},\"getSilo\":{\"details\":\"maps token address to silo address, asset => silo\"},\"getVersionForAsset\":{\"details\":\"Maps asset => silo version\"},\"priceProvidersRepository\":{\"details\":\"PriceProvidersRepository contract that manages PriceProviders implementations and is an entry point for reading prices for Silos.\"},\"router\":{\"details\":\"SiloRouter utility contract that combines number of actions (Deposit, Withdraw, Borrow, Repay) for batch execution in single transaction.\"},\"siloFactory\":{\"details\":\"Maps version => ISiloFactory. Versions start at 1 and are incremented by 1.\"},\"siloReverse\":{\"details\":\"maps silo address to token address, silo => asset\"},\"siloVersion\":{\"details\":\"Silo version data\"},\"tokensFactory\":{\"details\":\"Factory contracts that deploys debt and collateral tokens for each asset in Silo\"}},\"title\":\"SiloRepository\",\"version\":1},\"userdoc\":{\"events\":{\"AssetConfigUpdate(address,address,(uint64,uint64,address))\":{\"notice\":\"Emitted when asset config is updated for a silo\"},\"BridgeAssetAdded(address)\":{\"notice\":\"Emitted on new bridge asset\"},\"BridgeAssetRemoved(address)\":{\"notice\":\"Emitted on removed bridge asset\"},\"BridgePool(address)\":{\"notice\":\"Emitted when new Silo (or existing one) becomes a bridge pool (pool with only bridge tokens).\"},\"DefaultSiloMaxDepositsLimitUpdate(uint256)\":{\"notice\":\"Emitted when default max liquidity limit is changed\"},\"FeeUpdate(uint64,uint64,uint64)\":{\"notice\":\"Emitted when default fee is updated\"},\"GlobalPause(bool)\":{\"notice\":\"Emitted when all Silos are paused or unpaused\"},\"InterestRateModel(address)\":{\"notice\":\"Emitted when default interest rate model is changed\"},\"LimitedMaxLiquidityToggled(bool)\":{\"notice\":\"Emitted when max liquidity toggle is switched\"},\"ManagerChanged(address)\":{\"notice\":\"Emitted when manager is changed\"},\"NewSilo(address,address,uint128)\":{\"notice\":\"Emitted on new Silo creation\"},\"NotificationReceiverUpdate(address)\":{\"notice\":\"Emitted on INotificationReceiver address update\"},\"OwnershipPending(address)\":{\"notice\":\"Emitted when ownership transfer is proposed, aka pending owner is set\"},\"OwnershipTransferred(address)\":{\"notice\":\"Emitted when ownership is transferred on `transferOwnership` and `acceptOwnership`\"},\"PriceProvidersRepositoryUpdate(address)\":{\"notice\":\"Emitted on price provider repository address update\"},\"RegisterSiloVersion(address,uint128,uint128)\":{\"notice\":\"Emitted when new Silo version is registered\"},\"RouterUpdate(address)\":{\"notice\":\"Emitted on router address update\"},\"SiloDefaultVersion(uint128)\":{\"notice\":\"Emitted when default Silo version is updated\"},\"SiloMaxDepositsLimitsUpdate(address,address,uint256)\":{\"notice\":\"Emitted when deposit liquidity limit is changed for Silo and asset\"},\"SiloPause(address,address,bool)\":{\"notice\":\"Emitted when a single Silo or single asset in a Silo is paused or unpaused\"},\"TokensFactoryUpdate(address)\":{\"notice\":\"Emitted on token factory address update\"},\"UnregisterSiloVersion(address,uint128)\":{\"notice\":\"Emitted when Silo version is unregistered\"},\"VersionForAsset(address,uint128)\":{\"notice\":\"Emitted when silo (silo factory) version is set for asset\"}},\"kind\":\"user\",\"methods\":{\"addBridgeAsset(address)\":{\"notice\":\"Adds new bridge asset\"},\"changeManager(address)\":{\"notice\":\"Change manager address\"},\"getBridgeAssets()\":{\"notice\":\"Get current bridge assets\"},\"getInterestRateModel(address,address)\":{\"notice\":\"Get Interest Rate Model address for asset in given Silo\"},\"getLiquidationThreshold(address,address)\":{\"notice\":\"Get liquidation threshold for asset in given Silo\"},\"getMaxSiloDepositsValue(address,address)\":{\"notice\":\"Gets deposit limit for Silo\"},\"getMaximumLTV(address,address)\":{\"notice\":\"Get maximum LTV for asset in given Silo\"},\"getRemovedBridgeAssets()\":{\"notice\":\"Get removed bridge assets\"},\"isSilo(address)\":{\"notice\":\"Check if contract address is a Silo deployment\"},\"isSiloPaused(address,address)\":{\"notice\":\"Check given asset in a Silo is paused\"},\"newSilo(address,bytes)\":{\"notice\":\"use this method only when off-chain verification is OFF\"},\"owner()\":{\"notice\":\"Get owner role address of Repository\"},\"registerSiloVersion(address,bool)\":{\"notice\":\"Registers new Silo version\"},\"removeBridgeAsset(address)\":{\"notice\":\"Removes bridge asset\"},\"replaceSilo(address,uint128,bytes)\":{\"notice\":\"use this method to deploy new version of Silo for an asset that already has Silo deployed. Only owner (DAO) can replace.\"},\"setAssetConfig(address,address,(uint64,uint64,address))\":{\"notice\":\"Set configuration for given asset in given Silo\"},\"setDefaultInterestRateModel(address)\":{\"notice\":\"Set default interest rate model\"},\"setDefaultLiquidationThreshold(uint64)\":{\"notice\":\"Set default liquidation threshold\"},\"setDefaultMaximumLTV(uint64)\":{\"notice\":\"Set default maximum LTV\"},\"setDefaultSiloMaxDepositsLimit(uint256)\":{\"notice\":\"Sets default deposit limit for all Silos\"},\"setDefaultSiloVersion(uint128)\":{\"notice\":\"Sets default Silo version\"},\"setFees((uint64,uint64,uint64))\":{\"notice\":\"Set default fees\"},\"setGlobalPause(bool)\":{\"notice\":\"Pause all Silos\"},\"setLimitedMaxLiquidity(bool)\":{\"notice\":\"Sets limited liquidity to provided value\"},\"setNotificationReceiver(address,address)\":{\"notice\":\"Set NotificationReceiver contract\"},\"setPriceProvidersRepository(address)\":{\"notice\":\"Set price provider repository\"},\"setRouter(address)\":{\"notice\":\"Set router contract\"},\"setSiloMaxDepositsLimit(address,address,uint256)\":{\"notice\":\"Sets deposit limit for Silo\"},\"setSiloPause(address,address,bool)\":{\"notice\":\"Pause single asset in a single Silo\"},\"setTokensFactory(address)\":{\"notice\":\"Set factory contract for debt and collateral tokens for each Silo asset\"},\"setVersionForAsset(address,uint128)\":{\"notice\":\"setter for `getVersionForAsset` mapping\"},\"unregisterSiloVersion(uint128)\":{\"notice\":\"Unregisters Silo version\"}},\"notice\":\"SiloRepository handles the creation and configuration of Silos.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/SiloRepository.sol\":\"SiloRepository\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x0e9621f60b2faabe65549f7ed0f24e8853a45c1b7990d47e8160e523683f3935\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n\\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\\n        require(currentAllowance >= amount, \\\"ERC20: transfer amount exceeds allowance\\\");\\n        unchecked {\\n            _approve(sender, _msgSender(), currentAllowance - amount);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        uint256 senderBalance = _balances[sender];\\n        require(senderBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[sender] = senderBalance - amount;\\n        }\\n        _balances[recipient] += amount;\\n\\n        emit Transfer(sender, recipient, amount);\\n\\n        _afterTokenTransfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0xd1d8caaeb45f78e0b0715664d56c220c283c89bf8b8c02954af86404d6b367f8\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x61437cb513a887a1bbad006e7b1c8b414478427d33de47c5600af3c748f108da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc3d946432c0ddbb1f846a0d3985be71299df331b91d06732152117f62f0be2b5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x51b758a8815ecc9596c66c37d56b1d33883a444631a3f916b9fe65cb863ef7c4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/structs/EnumerableSet.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastvalue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastvalue;\\n                // Update the index for the moved value\\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        return _values(set._inner);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x9772845c886f87a3aab315f8d6b68aa599027c20f441b131cd4afaf65b588900\",\"license\":\"MIT\"},\"contracts/BaseSilo.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.13;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\n\\nimport \\\"./utils/LiquidationReentrancyGuard.sol\\\";\\n\\nimport \\\"./interfaces/IBaseSilo.sol\\\";\\nimport \\\"./interfaces/IGuardedLaunch.sol\\\";\\nimport \\\"./interfaces/ISiloRepository.sol\\\";\\nimport \\\"./interfaces/IPriceProvidersRepository.sol\\\";\\nimport \\\"./interfaces/IInterestRateModel.sol\\\";\\nimport \\\"./interfaces/IShareToken.sol\\\";\\n\\nimport \\\"./lib/Ping.sol\\\";\\nimport \\\"./lib/EasyMath.sol\\\";\\nimport \\\"./lib/TokenHelper.sol\\\";\\nimport \\\"./lib/Solvency.sol\\\";\\n\\n/// @title BaseSilo\\n/// @dev Base contract for Silo core logic.\\n/// @custom:security-contact security@silo.finance\\nabstract contract BaseSilo is IBaseSilo, ReentrancyGuard, LiquidationReentrancyGuard {\\n    using SafeERC20 for ERC20;\\n    using EasyMath for uint256;\\n\\n    ISiloRepository immutable public override siloRepository;\\n\\n    // asset address for which Silo was created\\n    address public immutable siloAsset;\\n\\n    /// @dev version of silo\\n    /// @notice It tells us which `SiloRepository.siloFactory(version)` created this Silo\\n    uint128 public immutable VERSION; // solhint-disable-line var-name-mixedcase\\n\\n    // solhint-disable-next-line var-name-mixedcase\\n    uint256 private immutable _ASSET_DECIMAL_POINTS;\\n\\n    /// @dev stores all *synced* assets (bridge assets + removed bridge assets + siloAsset)\\n    address[] private _allSiloAssets;\\n\\n    /// @dev asset => AssetStorage\\n    mapping(address => AssetStorage) private _assetStorage;\\n\\n    /// @dev asset => AssetInterestData\\n    mapping(address => AssetInterestData) private _interestData;\\n\\n    error AssetDoesNotExist();\\n    error BorrowNotPossible();\\n    error DepositNotPossible();\\n    error DepositsExceedLimit();\\n    error InvalidRepository();\\n    error InvalidSiloVersion();\\n    error MaximumLTVReached();\\n    error NotEnoughLiquidity();\\n    error NotEnoughDeposits();\\n    error NotSolvent();\\n    error OnlyRouter();\\n    error Paused();\\n    error UnexpectedEmptyReturn();\\n    error UserIsZero();\\n\\n    modifier onlyExistingAsset(address _asset) {\\n        if (_interestData[_asset].status == AssetStatus.Undefined) {\\n            revert AssetDoesNotExist();\\n        }\\n\\n        _;\\n    }\\n\\n    modifier onlyRouter() {\\n        if (msg.sender != siloRepository.router()) revert OnlyRouter();\\n\\n        _;\\n    }\\n\\n    modifier validateMaxDepositsAfter(address _asset) {\\n        _;\\n\\n        IPriceProvidersRepository priceProviderRepo = siloRepository.priceProvidersRepository();\\n\\n        AssetStorage storage _assetState = _assetStorage[_asset];\\n        uint256 allDeposits = _assetState.totalDeposits + _assetState.collateralOnlyDeposits;\\n\\n        if (\\n            priceProviderRepo.getPrice(_asset) * allDeposits / (10 ** IERC20Metadata(_asset).decimals()) >\\n            IGuardedLaunch(address(siloRepository)).getMaxSiloDepositsValue(address(this), _asset)\\n        ) {\\n            revert DepositsExceedLimit();\\n        }\\n    }\\n\\n    constructor (ISiloRepository _repository, address _siloAsset, uint128 _version) {\\n        if (!Ping.pong(_repository.siloRepositoryPing)) revert InvalidRepository();\\n        if (_version == 0) revert InvalidSiloVersion();\\n\\n        uint256 decimals = TokenHelper.assertAndGetDecimals(_siloAsset);\\n\\n        VERSION = _version;\\n        siloRepository = _repository;\\n        siloAsset = _siloAsset;\\n        _ASSET_DECIMAL_POINTS = 10**decimals;\\n    }\\n\\n    /// @dev this is exposed only for test purposes, but it is safe to leave it like that\\n    function initAssetsTokens() external nonReentrant {\\n        _initAssetsTokens();\\n    }\\n\\n    /// @inheritdoc IBaseSilo\\n    function syncBridgeAssets() external override nonReentrant {\\n        // sync removed assets\\n        address[] memory removedBridgeAssets = siloRepository.getRemovedBridgeAssets();\\n\\n        for (uint256 i = 0; i < removedBridgeAssets.length; i++) {\\n            // If removed bridge asset is the silo asset for this silo, do not remove it\\n            address removedBridgeAsset = removedBridgeAssets[i];\\n            if (removedBridgeAsset != siloAsset) {\\n                _interestData[removedBridgeAsset].status = AssetStatus.Removed;\\n                emit AssetStatusUpdate(removedBridgeAsset, AssetStatus.Removed);\\n            }\\n        }\\n\\n        // must be called at the end, because we overriding `_assetStorage[removedBridgeAssets[i]].removed`\\n        _initAssetsTokens();\\n    }\\n\\n    /// @inheritdoc IBaseSilo\\n    function assetStorage(address _asset) external view override returns (AssetStorage memory) {\\n        return _assetStorage[_asset];\\n    }\\n\\n    /// @inheritdoc IBaseSilo\\n    function interestData(address _asset) external view override returns (AssetInterestData memory) {\\n        return _interestData[_asset];\\n    }\\n\\n    /// @inheritdoc IBaseSilo\\n    function utilizationData(address _asset) external view override returns (UtilizationData memory data) {\\n        AssetStorage storage _assetState = _assetStorage[_asset];\\n\\n        return UtilizationData(\\n            _assetState.totalDeposits,\\n            _assetState.totalBorrowAmount,\\n            _interestData[_asset].interestRateTimestamp\\n        );\\n    }\\n\\n    /// @inheritdoc IBaseSilo\\n    function getAssets() public view override returns (address[] memory assets) {\\n        return _allSiloAssets;\\n    }\\n\\n    /// @inheritdoc IBaseSilo\\n    function getAssetsWithState() public view override returns (\\n        address[] memory assets,\\n        AssetStorage[] memory assetsStorage\\n    ) {\\n        assets = _allSiloAssets;\\n        assetsStorage = new AssetStorage[](assets.length);\\n\\n        for (uint256 i = 0; i < assets.length; i++) {\\n            assetsStorage[i] = _assetStorage[assets[i]];\\n        }\\n    }\\n\\n    /// @inheritdoc IBaseSilo\\n    function isSolvent(address _user) public view override returns (bool) {\\n        if (_user == address(0)) revert UserIsZero();\\n\\n        (address[] memory assets, AssetStorage[] memory assetsStates) = getAssetsWithState();\\n\\n        (uint256 userLTV, uint256 liquidationThreshold) = Solvency.calculateLTVs(\\n            Solvency.SolvencyParams(\\n                siloRepository,\\n                ISilo(address(this)),\\n                assets,\\n                assetsStates,\\n                _user\\n            ),\\n            Solvency.TypeofLTV.LiquidationThreshold\\n        );\\n\\n        return userLTV <= liquidationThreshold;\\n    }\\n\\n    /// @inheritdoc IBaseSilo\\n    function depositPossible(address _asset, address _depositor) public view override returns (bool) {\\n        return _assetStorage[_asset].debtToken.balanceOf(_depositor) == 0\\n            && _interestData[_asset].status == AssetStatus.Active;\\n    }\\n\\n    /// @inheritdoc IBaseSilo\\n    function borrowPossible(address _asset, address _borrower) public view override returns (bool) {\\n        AssetStorage storage _assetState = _assetStorage[_asset];\\n\\n        return _assetState.collateralToken.balanceOf(_borrower) == 0\\n            && _assetState.collateralOnlyToken.balanceOf(_borrower) == 0\\n            && _interestData[_asset].status == AssetStatus.Active;\\n    }\\n\\n    /// @inheritdoc IBaseSilo\\n    function liquidity(address _asset) public view returns (uint256) {\\n        return ERC20(_asset).balanceOf(address(this)) - _assetStorage[_asset].collateralOnlyDeposits;\\n    }\\n\\n    /// @dev Initiate asset by deploying accounting EC20 tokens for collateral and debt\\n    /// @param _tokensFactory factory contract that deploys collateral and debt tokens\\n    /// @param _asset which asset to initialize\\n    /// @param _isBridgeAsset true if initialized asset is a bridge asset\\n    function _initAsset(ITokensFactory _tokensFactory, address _asset, bool _isBridgeAsset) internal {\\n        AssetSharesMetadata memory metadata = _generateSharesNames(_asset, _isBridgeAsset);\\n\\n        AssetStorage storage _assetState = _assetStorage[_asset];\\n\\n        _assetState.collateralToken = _tokensFactory.createShareCollateralToken(\\n            metadata.collateralName, metadata.collateralSymbol, _asset\\n        );\\n\\n        _assetState.collateralOnlyToken = _tokensFactory.createShareCollateralToken(\\n            metadata.protectedName, metadata.protectedSymbol, _asset\\n        );\\n\\n        _assetState.debtToken = _tokensFactory.createShareDebtToken(\\n            metadata.debtName, metadata.debtSymbol, _asset\\n        );\\n\\n        // keep synced asset in storage array\\n        _allSiloAssets.push(_asset);\\n        _interestData[_asset].status = AssetStatus.Active;\\n        emit AssetStatusUpdate(_asset, AssetStatus.Active);\\n    }\\n\\n    /// @dev Initializes all assets (bridge assets + unique asset) for Silo but only if asset has not been\\n    /// initialized already. It's safe to call it multiple times. It's safe for anyone to call it at any time.\\n    function _initAssetsTokens() internal {\\n        ITokensFactory tokensFactory = siloRepository.tokensFactory();\\n\\n        // init silo asset if needed\\n        if (address(_assetStorage[siloAsset].collateralToken) == address(0)) {\\n            _initAsset(tokensFactory, siloAsset, false);\\n        }\\n\\n        // sync active assets\\n        address[] memory bridgeAssets = siloRepository.getBridgeAssets();\\n\\n        for (uint256 i = 0; i < bridgeAssets.length; i++) {\\n            address bridgeAsset = bridgeAssets[i];\\n            // In case a bridge asset is added that already has a Silo,\\n            // do not initiate that asset in its Silo\\n            if (address(_assetStorage[bridgeAsset].collateralToken) == address(0)) {\\n                _initAsset(tokensFactory, bridgeAsset, true);\\n            } else {\\n                _interestData[bridgeAsset].status = AssetStatus.Active;\\n                emit AssetStatusUpdate(bridgeAsset, AssetStatus.Active);\\n            }\\n        }\\n    }\\n\\n    /// @dev Generate asset shares tokens names and symbols\\n    /// @param _asset asset for which shares tokens will be initializaed\\n    /// @param _isBridgeAsset true if initialized asset is a bridge asset\\n    function _generateSharesNames(address _asset, bool _isBridgeAsset)\\n        internal\\n        view\\n        returns (AssetSharesMetadata memory metadata)\\n    {\\n        // Naming convention in UNI example:\\n        // - for siloAsset: sUNI, dUNI, spUNI\\n        // - for bridgeAsset: sWETH-UNI, dWETH-UNI, spWETH-UNI\\n        string memory assetSymbol = TokenHelper.symbol(_asset);\\n\\n        metadata = AssetSharesMetadata({\\n            collateralName: string.concat(\\\"Silo Finance Borrowable \\\", assetSymbol, \\\" Deposit\\\"),\\n            collateralSymbol: string.concat(\\\"s\\\", assetSymbol),\\n            protectedName: string.concat(\\\"Silo Finance Protected \\\", assetSymbol, \\\" Deposit\\\"),\\n            protectedSymbol: string.concat(\\\"sp\\\", assetSymbol),\\n            debtName: string.concat(\\\"Silo Finance \\\", assetSymbol, \\\" Debt\\\"),\\n            debtSymbol: string.concat(\\\"d\\\", assetSymbol)\\n        });\\n\\n        if (_isBridgeAsset) {\\n            string memory baseSymbol = TokenHelper.symbol(siloAsset);\\n\\n            metadata.collateralName = string.concat(metadata.collateralName, \\\" in \\\", baseSymbol, \\\" Silo\\\");\\n            metadata.collateralSymbol = string.concat(metadata.collateralSymbol, \\\"-\\\", baseSymbol);\\n\\n            metadata.protectedName = string.concat(metadata.protectedName, \\\" in \\\", baseSymbol, \\\" Silo\\\");\\n            metadata.protectedSymbol = string.concat(metadata.protectedSymbol, \\\"-\\\", baseSymbol);\\n\\n            metadata.debtName = string.concat(metadata.debtName, \\\" in \\\", baseSymbol, \\\" Silo\\\");\\n            metadata.debtSymbol = string.concat(metadata.debtSymbol, \\\"-\\\", baseSymbol);\\n        }\\n    }\\n\\n    /// @dev Main deposit function that handles all deposit logic and validation\\n    /// @param _asset asset address that is being deposited\\n    /// @param _from wallet address form which to pull asset tokens\\n    /// @param _depositor wallet address that will be granted ownership of deposited tokens. Keep in mind\\n    /// that deposit can be made by Router contract but the owner of the deposit should be user.\\n    /// @param _amount deposit amount\\n    /// @param _collateralOnly true if deposit should be used for collateral only. Otherwise false.\\n    /// Collateral only deposit cannot be borrowed by anyone and does not earn any interest. However,\\n    /// it can be used as collateral and can be subject to liquidation.\\n    /// @return collateralAmount deposited amount\\n    /// @return collateralShare `_depositor` collateral shares based on deposited amount\\n    function _deposit(\\n        address _asset,\\n        address _from,\\n        address _depositor,\\n        uint256 _amount,\\n        bool _collateralOnly\\n    )\\n        internal\\n        nonReentrant\\n        validateMaxDepositsAfter(_asset)\\n        returns (uint256 collateralAmount, uint256 collateralShare)\\n    {\\n        // MUST BE CALLED AS FIRST METHOD!\\n        _accrueInterest(_asset);\\n\\n        if (!depositPossible(_asset, _depositor)) revert DepositNotPossible();\\n\\n        AssetStorage storage _state = _assetStorage[_asset];\\n\\n        collateralAmount = _amount;\\n\\n        uint256 totalDepositsCached = _collateralOnly ? _state.collateralOnlyDeposits : _state.totalDeposits;\\n\\n        if (_collateralOnly) {\\n            collateralShare = _amount.toShare(totalDepositsCached, _state.collateralOnlyToken.totalSupply());\\n            _state.collateralOnlyDeposits = totalDepositsCached + _amount;\\n            _state.collateralOnlyToken.mint(_depositor, collateralShare);\\n        } else {\\n            collateralShare = _amount.toShare(totalDepositsCached, _state.collateralToken.totalSupply());\\n            _state.totalDeposits = totalDepositsCached + _amount;\\n            _state.collateralToken.mint(_depositor, collateralShare);\\n        }\\n\\n        ERC20(_asset).safeTransferFrom(_from, address(this), _amount);\\n\\n        emit Deposit(_asset, _depositor, _amount, _collateralOnly);\\n    }\\n\\n    /// @dev Main withdraw function that handles all withdraw logic and validation\\n    /// @param _asset asset address that is being withdrawn\\n    /// @param _depositor wallet address that is an owner of the deposited tokens\\n    /// @param _receiver wallet address that will receive withdrawn tokens. It's possible that Router\\n    /// contract is the owner of deposited tokens but we want user to get these tokens directly.\\n    /// @param _amount amount to withdraw. If amount is equal to maximum value stored by uint256 type\\n    /// (type(uint256).max), it will be assumed that user wants to withdraw all tokens and final account\\n    /// will be dynamically calculated including interest.\\n    /// @param _collateralOnly true if collateral only tokens are to be withdrawn. Otherwise false.\\n    /// User can deposit the same asset as collateral only and as regular deposit. During withdraw,\\n    /// it must be specified which tokens are to be withdrawn.\\n    /// @return withdrawnAmount withdrawn amount that was transferred to user\\n    /// @return withdrawnShare burned share based on `withdrawnAmount`\\n    function _withdraw(address _asset, address _depositor, address _receiver, uint256 _amount, bool _collateralOnly)\\n        internal\\n        nonReentrant // because we transferring tokens\\n        onlyExistingAsset(_asset)\\n        returns (uint256 withdrawnAmount, uint256 withdrawnShare)\\n    {\\n        // MUST BE CALLED AS FIRST METHOD!\\n        _accrueInterest(_asset);\\n\\n        (withdrawnAmount, withdrawnShare) = _withdrawAsset(\\n            _asset,\\n            _amount,\\n            _depositor,\\n            _receiver,\\n            _collateralOnly,\\n            0 // do not apply any fees on regular withdraw\\n        );\\n\\n        if (withdrawnAmount == 0) revert UnexpectedEmptyReturn();\\n\\n        if (!isSolvent(_depositor)) revert NotSolvent();\\n\\n        emit Withdraw(_asset, _depositor, _receiver, withdrawnAmount, _collateralOnly);\\n    }\\n\\n    /// @dev Main borrow function that handles all borrow logic and validation\\n    /// @param _asset asset address that is being borrowed\\n    /// @param _borrower wallet address that will own debt\\n    /// @param _receiver wallet address that will receive borrowed tokens. It's possible that Router\\n    /// contract is executing borrowing for user and should be the one receiving tokens, however,\\n    /// the owner of the debt should be user himself.\\n    /// @param _amount amount of asset to borrow\\n    /// @return debtAmount borrowed amount\\n    /// @return debtShare user debt share based on borrowed amount\\n    function _borrow(address _asset, address _borrower, address _receiver, uint256 _amount)\\n        internal\\n        nonReentrant\\n        returns (uint256 debtAmount, uint256 debtShare)\\n    {\\n        // MUST BE CALLED AS FIRST METHOD!\\n        _accrueInterest(_asset);\\n\\n        if (!borrowPossible(_asset, _borrower)) revert BorrowNotPossible();\\n\\n        if (liquidity(_asset) < _amount) revert NotEnoughLiquidity();\\n\\n        AssetStorage storage _state = _assetStorage[_asset];\\n\\n        uint256 totalBorrowAmount = _state.totalBorrowAmount;\\n        uint256 entryFee = siloRepository.entryFee();\\n        uint256 fee = entryFee == 0 ? 0 : _amount * entryFee / Solvency._PRECISION_DECIMALS;\\n        debtShare = (_amount + fee).toShareRoundUp(totalBorrowAmount, _state.debtToken.totalSupply());\\n        debtAmount = _amount;\\n\\n        _state.totalBorrowAmount = totalBorrowAmount + _amount + fee;\\n        _interestData[_asset].protocolFees += fee;\\n\\n        _state.debtToken.mint(_borrower, debtShare);\\n\\n        emit Borrow(_asset, _borrower, _amount);\\n        ERC20(_asset).safeTransfer(_receiver, _amount);\\n\\n        // IMPORTANT - keep `validateBorrowAfter` at the end\\n        _validateBorrowAfter(_borrower);\\n    }\\n\\n    /// @dev Main repay function that handles all repay logic and validation\\n    /// @param _asset asset address that is being repaid\\n    /// @param _borrower wallet address for which debt is being repaid\\n    /// @param _repayer wallet address that will pay the debt. It's possible that Router\\n    /// contract is executing repay for user and should be the one paying the debt.\\n    /// @param _amount amount of asset to repay\\n    /// @return repaidAmount amount repaid\\n    /// @return repaidShare burned debt share\\n    function _repay(address _asset, address _borrower, address _repayer, uint256 _amount)\\n        internal\\n        onlyExistingAsset(_asset)\\n        nonReentrant\\n        returns (uint256 repaidAmount, uint256 repaidShare)\\n    {\\n        // MUST BE CALLED AS FIRST METHOD!\\n        _accrueInterest(_asset);\\n\\n        AssetStorage storage _state = _assetStorage[_asset];\\n        (repaidAmount, repaidShare) = _calculateDebtAmountAndShare(_state, _borrower, _amount);\\n\\n        if (repaidShare == 0) revert UnexpectedEmptyReturn();\\n\\n        emit Repay(_asset, _borrower, repaidAmount);\\n\\n        ERC20(_asset).safeTransferFrom(_repayer, address(this), repaidAmount);\\n\\n        // change debt state before, because share token state is changes the same way (notification is after burn)\\n        _state.totalBorrowAmount -= repaidAmount;\\n        _state.debtToken.burn(_borrower, repaidShare);\\n    }\\n\\n    /// @param _assets all current assets, this is an optimization, so we don't have to read it from storage few times\\n    /// @param _user user to liquidate\\n    /// @param _flashReceiver address which will get all collaterals and will be notified once collaterals will be send\\n    /// @param _flashReceiverData custom data to forward to receiver\\n    /// @return receivedCollaterals amounts of collaterals transferred to `_flashReceiver`\\n    /// @return shareAmountsToRepay expected amounts to repay\\n    function _userLiquidation(\\n        address[] memory _assets,\\n        address _user,\\n        IFlashLiquidationReceiver _flashReceiver,\\n        bytes memory _flashReceiverData\\n    )\\n        internal\\n        // we can not use `nonReentrant` because we are using it in `_repay`,\\n        // and `_repay` needs to be reentered as part of a liquidation\\n        liquidationNonReentrant\\n        returns (uint256[] memory receivedCollaterals, uint256[] memory shareAmountsToRepay)\\n    {\\n        // gracefully fail if _user is solvent\\n        if (isSolvent(_user)) {\\n            uint256[] memory empty = new uint256[](_assets.length);\\n            return (empty, empty);\\n        }\\n\\n        (receivedCollaterals, shareAmountsToRepay) = _flashUserLiquidation(_assets, _user, address(_flashReceiver));\\n\\n        // _flashReceiver needs to repayFor user\\n        _flashReceiver.siloLiquidationCallback(\\n            _user,\\n            _assets,\\n            receivedCollaterals,\\n            shareAmountsToRepay,\\n            _flashReceiverData\\n        );\\n\\n        for (uint256 i = 0; i < _assets.length; i++) {\\n            if (receivedCollaterals[i] != 0 || shareAmountsToRepay[i] != 0) {\\n                emit Liquidate(_assets[i], _user, shareAmountsToRepay[i], receivedCollaterals[i]);\\n            }\\n        }\\n\\n        if (!isSolvent(_user)) revert NotSolvent();\\n    }\\n\\n    function _flashUserLiquidation(address[] memory _assets, address _borrower, address _liquidator)\\n        internal\\n        returns (uint256[] memory receivedCollaterals, uint256[] memory amountsToRepay)\\n    {\\n        uint256 assetsLength = _assets.length;\\n        receivedCollaterals = new uint256[](assetsLength);\\n        amountsToRepay = new uint256[](assetsLength);\\n\\n        uint256 protocolLiquidationFee = siloRepository.protocolLiquidationFee();\\n\\n        for (uint256 i = 0; i < assetsLength; i++) {\\n            _accrueInterest(_assets[i]);\\n\\n            AssetStorage storage _state = _assetStorage[_assets[i]];\\n\\n            // we do not allow for partial repayment on liquidation, that's why max\\n            (amountsToRepay[i],) = _calculateDebtAmountAndShare(_state, _borrower, type(uint256).max);\\n\\n            (uint256 withdrawnOnlyAmount,) = _withdrawAsset(\\n                _assets[i],\\n                type(uint256).max,\\n                _borrower,\\n                _liquidator,\\n                true, // collateral only\\n                protocolLiquidationFee\\n            );\\n\\n            (uint256 withdrawnAmount,) = _withdrawAsset(\\n                _assets[i],\\n                type(uint256).max,\\n                _borrower,\\n                _liquidator,\\n                false, // collateral only\\n                protocolLiquidationFee\\n            );\\n\\n            receivedCollaterals[i] = withdrawnOnlyAmount + withdrawnAmount;\\n        }\\n    }\\n\\n    /// @dev Utility function for withdrawing an asset\\n    /// @param _asset asset to withdraw\\n    /// @param _assetAmount amount of asset to withdraw\\n    /// @param _depositor wallet address that is an owner of the deposit\\n    /// @param _receiver wallet address that is receiving the token\\n    /// @param _collateralOnly true if withdraw collateral only.\\n    /// @param _protocolLiquidationFee if provided (!=0) liquidation fees will be applied and returned\\n    /// `withdrawnAmount` will be decreased\\n    /// @return withdrawnAmount amount of asset that has been sent to receiver\\n    /// @return burnedShare burned share based on `withdrawnAmount`\\n    function _withdrawAsset(\\n        address _asset,\\n        uint256 _assetAmount,\\n        address _depositor,\\n        address _receiver,\\n        bool _collateralOnly,\\n        uint256 _protocolLiquidationFee\\n    )\\n        internal\\n        returns (uint256 withdrawnAmount, uint256 burnedShare)\\n    {\\n        (uint256 assetTotalDeposits, IShareToken shareToken, uint256 availableLiquidity) =\\n            _getWithdrawAssetData(_asset, _collateralOnly);\\n\\n        if (_assetAmount == type(uint256).max) {\\n            burnedShare = shareToken.balanceOf(_depositor);\\n            withdrawnAmount = burnedShare.toAmount(assetTotalDeposits, shareToken.totalSupply());\\n        } else {\\n            burnedShare = _assetAmount.toShareRoundUp(assetTotalDeposits, shareToken.totalSupply());\\n            withdrawnAmount = _assetAmount;\\n        }\\n\\n        if (withdrawnAmount == 0) {\\n            // we can not revert here, because liquidation will fail when one of collaterals will be empty\\n            return (0, 0);\\n        }\\n\\n        if (assetTotalDeposits < withdrawnAmount) revert NotEnoughDeposits();\\n\\n        unchecked {\\n            // can be unchecked because of the `if` above\\n            assetTotalDeposits -=  withdrawnAmount;\\n        }\\n\\n        uint256 amountToTransfer = _applyLiquidationFee(_asset, withdrawnAmount, _protocolLiquidationFee);\\n\\n        if (availableLiquidity < amountToTransfer) revert NotEnoughLiquidity();\\n\\n        AssetStorage storage _state = _assetStorage[_asset];\\n\\n        if (_collateralOnly) {\\n            _state.collateralOnlyDeposits = assetTotalDeposits;\\n        } else {\\n            _state.totalDeposits = assetTotalDeposits;\\n        }\\n\\n        shareToken.burn(_depositor, burnedShare);\\n        // in case token sent in fee-on-transfer type of token we do not care when withdrawing\\n        ERC20(_asset).safeTransfer(_receiver, amountToTransfer);\\n    }\\n\\n    /// @notice Calculates liquidations fee and returns amount of asset transferred to liquidator\\n    /// @param _asset asset address\\n    /// @param _amount amount on which we will apply fee\\n    /// @param _protocolLiquidationFee liquidation fee in Solvency._PRECISION_DECIMALS\\n    /// @return change amount left after subtracting liquidation fee\\n    function _applyLiquidationFee(address _asset, uint256 _amount, uint256 _protocolLiquidationFee)\\n        internal\\n        returns (uint256 change)\\n    {\\n        if (_protocolLiquidationFee == 0) {\\n            return _amount;\\n        }\\n\\n        uint256 liquidationFeeAmount;\\n\\n        (\\n            liquidationFeeAmount,\\n            _interestData[_asset].protocolFees\\n        ) = Solvency.calculateLiquidationFee(_interestData[_asset].protocolFees, _amount, _protocolLiquidationFee);\\n\\n        unchecked {\\n            // if fees will not be higher than 100% this will not underflow, this is responsibility of siloRepository\\n            // in case we do underflow, we can expect liquidator reject tx because of too little change\\n            change = _amount - liquidationFeeAmount;\\n        }\\n    }\\n\\n    /// @dev harvest protocol fees from particular asset\\n    /// @param _asset asset we want to harvest fees from\\n    /// @param _receiver address of fees receiver\\n    /// @return harvestedFees harvested fee\\n    function _harvestProtocolFees(address _asset, address _receiver)\\n        internal\\n        nonReentrant\\n        returns (uint256 harvestedFees)\\n    {\\n        AssetInterestData storage data = _interestData[_asset];\\n\\n        harvestedFees = data.protocolFees - data.harvestedProtocolFees;\\n\\n        uint256 currentLiquidity = liquidity(_asset);\\n\\n        if (harvestedFees > currentLiquidity) {\\n            harvestedFees = currentLiquidity;\\n        }\\n\\n        if (harvestedFees == 0) {\\n            return 0;\\n        }\\n\\n        unchecked {\\n            // This can't overflow because this addition is less than or equal to data.protocolFees\\n            data.harvestedProtocolFees += harvestedFees;\\n        }\\n\\n        ERC20(_asset).safeTransfer(_receiver, harvestedFees);\\n    }\\n\\n    /// @notice Accrue interest for asset\\n    /// @dev Silo Interest Rate Model implements dynamic interest rate that changes every second. Returned\\n    /// interest rate by the model is compounded rate so it can be used in math calculations as if it was\\n    /// static. Rate is calculated for the time range between last update and current timestamp.\\n    /// @param _asset address of the asset for which interest should be accrued\\n    /// @return accruedInterest total accrued interest\\n    function _accrueInterest(address _asset) internal returns (uint256 accruedInterest) {\\n        /// @dev `_accrueInterest` is called on every user action, including liquidation. It's enough to check\\n        /// if Silo is paused in this function.\\n        if (IGuardedLaunch(address(siloRepository)).isSiloPaused(address(this), _asset)) {\\n            revert Paused();\\n        }\\n\\n        AssetStorage storage _state = _assetStorage[_asset];\\n        AssetInterestData storage _assetInterestData = _interestData[_asset];\\n        uint256 lastTimestamp = _assetInterestData.interestRateTimestamp;\\n\\n        // This is the first time, so we can return early and save some gas\\n        if (lastTimestamp == 0) {\\n            _assetInterestData.interestRateTimestamp = uint64(block.timestamp);\\n            return 0;\\n        }\\n\\n        // Interest has already been accrued this block\\n        if (lastTimestamp == block.timestamp) {\\n            return 0;\\n        }\\n\\n        uint256 rcomp = _getModel(_asset).getCompoundInterestRateAndUpdate(_asset, block.timestamp);\\n        uint256 protocolShareFee = siloRepository.protocolShareFee();\\n\\n        uint256 totalBorrowAmountCached = _state.totalBorrowAmount;\\n        uint256 protocolFeesCached = _assetInterestData.protocolFees;\\n        uint256 newProtocolFees;\\n        uint256 protocolShare;\\n        uint256 depositorsShare;\\n\\n        accruedInterest = totalBorrowAmountCached * rcomp / Solvency._PRECISION_DECIMALS;\\n\\n        unchecked {\\n            // If we overflow on multiplication it should not revert tx, we will get lower fees\\n            protocolShare = accruedInterest * protocolShareFee / Solvency._PRECISION_DECIMALS;\\n            newProtocolFees = protocolFeesCached + protocolShare;\\n\\n            if (newProtocolFees < protocolFeesCached) {\\n                protocolShare = type(uint256).max - protocolFeesCached;\\n                newProtocolFees = type(uint256).max;\\n            }\\n    \\n            depositorsShare = accruedInterest - protocolShare;\\n        }\\n\\n        // update contract state\\n        _state.totalBorrowAmount = totalBorrowAmountCached + accruedInterest;\\n        _state.totalDeposits = _state.totalDeposits + depositorsShare;\\n        _assetInterestData.protocolFees = newProtocolFees;\\n        _assetInterestData.interestRateTimestamp = uint64(block.timestamp);\\n    }\\n\\n    /// @dev gets interest rates model object\\n    /// @param _asset asset for which to calculate interest rate\\n    /// @return IInterestRateModel interest rates model object\\n    function _getModel(address _asset) internal view returns (IInterestRateModel) {\\n        return IInterestRateModel(siloRepository.getInterestRateModel(address(this), _asset));\\n    }\\n\\n    /// @dev calculates amount to repay based on user shares, we do not apply virtual balances here,\\n    /// if needed, they need to be apply beforehand\\n    /// @param _state asset storage struct\\n    /// @param _borrower borrower address\\n    /// @param _amount proposed amount of asset to repay. Based on that,`repayShare` is calculated.\\n    /// @return amount amount of asset to repay\\n    /// @return repayShare amount of debt token representing debt ownership\\n    function _calculateDebtAmountAndShare(AssetStorage storage _state, address _borrower, uint256 _amount)\\n        internal\\n        view\\n        returns (uint256 amount, uint256 repayShare)\\n    {\\n        uint256 borrowerDebtShare = _state.debtToken.balanceOf(_borrower);\\n        uint256 debtTokenTotalSupply = _state.debtToken.totalSupply();\\n        uint256 totalBorrowed = _state.totalBorrowAmount;\\n        uint256 maxAmount = borrowerDebtShare.toAmountRoundUp(totalBorrowed, debtTokenTotalSupply);\\n\\n        if (_amount >= maxAmount) {\\n            amount = maxAmount;\\n            repayShare = borrowerDebtShare;\\n        } else {\\n            amount = _amount;\\n            repayShare = _amount.toShare(totalBorrowed, debtTokenTotalSupply);\\n        }\\n    }\\n\\n    /// @dev verifies if user did not borrow more than allowed maximum\\n    function _validateBorrowAfter(address _user) private view {\\n        (address[] memory assets, AssetStorage[] memory assetsStates) = getAssetsWithState();\\n\\n        (uint256 userLTV, uint256 maximumAllowedLTV) = Solvency.calculateLTVs(\\n            Solvency.SolvencyParams(\\n                siloRepository,\\n                ISilo(address(this)),\\n                assets,\\n                assetsStates,\\n                _user\\n            ),\\n            Solvency.TypeofLTV.MaximumLTV\\n        );\\n\\n        if (userLTV > maximumAllowedLTV) revert MaximumLTVReached();\\n    }\\n\\n    function _getWithdrawAssetData(address _asset, bool _collateralOnly)\\n        private\\n        view\\n        returns(uint256 assetTotalDeposits, IShareToken shareToken, uint256 availableLiquidity)\\n    {\\n        AssetStorage storage _state = _assetStorage[_asset];\\n\\n        if (_collateralOnly) {\\n            assetTotalDeposits = _state.collateralOnlyDeposits;\\n            shareToken = _state.collateralOnlyToken;\\n            availableLiquidity = assetTotalDeposits;\\n        } else {\\n            assetTotalDeposits = _state.totalDeposits;\\n            shareToken = _state.collateralToken;\\n            availableLiquidity = liquidity(_asset);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa6769cf4be9465cdef9e29610e0ad0797e21b683b523c48af87dd7ed89f2ef89\",\"license\":\"BUSL-1.1\"},\"contracts/Silo.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.13;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\nimport \\\"./interfaces/ISilo.sol\\\";\\n\\nimport \\\"./lib/EasyMath.sol\\\";\\nimport \\\"./BaseSilo.sol\\\";\\n\\n/// @title Silo\\n/// @notice Silo is the main component of the protocol. It implements lending logic, manages and isolates\\n/// risk, acts as a vault for assets, and performs liquidations. Each Silo is composed of the unique asset\\n/// for which it was created (ie. UNI) and bridge assets (ie. ETH and SiloDollar). There may be multiple\\n/// bridge assets at any given time.\\n/// @dev Main Silo contact that inherits from Base contract. It implements all user/UI facing methods.\\n/// @custom:security-contact security@silo.finance\\ncontract Silo is ISilo, BaseSilo {\\n    using SafeERC20 for ERC20;\\n    using EasyMath for uint256;\\n\\n    constructor (ISiloRepository _repository, address _siloAsset, uint128 _version)\\n        BaseSilo(_repository, _siloAsset, _version)\\n    {\\n        // initial setup is done in BaseSilo, nothing to do here\\n    }\\n\\n    /// @inheritdoc ISilo\\n    function deposit(address _asset, uint256 _amount, bool _collateralOnly)\\n        external\\n        override\\n        returns (uint256 collateralAmount, uint256 collateralShare)\\n    {\\n        return _deposit(_asset, msg.sender, msg.sender, _amount, _collateralOnly);\\n    }\\n\\n    /// @inheritdoc ISilo\\n    function depositFor(\\n        address _asset,\\n        address _depositor,\\n        uint256 _amount,\\n        bool _collateralOnly\\n    )\\n        external\\n        override\\n        returns (uint256 collateralAmount, uint256 collateralShare)\\n    {\\n        return _deposit(_asset, msg.sender, _depositor, _amount, _collateralOnly);\\n    }\\n\\n    /// @inheritdoc ISilo\\n    function withdraw(address _asset, uint256 _amount, bool _collateralOnly)\\n        external\\n        override\\n        returns (uint256 withdrawnAmount, uint256 withdrawnShare)\\n    {\\n        return _withdraw(_asset, msg.sender, msg.sender, _amount, _collateralOnly);\\n    }\\n\\n    /// @inheritdoc ISilo\\n    function withdrawFor(address _asset, address _depositor, address _receiver, uint256 _amount, bool _collateralOnly)\\n        external\\n        override\\n        onlyRouter\\n        returns (uint256 withdrawnAmount, uint256 withdrawnShare)\\n    {\\n        return _withdraw(_asset, _depositor, _receiver, _amount, _collateralOnly);\\n    }\\n\\n    /// @inheritdoc ISilo\\n    function borrow(address _asset, uint256 _amount) external override returns (uint256 debtAmount, uint256 debtShare) {\\n        return _borrow(_asset, msg.sender, msg.sender, _amount);\\n    }\\n\\n    /// @inheritdoc ISilo\\n    function borrowFor(address _asset, address _borrower, address _receiver, uint256 _amount)\\n        external\\n        override\\n        onlyRouter\\n        returns (uint256 debtAmount, uint256 debtShare)\\n    {\\n        return _borrow(_asset, _borrower, _receiver, _amount);\\n    }\\n\\n    /// @inheritdoc ISilo\\n    function repay(address _asset, uint256 _amount)\\n        external\\n        override\\n        returns (uint256 repaidAmount, uint256 repaidShare)\\n    {\\n        return _repay(_asset, msg.sender, msg.sender, _amount);\\n    }\\n\\n    /// @inheritdoc ISilo\\n    function repayFor(address _asset, address _borrower, uint256 _amount)\\n        external\\n        override\\n        returns (uint256 repaidAmount, uint256 repaidShare)\\n    {\\n        return _repay(_asset, _borrower, msg.sender, _amount);\\n    }\\n\\n    /// @inheritdoc ISilo\\n    function flashLiquidate(address[] memory _users, bytes memory _flashReceiverData)\\n        external\\n        override\\n        returns (\\n            address[] memory assets,\\n            uint256[][] memory receivedCollaterals,\\n            uint256[][] memory shareAmountsToRepay\\n        )\\n    {\\n        assets = getAssets();\\n        uint256 usersLength = _users.length;\\n        receivedCollaterals = new uint256[][](usersLength);\\n        shareAmountsToRepay = new uint256[][](usersLength);\\n\\n        for (uint256 i = 0; i < usersLength; i++) {\\n            (\\n                receivedCollaterals[i],\\n                shareAmountsToRepay[i]\\n            ) = _userLiquidation(assets, _users[i], IFlashLiquidationReceiver(msg.sender), _flashReceiverData);\\n        }\\n    }\\n\\n    /// @inheritdoc ISilo\\n    function harvestProtocolFees() external override returns (uint256[] memory harvestedAmounts) {\\n        address[] memory assets = getAssets();\\n        harvestedAmounts = new uint256[](assets.length);\\n\\n        address repositoryOwner = siloRepository.owner();\\n\\n        for (uint256 i; i < assets.length;) {\\n            unchecked {\\n                // it will not overflow because fee is much lower than any other amounts\\n                harvestedAmounts[i] = _harvestProtocolFees(assets[i], repositoryOwner);\\n                // we run out of gas before we overflow i\\n                i++;\\n            }\\n        }\\n    }\\n\\n    /// @inheritdoc ISilo\\n    function accrueInterest(address _asset) public override returns (uint256 interest) {\\n        return _accrueInterest(_asset);\\n    }\\n}\\n\",\"keccak256\":\"0x58817bad061219af0f9fe295f143e86bbe59c4a3c015973f17903d1c25c0d9c1\",\"license\":\"BUSL-1.1\"},\"contracts/SiloRepository.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.13;\\n\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"./SiloRouter.sol\\\";\\nimport \\\"./interfaces/ISiloFactory.sol\\\";\\nimport \\\"./interfaces/ISiloRepository.sol\\\";\\nimport \\\"./interfaces/IPriceProvidersRepository.sol\\\";\\nimport \\\"./interfaces/INotificationReceiver.sol\\\";\\n\\nimport \\\"./utils/GuardedLaunch.sol\\\";\\nimport \\\"./Silo.sol\\\";\\nimport \\\"./interfaces/ITokensFactory.sol\\\";\\nimport \\\"./lib/Ping.sol\\\";\\n\\n/// @title SiloRepository\\n/// @notice SiloRepository handles the creation and configuration of Silos.\\n/// @dev Stores configuration for each asset in each silo.\\n/// Each asset in each Silo starts with a default config that later on can be changed by the contract owner.\\n/// Stores registry of Factory contracts that deploy different versions of Silos\\n/// It is possible to have multiple versions/implementations of Silo and use different versions for different\\n/// tokens. For example, one version can be used for UNI (ERC20) and the other can be used for UniV3LP tokens (ERC721).\\n/// Manages bridge assets. Each Silo can have 1 or more bridge assets. New Silos are created with all currently active\\n/// bridge assets. Silos that are already developed must synchronize bridge assets. Sync can be done by anyone,\\n/// function has public access.\\n/// Is a single source of truth for other contract addresses.\\n/// @custom:security-contact security@silo.finance\\n/* solhint-disable max-states-count */\\ncontract SiloRepository is ISiloRepository, GuardedLaunch {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    /// @dev Default values for AssetConfig. Used if values are not configured manually.\\n    AssetConfig public defaultAssetConfig;\\n\\n    /// @dev Protocol fee configuration\\n    Fees public fees;\\n\\n    /// @dev Factory contracts that deploys debt and collateral tokens for each asset in Silo\\n    ITokensFactory public override tokensFactory;\\n\\n    /// @dev PriceProvidersRepository contract that manages PriceProviders implementations and is an entry point\\n    /// for reading prices for Silos.\\n    IPriceProvidersRepository public override priceProvidersRepository;\\n\\n    /// @dev SiloRouter utility contract that combines number of actions (Deposit, Withdraw, Borrow, Repay)\\n    /// for batch execution in single transaction.\\n    address public override router;\\n\\n    /// @dev Silo for bridge asset. We can have only one bridge pool\\n    address public bridgePool;\\n\\n    /// @dev Silo version data\\n    SiloVersion public siloVersion;\\n\\n    /// @dev Maps asset => silo version\\n    mapping(address => uint128) public override getVersionForAsset;\\n\\n    /// @dev Maps Silo address to incentive contract that will distribute rewards for that Silo\\n    mapping(address => INotificationReceiver) public override getNotificationReceiver;\\n\\n    /// @dev Maps version => ISiloFactory. Versions start at 1 and are incremented by 1.\\n    mapping(uint256 => ISiloFactory) public override siloFactory;\\n\\n    /// @dev maps token address to silo address, asset => silo\\n    mapping(address => address) public override getSilo;\\n\\n    /// @dev maps silo address to token address, silo => asset\\n    mapping(address => address) public siloReverse;\\n\\n    /// @dev maps silo => asset => config\\n    mapping(address => mapping(address => AssetConfig)) public assetConfigs;\\n\\n    /// @dev Value used to initialize the Silo's version data\\n    uint128 private constant _INITIAL_SILO_VERSION = 1;\\n\\n    /// @dev representation of 100%\\n    uint256 private constant _ONE_HUNDRED_PERCENT = 1e18;\\n\\n    /// @dev List of bridge assets supported by the protocol\\n    EnumerableSet.AddressSet private _bridgeAssets;\\n\\n    /// @dev List of bridge assets removed by the protocol\\n    EnumerableSet.AddressSet private _removedBridgeAssets;\\n\\n    error AssetAlreadyAdded();\\n    error AssetIsNotABridge();\\n    error AssetIsZero();\\n    error BridgeAssetIsZero();\\n    error ConfigDidNotChange();\\n    error EmptyBridgeAssets();\\n    error FeesDidNotChange();\\n    error InterestRateModelDidNotChange();\\n    error InvalidEntryFee();\\n    error InvalidInterestRateModel();\\n    error InvalidLiquidationThreshold();\\n    error InvalidLTV();\\n    error InvalidNotificationReceiver();\\n    error InvalidPriceProvidersRepository();\\n    error InvalidProtocolLiquidationFee();\\n    error InvalidProtocolShareFee();\\n    error InvalidSiloFactory();\\n    error InvalidSiloRouter();\\n    error InvalidSiloVersion();\\n    error InvalidTokensFactory();\\n    error LastBridgeAsset();\\n    error LiquidationThresholdDidNotChange();\\n    error MaximumLTVDidNotChange();\\n    error VersionForAssetDidNotChange();\\n    error NoPriceProviderForAsset();\\n    error NotificationReceiverDidNotChange();\\n    error PriceProviderRepositoryDidNotChange();\\n    error RouterDidNotChange();\\n    error SiloAlreadyExistsForAsset();\\n    error SiloAlreadyExistsForBridgeAssets();\\n    error SiloDoesNotExist();\\n    error SiloIsZero();\\n    error SiloNotAllowedForBridgeAsset();\\n    error SiloVersionDoesNotExist();\\n\\n    modifier ensureValidLiquidationThreshold(uint256 _ltv, uint256 _liquidationThreshold) {\\n        if (_liquidationThreshold >= _ONE_HUNDRED_PERCENT) {\\n            revert InvalidLiquidationThreshold();\\n        }\\n\\n        if (_ltv == 0 || _ltv >= _liquidationThreshold) {\\n            revert InvalidLTV();\\n        }\\n\\n        _;\\n    }\\n\\n    /// @param _siloFactory address of SiloFactory contract that deploys Silos\\n    /// @param _tokensFactory address of TokensFactory contract that deploys debt and collateral tokens\\n    /// for each Silo asset\\n    /// @param _defaultMaxLTV maximum Loan-to-Value for default configuration\\n    /// @param _defaultLiquidationThreshold liquidation threshold for default configuration\\n    /// @param _initialBridgeAssets bridge assets to start with\\n    constructor(\\n        address _siloFactory,\\n        address _tokensFactory,\\n        uint64 _defaultMaxLTV,\\n        uint64 _defaultLiquidationThreshold,\\n        address[] memory _initialBridgeAssets\\n    )\\n        ensureValidLiquidationThreshold(_defaultMaxLTV, _defaultLiquidationThreshold) GuardedLaunch()\\n    {\\n        if (!Ping.pong(ISiloFactory(_siloFactory).siloFactoryPing)) {\\n            revert InvalidSiloFactory();\\n        }\\n\\n        if (!Ping.pong(ITokensFactory(_tokensFactory).tokensFactoryPing)) {\\n            revert InvalidTokensFactory();\\n        }\\n\\n        if (_initialBridgeAssets.length == 0) revert EmptyBridgeAssets();\\n\\n        ISiloFactory(_siloFactory).initRepository(address(this));\\n        ITokensFactory(_tokensFactory).initRepository(address(this));\\n\\n        for (uint256 i = 0; i < _initialBridgeAssets.length; i++) {\\n            TokenHelper.assertAndGetDecimals(_initialBridgeAssets[i]);\\n            _bridgeAssets.add(_initialBridgeAssets[i]);\\n            emit BridgeAssetAdded(_initialBridgeAssets[i]);\\n        }\\n\\n        siloVersion.byDefault = _INITIAL_SILO_VERSION;\\n        siloVersion.latest = _INITIAL_SILO_VERSION;\\n        siloFactory[_INITIAL_SILO_VERSION] = ISiloFactory(_siloFactory);\\n        emit RegisterSiloVersion(_siloFactory, _INITIAL_SILO_VERSION, _INITIAL_SILO_VERSION);\\n        emit SiloDefaultVersion(_INITIAL_SILO_VERSION);\\n\\n        tokensFactory = ITokensFactory(_tokensFactory);\\n        emit TokensFactoryUpdate(_tokensFactory);\\n\\n        defaultAssetConfig.maxLoanToValue = _defaultMaxLTV;\\n        defaultAssetConfig.liquidationThreshold = _defaultLiquidationThreshold;\\n    }\\n\\n    /// @inheritdoc ISiloRepository\\n    function setVersionForAsset(address _siloAsset, uint128 _version) external override onlyOwner {\\n        if (getVersionForAsset[_siloAsset] == _version) revert VersionForAssetDidNotChange();\\n\\n        if (_version != 0 && address(siloFactory[_version]) == address(0)) {\\n            revert InvalidSiloVersion();\\n        }\\n\\n        emit VersionForAsset(_siloAsset, _version);\\n        getVersionForAsset[_siloAsset] = _version;\\n    }\\n\\n    /// @inheritdoc ISiloRepository\\n    function setTokensFactory(address _tokensFactory) external override onlyOwner {\\n        if (!Ping.pong(ITokensFactory(_tokensFactory).tokensFactoryPing)) {\\n            revert InvalidTokensFactory();\\n        }\\n\\n        emit TokensFactoryUpdate(_tokensFactory);\\n        tokensFactory = ITokensFactory(_tokensFactory);\\n    }\\n\\n    /// @inheritdoc ISiloRepository\\n    function setFees(Fees calldata _fees) external override onlyOwner {\\n        if (_fees.entryFee >= Solvency._PRECISION_DECIMALS) {\\n            revert InvalidEntryFee();\\n        }\\n\\n        if (_fees.protocolShareFee >= Solvency._PRECISION_DECIMALS) {\\n            revert InvalidProtocolShareFee();\\n        }\\n\\n        if (_fees.protocolLiquidationFee >= Solvency._PRECISION_DECIMALS) {\\n            revert InvalidProtocolLiquidationFee();\\n        }\\n\\n        Fees memory currentFees = fees;\\n\\n        if (\\n            _fees.entryFee == currentFees.entryFee &&\\n            _fees.protocolShareFee == currentFees.protocolShareFee &&\\n            _fees.protocolLiquidationFee == currentFees.protocolLiquidationFee\\n        ) {\\n            revert FeesDidNotChange();\\n        }\\n\\n        emit FeeUpdate(_fees.entryFee, _fees.protocolShareFee, _fees.protocolLiquidationFee);\\n        fees = _fees;\\n    }\\n\\n    /// @inheritdoc ISiloRepository\\n    function setAssetConfig(address _silo, address _asset, AssetConfig calldata _assetConfig)\\n        external\\n        override\\n        ensureValidLiquidationThreshold(_assetConfig.maxLoanToValue, _assetConfig.liquidationThreshold)\\n        onlyOwner\\n    {\\n        if (_silo == address(0)) revert SiloIsZero();\\n\\n        if (_asset == address(0)) revert AssetIsZero();\\n\\n        if (\\n            !Ping.pong(_assetConfig.interestRateModel.interestRateModelPing) ||\\n            _assetConfig.interestRateModel.DP() == 0\\n        ) {\\n            revert InvalidInterestRateModel();\\n        }\\n\\n        AssetConfig memory currentConfig = assetConfigs[_silo][_asset];\\n\\n        if (\\n            currentConfig.maxLoanToValue == _assetConfig.maxLoanToValue &&\\n            currentConfig.liquidationThreshold == _assetConfig.liquidationThreshold &&\\n            currentConfig.interestRateModel == _assetConfig.interestRateModel\\n        ) {\\n            revert ConfigDidNotChange();\\n        }\\n\\n        emit AssetConfigUpdate(_silo, _asset, _assetConfig);\\n        assetConfigs[_silo][_asset] = _assetConfig;\\n    }\\n\\n    /// @inheritdoc ISiloRepository\\n    function setDefaultInterestRateModel(IInterestRateModel _defaultInterestRateModel) external override onlyOwner {\\n        if (!Ping.pong(_defaultInterestRateModel.interestRateModelPing)) {\\n            revert InvalidInterestRateModel();\\n        }\\n\\n        if (defaultAssetConfig.interestRateModel == _defaultInterestRateModel) {\\n            revert InterestRateModelDidNotChange();\\n        }\\n\\n        emit InterestRateModel(_defaultInterestRateModel);\\n        defaultAssetConfig.interestRateModel = _defaultInterestRateModel;\\n    }\\n\\n    /// @inheritdoc ISiloRepository\\n    function setDefaultMaximumLTV(uint64 _defaultMaxLTV)\\n        external\\n        override\\n        ensureValidLiquidationThreshold(_defaultMaxLTV, defaultAssetConfig.liquidationThreshold)\\n        onlyOwner\\n    {\\n        if (defaultAssetConfig.maxLoanToValue == _defaultMaxLTV) {\\n            revert MaximumLTVDidNotChange();\\n        }\\n\\n        defaultAssetConfig.maxLoanToValue = _defaultMaxLTV;\\n        emit NewDefaultMaximumLTV(_defaultMaxLTV);\\n    }\\n\\n    /// @inheritdoc ISiloRepository\\n    function setDefaultLiquidationThreshold(uint64 _defaultLiquidationThreshold)\\n        external\\n        override\\n        ensureValidLiquidationThreshold(defaultAssetConfig.maxLoanToValue, _defaultLiquidationThreshold)\\n        onlyOwner\\n    {\\n        if (defaultAssetConfig.liquidationThreshold == _defaultLiquidationThreshold) {\\n            revert LiquidationThresholdDidNotChange();\\n        }\\n\\n        defaultAssetConfig.liquidationThreshold = _defaultLiquidationThreshold;\\n        emit NewDefaultLiquidationThreshold(_defaultLiquidationThreshold);\\n    }\\n\\n    /// @inheritdoc ISiloRepository\\n    function setPriceProvidersRepository(IPriceProvidersRepository _repository) external override onlyOwner {\\n        if (!Ping.pong(_repository.priceProvidersRepositoryPing)) {\\n            revert InvalidPriceProvidersRepository();\\n        }\\n\\n        if (priceProvidersRepository == _repository) {\\n            revert PriceProviderRepositoryDidNotChange();\\n        }\\n\\n        emit PriceProvidersRepositoryUpdate(_repository);\\n        priceProvidersRepository = _repository;\\n    }\\n\\n    /// @inheritdoc ISiloRepository\\n    function setRouter(address _router) external override onlyOwner {\\n        if (!Ping.pong(SiloRouter(payable(_router)).siloRouterPing)) {\\n            revert InvalidSiloRouter();\\n        }\\n\\n        if (router == _router) revert RouterDidNotChange();\\n\\n        emit RouterUpdate(_router);\\n        router = _router;\\n    }\\n\\n    /// @inheritdoc ISiloRepository\\n    function setNotificationReceiver(\\n        address _silo,\\n        INotificationReceiver _newNotificationReceiver\\n    ) external override onlyOwner {\\n        if (!Ping.pong(_newNotificationReceiver.notificationReceiverPing)) {\\n            revert InvalidNotificationReceiver();\\n        }\\n\\n        if (getNotificationReceiver[_silo] == _newNotificationReceiver) {\\n            revert NotificationReceiverDidNotChange();\\n        }\\n\\n        emit NotificationReceiverUpdate(_newNotificationReceiver);\\n        getNotificationReceiver[_silo] = _newNotificationReceiver;\\n    }\\n\\n    /// @inheritdoc ISiloRepository\\n    function addBridgeAsset(address _newBridgeAsset) external override onlyOwner {\\n        if (!priceProvidersRepository.providersReadyForAsset(_newBridgeAsset)) {\\n            revert NoPriceProviderForAsset();\\n        }\\n\\n        TokenHelper.assertAndGetDecimals(_newBridgeAsset);\\n\\n        // We need to add first, so it can be synchronized after\\n        if (!_bridgeAssets.add(_newBridgeAsset)) revert AssetAlreadyAdded();\\n        // We don't care about the return value, because we are doing this even if the asset isn't in the list\\n        _removedBridgeAssets.remove(_newBridgeAsset);\\n\\n        emit BridgeAssetAdded(_newBridgeAsset);\\n\\n        address silo = getSilo[_newBridgeAsset];\\n        address bridge = bridgePool;\\n\\n        // Check if we already have silo for the new bridge asset.\\n        // Note that if there are at least two bridge assets in the system, it is possible to prevent the addition\\n        // of a specific new bridge asset by creating a Silo for it.\\n        if (silo != address(0)) {\\n            // Silo for new bridge asset exists, if we already have bridge, then revert\\n            if (bridge != address(0)) revert SiloAlreadyExistsForBridgeAssets();\\n\\n            bridgePool = silo;\\n            bridge = silo;\\n            emit BridgePool(silo);\\n        }\\n\\n        // syncBridgeAssets when:\\n        // - we discovered bridge pool, we need to sync it with new bridge asset\\n        // - silo for asset does not exist, but if we already have bridge, we need to sync\\n        if (bridge != address(0)) ISilo(bridge).syncBridgeAssets();\\n    }\\n\\n    /// @inheritdoc ISiloRepository\\n    function removeBridgeAsset(address _bridgeAssetToRemove) external override onlyOwner {\\n        if (_bridgeAssetToRemove == address(0)) revert BridgeAssetIsZero();\\n\\n        if (_bridgeAssets.length() == 1) revert LastBridgeAsset();\\n\\n        if (!_bridgeAssets.remove(_bridgeAssetToRemove)) revert AssetIsNotABridge();\\n\\n        _removedBridgeAssets.add(_bridgeAssetToRemove);\\n        emit BridgeAssetRemoved(_bridgeAssetToRemove);\\n\\n        address silo = getSilo[_bridgeAssetToRemove];\\n\\n        // we have silo and it is for sure bridge pool\\n        if (silo != address(0)) {\\n            ISilo(silo).syncBridgeAssets();\\n            bridgePool = address(0);\\n            emit BridgePool(address(0));\\n            return;\\n        }\\n\\n        address pool = bridgePool;\\n\\n        // we have bridge pool but it is not directly for `_bridgeAssetToRemove`\\n        if (pool != address(0)) {\\n            ISilo(pool).syncBridgeAssets();\\n        }\\n    }\\n\\n    /// @inheritdoc ISiloRepository\\n    function newSilo(address _siloAsset, bytes memory _siloData) external override returns (address) {\\n        bool assetIsABridge = _bridgeAssets.contains(_siloAsset);\\n        ensureCanCreateSiloFor(_siloAsset, assetIsABridge);\\n        \\n        return _createSilo(_siloAsset, getVersionForAsset[_siloAsset], assetIsABridge, _siloData);\\n    }\\n\\n    /// @inheritdoc ISiloRepository\\n    function replaceSilo(\\n        address _siloAsset,\\n        uint128 _siloVersion,\\n        bytes memory _siloData\\n    ) external override onlyOwner returns (address) {\\n        address siloToReplace = getSilo[_siloAsset];\\n\\n        if (siloToReplace == address(0)) revert SiloDoesNotExist();\\n\\n        return _createSilo(_siloAsset, _siloVersion, _bridgeAssets.contains(_siloAsset), _siloData);\\n    }\\n\\n    /// @inheritdoc ISiloRepository\\n    function registerSiloVersion(ISiloFactory _factory, bool _isDefault) external override onlyOwner {\\n        if (!Ping.pong(_factory.siloFactoryPing)) revert InvalidSiloFactory();\\n\\n        SiloVersion memory v = siloVersion;\\n        v.latest += 1;\\n\\n        siloFactory[v.latest] = _factory;\\n\\n        emit RegisterSiloVersion(address(_factory), v.latest, v.byDefault);\\n\\n        if (_isDefault) {\\n            v.byDefault = v.latest;\\n            emit SiloDefaultVersion(v.latest);\\n        }\\n\\n        siloVersion = v;\\n    }\\n\\n    /// @inheritdoc ISiloRepository\\n    function unregisterSiloVersion(uint128 _siloVersion) external override onlyOwner {\\n        address factory = address(siloFactory[_siloVersion]);\\n        // Can't unregister nonexistent or default silo version\\n        if (factory == address(0) || _siloVersion == siloVersion.byDefault) {\\n            revert InvalidSiloVersion();\\n        }\\n\\n        emit UnregisterSiloVersion(factory, _siloVersion);\\n        siloFactory[_siloVersion] = ISiloFactory(address(0));\\n    }\\n\\n    /// @inheritdoc ISiloRepository\\n    function setDefaultSiloVersion(uint128 _defaultVersion) external override onlyOwner {\\n        if (address(siloFactory[_defaultVersion]) == address(0)) {\\n            revert SiloVersionDoesNotExist();\\n        }\\n\\n        emit SiloDefaultVersion(_defaultVersion);\\n        siloVersion.byDefault = _defaultVersion;\\n    }\\n\\n    /// @inheritdoc ISiloRepository\\n    function entryFee() external view override returns (uint256) {\\n        return fees.entryFee;\\n    }\\n\\n    /// @inheritdoc ISiloRepository\\n    function protocolShareFee() external view override returns (uint256) {\\n        return fees.protocolShareFee;\\n    }\\n\\n    /// @inheritdoc ISiloRepository\\n    function protocolLiquidationFee() external view override returns (uint256) {\\n        return fees.protocolLiquidationFee;\\n    }\\n\\n    /// @inheritdoc ISiloRepository\\n    function isSilo(address _silo) external view override returns (bool) {\\n        return siloReverse[_silo] != address(0);\\n    }\\n\\n    /// @inheritdoc ISiloRepository\\n    function getBridgeAssets() external view override returns (address[] memory) {\\n        return _bridgeAssets.values();\\n    }\\n\\n    /// @inheritdoc ISiloRepository\\n    function getRemovedBridgeAssets() external view override returns (address[] memory) {\\n        return _removedBridgeAssets.values();\\n    }\\n\\n    /// @inheritdoc ISiloRepository\\n    function getMaximumLTV(address _silo, address _asset) external view override returns (uint256) {\\n        uint256 maxLoanToValue = assetConfigs[_silo][_asset].maxLoanToValue;\\n        if (maxLoanToValue != 0) {\\n            return maxLoanToValue;\\n        }\\n        return defaultAssetConfig.maxLoanToValue;\\n    }\\n\\n    /// @inheritdoc ISiloRepository\\n    function getInterestRateModel(address _silo, address _asset)\\n        external\\n        view\\n        override\\n        returns (IInterestRateModel model)\\n    {\\n        model = assetConfigs[_silo][_asset].interestRateModel;\\n\\n        if (address(model) == address(0)) {\\n            return defaultAssetConfig.interestRateModel;\\n        }\\n    }\\n\\n    /// @inheritdoc ISiloRepository\\n    function getLiquidationThreshold(address _silo, address _asset) external view override returns (uint256) {\\n        uint256 liquidationThreshold = assetConfigs[_silo][_asset].liquidationThreshold;\\n\\n        if (liquidationThreshold != 0) {\\n            return liquidationThreshold;\\n        }\\n\\n        return defaultAssetConfig.liquidationThreshold;\\n    }\\n\\n    /// @inheritdoc ISiloRepository\\n    function siloRepositoryPing() external pure override returns (bytes4) {\\n        return this.siloRepositoryPing.selector;\\n    }\\n\\n    /// @inheritdoc ISiloRepository\\n    function ensureCanCreateSiloFor(address _asset, bool _assetIsABridge) public view override {\\n        if (getSilo[_asset] != address(0)) revert SiloAlreadyExistsForAsset();\\n\\n        if (_assetIsABridge) {\\n            if (bridgePool != address(0)) revert SiloAlreadyExistsForBridgeAssets();\\n\\n            if (_bridgeAssets.length() == 1) revert SiloNotAllowedForBridgeAsset();\\n        }\\n    }\\n\\n    /// @inheritdoc ISiloRepository\\n    function owner() public view override(ISiloRepository, GuardedLaunch) returns (address) {\\n        return GuardedLaunch.owner();\\n    }\\n\\n    /// @dev Deploys Silo\\n    /// @param _siloAsset silo asset\\n    /// @param _siloVersion version of silo implementation\\n    /// @param _assetIsABridge flag indicating if asset is a bridge asset\\n    /// @param _siloData (optional) data that may be needed during silo creation\\n    function _createSilo(\\n        address _siloAsset,\\n        uint128 _siloVersion,\\n        bool _assetIsABridge,\\n        bytes memory _siloData\\n    ) internal returns (address createdSilo) {\\n        // 0 means default version\\n        if (_siloVersion == 0) {\\n            _siloVersion = siloVersion.byDefault;\\n        }\\n\\n        ISiloFactory factory = siloFactory[_siloVersion];\\n\\n        if (address(factory) == address(0)) revert InvalidSiloVersion();\\n\\n        createdSilo = factory.createSilo(_siloAsset, _siloVersion, _siloData);\\n\\n        // We do this before the asset sync so that functions like `isSilo` can be used by factories\\n        getSilo[_siloAsset] = createdSilo;\\n        siloReverse[createdSilo] = _siloAsset;\\n\\n        Silo(createdSilo).syncBridgeAssets();\\n\\n        emit NewSilo(createdSilo, _siloAsset, _siloVersion);\\n\\n        if (_assetIsABridge) {\\n            bridgePool = createdSilo;\\n            emit BridgePool(createdSilo);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xdd3e7415425f0d7b0937c28c4b14c3f7baa1dc8e7a6df0e2047acb4dbb7068ca\",\"license\":\"BUSL-1.1\"},\"contracts/SiloRouter.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.13;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\n\\nimport \\\"./interfaces/IWrappedNativeToken.sol\\\";\\nimport \\\"./interfaces/ISilo.sol\\\";\\nimport \\\"./interfaces/ISiloRepository.sol\\\";\\n\\nimport \\\"./lib/Ping.sol\\\";\\nimport \\\"./lib/TokenHelper.sol\\\";\\nimport \\\"./lib/EasyMath.sol\\\";\\n\\n/// @title SiloRouter\\n/// @notice Silo Router is a utility contract that aims to improve UX. It can batch any number or combination\\n/// of actions (Deposit, Withdraw, Borrow, Repay) and execute them in a single transaction.\\n/// @dev SiloRouter requires only first action asset to be approved\\n/// @custom:security-contact security@silo.finance\\ncontract SiloRouter is ReentrancyGuard {\\n    using SafeERC20 for IERC20;\\n    using EasyMath for uint256;\\n\\n    // @notice Action types that are supported\\n    enum ActionType { Deposit, Withdraw, Borrow, Repay }\\n\\n    struct Action {\\n        // what do you want to do?\\n        ActionType actionType;\\n        // which Silo are you interacting with?\\n        ISilo silo;\\n        // what asset do you want to use?\\n        IERC20 asset;\\n        // how much asset do you want to use?\\n        uint256 amount;\\n        // is it an action on collateral only?\\n        bool collateralOnly;\\n    }\\n\\n    // @dev native asset wrapped token. In case of Ether, it's WETH.\\n    IWrappedNativeToken public immutable wrappedNativeToken;\\n    ISiloRepository public immutable siloRepository;\\n\\n    error ApprovalFailed();\\n    error ERC20TransferFailed();\\n    error EthTransferFailed();\\n    error InvalidSilo();\\n    error InvalidSiloRepository();\\n    error UnsupportedAction();\\n\\n    constructor (address _wrappedNativeToken, address _siloRepository) {\\n        if (!Ping.pong(ISiloRepository(_siloRepository).siloRepositoryPing)) {\\n            revert InvalidSiloRepository();\\n        }\\n\\n        TokenHelper.assertAndGetDecimals(_wrappedNativeToken);\\n\\n        wrappedNativeToken = IWrappedNativeToken(_wrappedNativeToken);\\n        siloRepository = ISiloRepository(_siloRepository);\\n    }\\n\\n    /// @dev needed for unwrapping WETH\\n    receive() external payable {\\n        // `execute` method calls `IWrappedNativeToken.withdraw()`\\n        // and we need to receive the withdrawn ETH unconditionally\\n    }\\n\\n    /// @notice Execute actions\\n    /// @dev User can bundle any combination and number of actions. It's possible to do multiple deposits,\\n    /// withdraws etc. For that reason router may need to send multiple tokens back to the user. Combining\\n    /// Ether and WETH deposits will make this function revert.\\n    /// @param _actions array of actions to execute\\n    function execute(Action[] calldata _actions) external payable nonReentrant {\\n        uint256 len = _actions.length;\\n\\n        // execute actions\\n        for (uint256 i = 0; i < len; i++) {\\n            _executeAction(_actions[i]);\\n        }\\n\\n        // send all assets to user\\n        for (uint256 i = 0; i < len; i++) {\\n            uint256 remainingBalance = _actions[i].asset.balanceOf(address(this));\\n\\n            if (remainingBalance != 0) {\\n                _sendAsset(_actions[i].asset, remainingBalance);\\n            }\\n        }\\n\\n        // should never have leftover ETH, however\\n        if (msg.value != 0 && address(this).balance != 0) {\\n            // solhint-disable-next-line avoid-low-level-calls\\n            (bool success, ) = msg.sender.call{value: address(this).balance}(\\\"\\\");\\n            if (!success) revert EthTransferFailed();\\n        }\\n    }\\n\\n    function siloRouterPing() external pure returns (bytes4) {\\n        return this.siloRouterPing.selector;\\n    }\\n\\n    /// @dev Execute actions\\n    /// @param _action action to execute, this can be one of many actions in the whole flow\\n    // solhint-disable-next-line code-complexity\\n    function _executeAction(Action calldata _action) internal {\\n        if (!siloRepository.isSilo(address(_action.silo))) revert InvalidSilo();\\n\\n        if (_action.actionType == ActionType.Deposit) {\\n            _pullAssetIfNeeded(_action.asset, _action.amount);\\n            _approveIfNeeded(_action.asset, address(_action.silo), _action.amount);\\n            _action.silo.depositFor(address(_action.asset), msg.sender, _action.amount, _action.collateralOnly);\\n        } else if (_action.actionType == ActionType.Withdraw) {\\n            _action.silo.withdrawFor(\\n                address(_action.asset),\\n                msg.sender,\\n                address(this),\\n                _action.amount,\\n                _action.collateralOnly\\n            );\\n        } else if (_action.actionType == ActionType.Borrow) {\\n            _action.silo.borrowFor(address(_action.asset), msg.sender, address(this), _action.amount);\\n        } else if (_action.actionType == ActionType.Repay) {\\n            uint256 repayAmount; \\n\\n            if (_action.amount == type(uint256).max) {\\n                _action.silo.accrueInterest(address(_action.asset));\\n                repayAmount = _getRepayAmount(_action.silo, _action.asset, msg.sender);\\n            } else {\\n                repayAmount = _action.amount;\\n            }\\n\\n            _pullAssetIfNeeded(_action.asset, repayAmount);\\n            _approveIfNeeded(_action.asset, address(_action.silo), repayAmount);\\n            _action.silo.repayFor(address(_action.asset), msg.sender, repayAmount);\\n        } else {\\n            revert UnsupportedAction();\\n        }\\n    }\\n\\n    /// @dev Approve Silo to transfer token if current allowance is not enough\\n    /// @param _asset token to be approved\\n    /// @param _spender Silo address that spends the token\\n    /// @param _amount amount of token to be spent\\n    function _approveIfNeeded(\\n        IERC20 _asset,\\n        address _spender,\\n        uint256 _amount\\n    ) internal {\\n        if (_asset.allowance(address(this), _spender) < _amount) {\\n            // solhint-disable-next-line avoid-low-level-calls\\n            (bool success, bytes memory data) = address(_asset).call(\\n                abi.encodeCall(IERC20.approve, (_spender, type(uint256).max))\\n            );\\n\\n            // Support non-standard tokens that don't return bool\\n            if(!success || !(data.length == 0 || abi.decode(data, (bool)))) {\\n                revert ApprovalFailed();\\n            }\\n        }\\n    }\\n\\n    /// @dev Transfer funds from msg.sender to this contract if balance is not enough\\n    /// @param _asset token to be approved\\n    /// @param _amount amount of token to be spent\\n    function _pullAssetIfNeeded(IERC20 _asset, uint256 _amount) internal {\\n        uint256 remainingBalance = _asset.balanceOf(address(this));\\n\\n        if (remainingBalance < _amount) {\\n            // There can't be an underflow in the subtraction because of the previous check\\n            unchecked {\\n                _pullAsset(_asset, _amount - remainingBalance);\\n            }\\n        }\\n    }\\n\\n    /// @dev Transfer asset from user to router\\n    /// @param _asset asset address to be transferred\\n    /// @param _amount amount of asset to be transferred\\n    function _pullAsset(IERC20 _asset, uint256 _amount) internal {\\n        if (msg.value != 0 && _asset == wrappedNativeToken) {\\n            wrappedNativeToken.deposit{value: _amount}();\\n        } else {\\n            _asset.safeTransferFrom(msg.sender, address(this), _amount);\\n        }\\n    }\\n\\n    /// @dev Transfer asset from router to user\\n    /// @param _asset asset address to be transferred\\n    /// @param _amount amount of asset to be transferred\\n    function _sendAsset(IERC20 _asset, uint256 _amount) internal {\\n        if (address(_asset) == address(wrappedNativeToken)) {\\n            wrappedNativeToken.withdraw(_amount);\\n            // solhint-disable-next-line avoid-low-level-calls\\n            (bool success, ) = msg.sender.call{value: _amount}(\\\"\\\");\\n            if (!success) revert ERC20TransferFailed();\\n        } else {\\n            _asset.safeTransfer(msg.sender, _amount);\\n        }\\n    }\\n\\n    /// @dev Helper that calculates the maximum amount to repay if type(uint256).max is passed\\n    /// @param _silo silo for which the debt will be repaid\\n    /// @param _asset asset being repaid\\n    /// @param _borrower user for which the debt being repaid\\n    function _getRepayAmount(ISilo _silo, IERC20 _asset, address _borrower)\\n        internal\\n        view\\n        returns(uint256)\\n    {\\n        ISilo.AssetStorage memory _assetStorage = _silo.assetStorage(address(_asset));\\n        uint256 repayShare = _assetStorage.debtToken.balanceOf(_borrower);\\n        uint256 debtTokenTotalSupply = _assetStorage.debtToken.totalSupply();\\n        uint256 totalBorrowed = _assetStorage.totalBorrowAmount;\\n        return repayShare.toAmountRoundUp(totalBorrowed, debtTokenTotalSupply);\\n    }\\n}\\n\",\"keccak256\":\"0x76417b86e70f8539b08241242bbbdb725d4f615907846d3b570fd73fcc9774d7\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/IBaseSilo.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.13;\\n\\nimport \\\"./IShareToken.sol\\\";\\nimport \\\"./IFlashLiquidationReceiver.sol\\\";\\nimport \\\"./ISiloRepository.sol\\\";\\n\\ninterface IBaseSilo {\\n    enum AssetStatus { Undefined, Active, Removed }\\n\\n    /// @dev Storage struct that holds all required data for a single token market\\n    struct AssetStorage {\\n        /// @dev Token that represents a share in totalDeposits of Silo\\n        IShareToken collateralToken;\\n        /// @dev Token that represents a share in collateralOnlyDeposits of Silo\\n        IShareToken collateralOnlyToken;\\n        /// @dev Token that represents a share in totalBorrowAmount of Silo\\n        IShareToken debtToken;\\n        /// @dev COLLATERAL: Amount of asset token that has been deposited to Silo with interest earned by depositors.\\n        /// It also includes token amount that has been borrowed.\\n        uint256 totalDeposits;\\n        /// @dev COLLATERAL ONLY: Amount of asset token that has been deposited to Silo that can be ONLY used\\n        /// as collateral. These deposits do NOT earn interest and CANNOT be borrowed.\\n        uint256 collateralOnlyDeposits;\\n        /// @dev DEBT: Amount of asset token that has been borrowed with accrued interest.\\n        uint256 totalBorrowAmount;\\n    }\\n\\n    /// @dev Storage struct that holds data related to fees and interest\\n    struct AssetInterestData {\\n        /// @dev Total amount of already harvested protocol fees\\n        uint256 harvestedProtocolFees;\\n        /// @dev Total amount (ever growing) of asset token that has been earned by the protocol from\\n        /// generated interest.\\n        uint256 protocolFees;\\n        /// @dev Timestamp of the last time `interestRate` has been updated in storage.\\n        uint64 interestRateTimestamp;\\n        /// @dev True if asset was removed from the protocol. If so, deposit and borrow functions are disabled\\n        /// for that asset\\n        AssetStatus status;\\n    }\\n\\n    /// @notice data that InterestModel needs for calculations\\n    struct UtilizationData {\\n        uint256 totalDeposits;\\n        uint256 totalBorrowAmount;\\n        /// @dev timestamp of last interest accrual\\n        uint64 interestRateTimestamp;\\n    }\\n\\n    /// @dev Shares names and symbols that are generated while asset initialization\\n    struct AssetSharesMetadata {\\n        /// @dev Name for the collateral shares token\\n        string collateralName;\\n        /// @dev Symbol for the collateral shares token\\n        string collateralSymbol;\\n        /// @dev Name for the collateral only (protected collateral) shares token\\n        string protectedName;\\n        /// @dev Symbol for the collateral only (protected collateral) shares token\\n        string protectedSymbol;\\n        /// @dev Name for the debt shares token\\n        string debtName;\\n        /// @dev Symbol for the debt shares token\\n        string debtSymbol;\\n    }\\n\\n    /// @notice Emitted when deposit is made\\n    /// @param asset asset address that was deposited\\n    /// @param depositor wallet address that deposited asset\\n    /// @param amount amount of asset that was deposited\\n    /// @param collateralOnly type of deposit, true if collateralOnly deposit was used\\n    event Deposit(address indexed asset, address indexed depositor, uint256 amount, bool collateralOnly);\\n\\n    /// @notice Emitted when withdraw is made\\n    /// @param asset asset address that was withdrawn\\n    /// @param depositor wallet address that deposited asset\\n    /// @param receiver wallet address that received asset\\n    /// @param amount amount of asset that was withdrew\\n    /// @param collateralOnly type of withdraw, true if collateralOnly deposit was used\\n    event Withdraw(\\n        address indexed asset,\\n        address indexed depositor,\\n        address indexed receiver,\\n        uint256 amount,\\n        bool collateralOnly\\n    );\\n\\n    /// @notice Emitted on asset borrow\\n    /// @param asset asset address that was borrowed\\n    /// @param user wallet address that borrowed asset\\n    /// @param amount amount of asset that was borrowed\\n    event Borrow(address indexed asset, address indexed user, uint256 amount);\\n\\n    /// @notice Emitted on asset repay\\n    /// @param asset asset address that was repaid\\n    /// @param user wallet address that repaid asset\\n    /// @param amount amount of asset that was repaid\\n    event Repay(address indexed asset, address indexed user, uint256 amount);\\n\\n    /// @notice Emitted on user liquidation\\n    /// @param asset asset address that was liquidated\\n    /// @param user wallet address that was liquidated\\n    /// @param shareAmountRepaid amount of collateral-share token that was repaid. This is collateral token representing\\n    /// ownership of underlying deposit.\\n    /// @param seizedCollateral amount of underlying token that was seized by liquidator\\n    event Liquidate(address indexed asset, address indexed user, uint256 shareAmountRepaid, uint256 seizedCollateral);\\n\\n    /// @notice Emitted when the status for an asset is updated\\n    /// @param asset asset address that was updated\\n    /// @param status new asset status\\n    event AssetStatusUpdate(address indexed asset, AssetStatus indexed status);\\n\\n    /// @return version of the silo contract\\n    function VERSION() external returns (uint128); // solhint-disable-line func-name-mixedcase\\n\\n    /// @notice Synchronize current bridge assets with Silo\\n    /// @dev This function needs to be called on Silo deployment to setup all assets for Silo. It needs to be\\n    /// called every time a bridged asset is added or removed. When bridge asset is removed, depositing and borrowing\\n    /// should be disabled during asset sync.\\n    function syncBridgeAssets() external;\\n\\n    /// @notice Get Silo Repository contract address\\n    /// @return Silo Repository contract address\\n    function siloRepository() external view returns (ISiloRepository);\\n\\n    /// @notice Get asset storage data\\n    /// @param _asset asset address\\n    /// @return AssetStorage struct\\n    function assetStorage(address _asset) external view returns (AssetStorage memory);\\n\\n    /// @notice Get asset interest data\\n    /// @param _asset asset address\\n    /// @return AssetInterestData struct\\n    function interestData(address _asset) external view returns (AssetInterestData memory);\\n\\n    /// @dev helper method for InterestRateModel calculations\\n    function utilizationData(address _asset) external view returns (UtilizationData memory data);\\n\\n    /// @notice Calculates solvency of an account\\n    /// @param _user wallet address for which solvency is calculated\\n    /// @return true if solvent, false otherwise\\n    function isSolvent(address _user) external view returns (bool);\\n\\n    /// @notice Returns all initialized (synced) assets of Silo including current and removed bridge assets\\n    /// @return assets array of initialized assets of Silo\\n    function getAssets() external view returns (address[] memory assets);\\n\\n    /// @notice Returns all initialized (synced) assets of Silo including current and removed bridge assets\\n    /// with corresponding state\\n    /// @return assets array of initialized assets of Silo\\n    /// @return assetsStorage array of assets state corresponding to `assets` array\\n    function getAssetsWithState() external view returns (address[] memory assets, AssetStorage[] memory assetsStorage);\\n\\n    /// @notice Check if depositing an asset for given account is possible\\n    /// @dev Depositing an asset that has been already borrowed (and vice versa) is disallowed\\n    /// @param _asset asset we want to deposit\\n    /// @param _depositor depositor address\\n    /// @return true if asset can be deposited by depositor\\n    function depositPossible(address _asset, address _depositor) external view returns (bool);\\n\\n    /// @notice Check if borrowing an asset for given account is possible\\n    /// @dev Borrowing an asset that has been already deposited (and vice versa) is disallowed\\n    /// @param _asset asset we want to deposit\\n    /// @param _borrower borrower address\\n    /// @return true if asset can be borrowed by borrower\\n    function borrowPossible(address _asset, address _borrower) external view returns (bool);\\n\\n    /// @dev Amount of token that is available for borrowing\\n    /// @param _asset asset to get liquidity for\\n    /// @return Silo liquidity\\n    function liquidity(address _asset) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xc8a26cc2e206cd62546338a876fd011e2fba9c9a727e7f7aa4c56aae81a1b765\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/IFlashLiquidationReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\n/// @dev when performing Silo flash liquidation, FlashReceiver contract will receive all collaterals\\ninterface IFlashLiquidationReceiver {\\n    /// @dev this method is called when doing Silo flash liquidation\\n    ///         one can NOT assume, that if _seizedCollateral[i] != 0, then _shareAmountsToRepaid[i] must be 0\\n    ///         one should assume, that any combination of amounts is possible\\n    ///         on callback, one must call `Silo.repayFor` because at the end of transaction,\\n    ///         Silo will check if borrower is solvent.\\n    /// @param _user user address, that is liquidated\\n    /// @param _assets array of collateral assets received during user liquidation\\n    ///         this array contains all assets (collateral borrowed) without any order\\n    /// @param _receivedCollaterals array of collateral amounts received during user liquidation\\n    ///         indexes of amounts are related to `_assets`,\\n    /// @param _shareAmountsToRepaid array of amounts to repay for each asset\\n    ///         indexes of amounts are related to `_assets`,\\n    /// @param _flashReceiverData data that are passed from sender that executes liquidation\\n    function siloLiquidationCallback(\\n        address _user,\\n        address[] calldata _assets,\\n        uint256[] calldata _receivedCollaterals,\\n        uint256[] calldata _shareAmountsToRepaid,\\n        bytes memory _flashReceiverData\\n    ) external;\\n}\\n\",\"keccak256\":\"0x4b1fc8600548526b354934fd8b7ba348f1608cc6c988a0d731ea2baa11e2c0a1\",\"license\":\"MIT\"},\"contracts/interfaces/IGuardedLaunch.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.13;\\n\\ninterface IGuardedLaunch {\\n    /// @dev Stores info about maximum allowed liquidity in a Silo. This limit applies to deposit only.\\n    struct MaxLiquidityLimit {\\n        /// @dev flag to turn on/off all limits for all Silos\\n        bool globalLimit;\\n        /// @dev default value represents maximum allowed liquidity in Silo\\n        uint256 defaultMaxLiquidity;\\n        /// @notice siloMaxLiquidity maps silo => asset => maximum allowed deposit liquidity.\\n        /// @dev Deposit liquidity limit is denominated in quote token. For example, if set to 1e18, it means that any\\n        /// given Silo is allowed for deposits up to 1 quote token of value. Value is calculated using prices from the\\n        /// Oracle.\\n        mapping(address => mapping(address => uint256)) siloMaxLiquidity;\\n    }\\n\\n    /// @dev Stores info about paused Silos\\n    /// if `globalPause` == `true`, all Silo are paused\\n    /// if `globalPause` == `false` and `siloPause[silo][0x0]` == `true`, all assets in a `silo` are paused\\n    /// if `globalPause` == `false` and `siloPause[silo][asset]` == `true`, only `asset` in a `silo` is paused\\n    struct Paused {\\n        bool globalPause;\\n        /// @dev maps silo address to asset address to bool\\n        mapping(address => mapping(address => bool)) siloPause;\\n    }\\n\\n    /// @notice Emitted when all Silos are paused or unpaused\\n    /// @param globalPause current value of `globalPause`\\n    event GlobalPause(bool globalPause);\\n\\n    /// @notice Emitted when a single Silo or single asset in a Silo is paused or unpaused\\n    /// @param silo address of Silo which is paused\\n    /// @param asset address of an asset which is paused\\n    /// @param pauseValue true when paused, otherwise false\\n    event SiloPause(address silo, address asset, bool pauseValue);\\n\\n    /// @notice Emitted when max liquidity toggle is switched\\n    /// @param newLimitedMaxLiquidityState new value for max liquidity toggle\\n    event LimitedMaxLiquidityToggled(bool newLimitedMaxLiquidityState);\\n\\n    /// @notice Emitted when deposit liquidity limit is changed for Silo and asset\\n    /// @param silo Silo address for which to set limit\\n    /// @param asset Silo asset for which to set limit\\n    /// @param newMaxDeposits deposit limit amount in quote token\\n    event SiloMaxDepositsLimitsUpdate(address indexed silo, address indexed asset, uint256 newMaxDeposits);\\n\\n    /// @notice Emitted when default max liquidity limit is changed\\n    /// @param newMaxDeposits new deposit limit in quote token\\n    event DefaultSiloMaxDepositsLimitUpdate(uint256 newMaxDeposits);\\n\\n    /// @notice Sets limited liquidity to provided value\\n    function setLimitedMaxLiquidity(bool _globalLimit) external;\\n\\n    /// @notice Sets default deposit limit for all Silos\\n    /// @param _maxDeposits deposit limit amount in quote token\\n    function setDefaultSiloMaxDepositsLimit(uint256 _maxDeposits) external;\\n\\n    /// @notice Sets deposit limit for Silo\\n    /// @param _silo Silo address for which to set limit\\n    /// @param _asset Silo asset for which to set limit\\n    /// @param _maxDeposits deposit limit amount in quote token\\n    function setSiloMaxDepositsLimit(\\n        address _silo,\\n        address _asset,\\n        uint256 _maxDeposits\\n    ) external;\\n\\n    /// @notice Pause all Silos\\n    /// @dev Callable only by owner.\\n    /// @param _globalPause true to pause all Silos, otherwise false\\n    function setGlobalPause(bool _globalPause) external;\\n\\n    /// @notice Pause single asset in a single Silo\\n    /// @dev Callable only by owner.\\n    /// @param _silo address of Silo in which `_asset` is being paused\\n    /// @param _asset address of an asset that is being paused\\n    /// @param _pauseValue true to pause, false to unpause\\n    function setSiloPause(address _silo, address _asset, bool _pauseValue) external;\\n\\n    /// @notice Check given asset in a Silo is paused\\n    /// @param _silo address of Silo\\n    /// @param _asset address of an asset\\n    /// @return true if given asset in a Silo is paused, otherwise false\\n    function isSiloPaused(address _silo, address _asset) external view returns (bool);\\n\\n    /// @notice Gets deposit limit for Silo\\n    /// @param _silo Silo address for which to set limit\\n    /// @param _asset Silo asset for which to set limit\\n    /// @return deposit limit for Silo\\n    function getMaxSiloDepositsValue(address _silo, address _asset) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x030da9c7612345699c525468de110163b9b83f285ac02483c66319d19c0f638b\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/IInterestRateModel.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.13;\\n\\ninterface IInterestRateModel {\\n    /* solhint-disable */\\n    struct Config {\\n        // uopt \\u2208 (0, 1) \\u2013 optimal utilization;\\n        int256 uopt;\\n        // ucrit \\u2208 (uopt, 1) \\u2013 threshold of large utilization;\\n        int256 ucrit;\\n        // ulow \\u2208 (0, uopt) \\u2013 threshold of low utilization\\n        int256 ulow;\\n        // ki > 0 \\u2013 integrator gain\\n        int256 ki;\\n        // kcrit > 0 \\u2013 proportional gain for large utilization\\n        int256 kcrit;\\n        // klow \\u2265 0 \\u2013 proportional gain for low utilization\\n        int256 klow;\\n        // klin \\u2265 0 \\u2013 coefficient of the lower linear bound\\n        int256 klin;\\n        // beta \\u2265 0 - a scaling factor\\n        int256 beta;\\n        // ri \\u2265 0 \\u2013 initial value of the integrator\\n        int256 ri;\\n        // Tcrit \\u2265 0 - the time during which the utilization exceeds the critical value\\n        int256 Tcrit;\\n    }\\n    /* solhint-enable */\\n\\n    /// @dev Set dedicated config for given asset in a Silo. Config is per asset per Silo so different assets\\n    /// in different Silo can have different configs.\\n    /// It will try to call `_silo.accrueInterest(_asset)` before updating config, but it is not guaranteed,\\n    /// that this call will be successful, if it fail config will be set anyway.\\n    /// @param _silo Silo address for which config should be set\\n    /// @param _asset asset address for which config should be set\\n    function setConfig(address _silo, address _asset, Config calldata _config) external;\\n\\n    /// @dev get compound interest rate and update model storage\\n    /// @param _asset address of an asset in Silo for which interest rate should be calculated\\n    /// @param _blockTimestamp current block timestamp\\n    /// @return rcomp compounded interest rate from last update until now (1e18 == 100%)\\n    function getCompoundInterestRateAndUpdate(\\n        address _asset,\\n        uint256 _blockTimestamp\\n    ) external returns (uint256 rcomp);\\n\\n    /// @dev Get config for given asset in a Silo. If dedicated config is not set, default one will be returned.\\n    /// @param _silo Silo address for which config should be set\\n    /// @param _asset asset address for which config should be set\\n    /// @return Config struct for asset in Silo\\n    function getConfig(address _silo, address _asset) external view returns (Config memory);\\n\\n    /// @dev get compound interest rate\\n    /// @param _silo address of Silo\\n    /// @param _asset address of an asset in Silo for which interest rate should be calculated\\n    /// @param _blockTimestamp current block timestamp\\n    /// @return rcomp compounded interest rate from last update until now (1e18 == 100%)\\n    function getCompoundInterestRate(\\n        address _silo,\\n        address _asset,\\n        uint256 _blockTimestamp\\n    ) external view returns (uint256 rcomp);\\n\\n    /// @dev get current annual interest rate\\n    /// @param _silo address of Silo\\n    /// @param _asset address of an asset in Silo for which interest rate should be calculated\\n    /// @param _blockTimestamp current block timestamp\\n    /// @return rcur current annual interest rate (1e18 == 100%)\\n    function getCurrentInterestRate(\\n        address _silo,\\n        address _asset,\\n        uint256 _blockTimestamp\\n    ) external view returns (uint256 rcur);\\n\\n    /// @notice get the flag to detect rcomp restriction (zero current interest) due to overflow\\n    /// overflow boolean flag to detect rcomp restriction\\n    function overflowDetected(\\n        address _silo,\\n        address _asset,\\n        uint256 _blockTimestamp\\n    ) external view returns (bool overflow);\\n\\n    /// @dev pure function that calculates current annual interest rate\\n    /// @param _c configuration object, InterestRateModel.Config\\n    /// @param _totalBorrowAmount current total borrows for asset\\n    /// @param _totalDeposits current total deposits for asset\\n    /// @param _interestRateTimestamp timestamp of last interest rate update\\n    /// @param _blockTimestamp current block timestamp\\n    /// @return rcur current annual interest rate (1e18 == 100%)\\n    function calculateCurrentInterestRate(\\n        Config memory _c,\\n        uint256 _totalDeposits,\\n        uint256 _totalBorrowAmount,\\n        uint256 _interestRateTimestamp,\\n        uint256 _blockTimestamp\\n    ) external pure returns (uint256 rcur);\\n\\n    /// @dev pure function that calculates interest rate based on raw input data\\n    /// @param _c configuration object, InterestRateModel.Config\\n    /// @param _totalBorrowAmount current total borrows for asset\\n    /// @param _totalDeposits current total deposits for asset\\n    /// @param _interestRateTimestamp timestamp of last interest rate update\\n    /// @param _blockTimestamp current block timestamp\\n    /// @return rcomp compounded interest rate from last update until now (1e18 == 100%)\\n    /// @return ri current integral part of the rate\\n    /// @return Tcrit time during which the utilization exceeds the critical value\\n    /// @return overflow boolean flag to detect rcomp restriction\\n    function calculateCompoundInterestRateWithOverflowDetection(\\n        Config memory _c,\\n        uint256 _totalDeposits,\\n        uint256 _totalBorrowAmount,\\n        uint256 _interestRateTimestamp,\\n        uint256 _blockTimestamp\\n    ) external pure returns (\\n        uint256 rcomp,\\n        int256 ri,\\n        int256 Tcrit, // solhint-disable-line var-name-mixedcase\\n        bool overflow\\n    );\\n\\n    /// @dev pure function that calculates interest rate based on raw input data\\n    /// @param _c configuration object, InterestRateModel.Config\\n    /// @param _totalBorrowAmount current total borrows for asset\\n    /// @param _totalDeposits current total deposits for asset\\n    /// @param _interestRateTimestamp timestamp of last interest rate update\\n    /// @param _blockTimestamp current block timestamp\\n    /// @return rcomp compounded interest rate from last update until now (1e18 == 100%)\\n    /// @return ri current integral part of the rate\\n    /// @return Tcrit time during which the utilization exceeds the critical value\\n    function calculateCompoundInterestRate(\\n        Config memory _c,\\n        uint256 _totalDeposits,\\n        uint256 _totalBorrowAmount,\\n        uint256 _interestRateTimestamp,\\n        uint256 _blockTimestamp\\n    ) external pure returns (\\n        uint256 rcomp,\\n        int256 ri,\\n        int256 Tcrit // solhint-disable-line var-name-mixedcase\\n    );\\n\\n    /// @dev returns decimal points used by model\\n    function DP() external pure returns (uint256); // solhint-disable-line func-name-mixedcase\\n\\n    /// @dev just a helper method to see if address is a InterestRateModel\\n    /// @return always true\\n    function interestRateModelPing() external pure returns (bytes4);\\n}\\n\",\"keccak256\":\"0x26b53c997adc8ced83dac833e5d642e1dc3aff6a3ed643da64718c30674ee8c8\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/INotificationReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.13;\\n\\n/// @title Common interface for Silo Incentive Contract\\ninterface INotificationReceiver {\\n    /// @dev Informs the contract about token transfer\\n    /// @param _token address of the token that was transferred\\n    /// @param _from sender\\n    /// @param _to receiver\\n    /// @param _amount amount that was transferred\\n    function onAfterTransfer(address _token, address _from, address _to, uint256 _amount) external;\\n\\n    /// @dev Sanity check function\\n    /// @return always true\\n    function notificationReceiverPing() external pure returns (bytes4);\\n}\\n\",\"keccak256\":\"0xdbfa701819d923d592f42926dbce3bbc6d0e64875d56685bb145ea0e7b449230\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/IPriceProvider.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity >=0.7.6 <0.9.0;\\n\\n/// @title Common interface for Silo Price Providers\\ninterface IPriceProvider {\\n    /// @notice Returns \\\"Time-Weighted Average Price\\\" for an asset. Calculates TWAP price for quote/asset.\\n    /// It unifies all tokens decimal to 18, examples:\\n    /// - if asses == quote it returns 1e18\\n    /// - if asset is USDC and quote is ETH and ETH costs ~$3300 then it returns ~0.0003e18 WETH per 1 USDC\\n    /// @param _asset address of an asset for which to read price\\n    /// @return price of asses with 18 decimals, throws when pool is not ready yet to provide price\\n    function getPrice(address _asset) external view returns (uint256 price);\\n\\n    /// @dev Informs if PriceProvider is setup for asset. It does not means PriceProvider can provide price right away.\\n    /// Some providers implementations need time to \\\"build\\\" buffer for TWAP price,\\n    /// so price may not be available yet but this method will return true.\\n    /// @param _asset asset in question\\n    /// @return TRUE if asset has been setup, otherwise false\\n    function assetSupported(address _asset) external view returns (bool);\\n\\n    /// @notice Gets token address in which prices are quoted\\n    /// @return quoteToken address\\n    function quoteToken() external view returns (address);\\n\\n    /// @notice Helper method that allows easily detects, if contract is PriceProvider\\n    /// @dev this can save us from simple human errors, in case we use invalid address\\n    /// but this should NOT be treated as security check\\n    /// @return always true\\n    function priceProviderPing() external pure returns (bytes4);\\n}\\n\",\"keccak256\":\"0xe25259fe540647dd3945dbc8eff5f7ec789c6708b42e1d82c456d3e8c9082147\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/IPriceProvidersRepository.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity >=0.7.6 <0.9.0;\\n\\nimport \\\"./IPriceProvider.sol\\\";\\n\\ninterface IPriceProvidersRepository {\\n    /// @notice Emitted when price provider is added\\n    /// @param newPriceProvider new price provider address\\n    event NewPriceProvider(IPriceProvider indexed newPriceProvider);\\n\\n    /// @notice Emitted when price provider is removed\\n    /// @param priceProvider removed price provider address\\n    event PriceProviderRemoved(IPriceProvider indexed priceProvider);\\n\\n    /// @notice Emitted when asset is assigned to price provider\\n    /// @param asset assigned asset   address\\n    /// @param priceProvider price provider address\\n    event PriceProviderForAsset(address indexed asset, IPriceProvider indexed priceProvider);\\n\\n    /// @notice Register new price provider\\n    /// @param _priceProvider address of price provider\\n    function addPriceProvider(IPriceProvider _priceProvider) external;\\n\\n    /// @notice Unregister price provider\\n    /// @param _priceProvider address of price provider to be removed\\n    function removePriceProvider(IPriceProvider _priceProvider) external;\\n\\n    /// @notice Sets price provider for asset\\n    /// @dev Request for asset price is forwarded to the price provider assigned to that asset\\n    /// @param _asset address of an asset for which price provider will be used\\n    /// @param _priceProvider address of price provider\\n    function setPriceProviderForAsset(address _asset, IPriceProvider _priceProvider) external;\\n\\n    /// @notice Returns \\\"Time-Weighted Average Price\\\" for an asset\\n    /// @param _asset address of an asset for which to read price\\n    /// @return price TWAP price of a token with 18 decimals\\n    function getPrice(address _asset) external view returns (uint256 price);\\n\\n    /// @notice Gets price provider assigned to an asset\\n    /// @param _asset address of an asset for which to get price provider\\n    /// @return priceProvider address of price provider\\n    function priceProviders(address _asset) external view returns (IPriceProvider priceProvider);\\n\\n    /// @notice Gets token address in which prices are quoted\\n    /// @return quoteToken address\\n    function quoteToken() external view returns (address);\\n\\n    /// @notice Gets manager role address\\n    /// @return manager role address\\n    function manager() external view returns (address);\\n\\n    /// @notice Checks if providers are available for an asset\\n    /// @param _asset asset address to check\\n    /// @return returns TRUE if price feed is ready, otherwise false\\n    function providersReadyForAsset(address _asset) external view returns (bool);\\n\\n    /// @notice Returns true if address is a registered price provider\\n    /// @param _provider address of price provider to be removed\\n    /// @return true if address is a registered price provider, otherwise false\\n    function isPriceProvider(IPriceProvider _provider) external view returns (bool);\\n\\n    /// @notice Gets number of price providers registered\\n    /// @return number of price providers registered\\n    function providersCount() external view returns (uint256);\\n\\n    /// @notice Gets an array of price providers\\n    /// @return array of price providers\\n    function providerList() external view returns (address[] memory);\\n\\n    /// @notice Sanity check function\\n    /// @return returns always TRUE\\n    function priceProvidersRepositoryPing() external pure returns (bytes4);\\n}\\n\",\"keccak256\":\"0x715cb0aa617134d1f4ebe427adb5899455114260c3d853732a6302fb5b5d6e53\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/IShareToken.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.13;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\n\\nimport \\\"./INotificationReceiver.sol\\\";\\n\\ninterface IShareToken is IERC20Metadata {\\n    /// @notice Emitted every time receiver is notified about token transfer\\n    /// @param notificationReceiver receiver address\\n    /// @param success false if TX reverted on `notificationReceiver` side, otherwise true\\n    event NotificationSent(\\n        INotificationReceiver indexed notificationReceiver,\\n        bool success\\n    );\\n\\n    /// @notice Mint method for Silo to create debt position\\n    /// @param _account wallet for which to mint token\\n    /// @param _amount amount of token to be minted\\n    function mint(address _account, uint256 _amount) external;\\n\\n    /// @notice Burn method for Silo to close debt position\\n    /// @param _account wallet for which to burn token\\n    /// @param _amount amount of token to be burned\\n    function burn(address _account, uint256 _amount) external;\\n}\\n\",\"keccak256\":\"0xb07e3d32d9be5266129c8f6e0f7db137f9d4632c2659fceaddc37ba65d5ce0c4\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/ISilo.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.13;\\n\\nimport \\\"./IBaseSilo.sol\\\";\\n\\ninterface ISilo is IBaseSilo {\\n    /// @notice Deposit `_amount` of `_asset` tokens from `msg.sender` to the Silo\\n    /// @param _asset The address of the token to deposit\\n    /// @param _amount The amount of the token to deposit\\n    /// @param _collateralOnly True if depositing collateral only\\n    /// @return collateralAmount deposited amount\\n    /// @return collateralShare user collateral shares based on deposited amount\\n    function deposit(address _asset, uint256 _amount, bool _collateralOnly)\\n        external\\n        returns (uint256 collateralAmount, uint256 collateralShare);\\n\\n    /// @notice Router function to deposit `_amount` of `_asset` tokens to the Silo for the `_depositor`\\n    /// @param _asset The address of the token to deposit\\n    /// @param _depositor The address of the recipient of collateral tokens\\n    /// @param _amount The amount of the token to deposit\\n    /// @param _collateralOnly True if depositing collateral only\\n    /// @return collateralAmount deposited amount\\n    /// @return collateralShare `_depositor` collateral shares based on deposited amount\\n    function depositFor(address _asset, address _depositor, uint256 _amount, bool _collateralOnly)\\n        external\\n        returns (uint256 collateralAmount, uint256 collateralShare);\\n\\n    /// @notice Withdraw `_amount` of `_asset` tokens from the Silo to `msg.sender`\\n    /// @param _asset The address of the token to withdraw\\n    /// @param _amount The amount of the token to withdraw\\n    /// @param _collateralOnly True if withdrawing collateral only deposit\\n    /// @return withdrawnAmount withdrawn amount that was transferred to user\\n    /// @return withdrawnShare burned share based on `withdrawnAmount`\\n    function withdraw(address _asset, uint256 _amount, bool _collateralOnly)\\n        external\\n        returns (uint256 withdrawnAmount, uint256 withdrawnShare);\\n\\n    /// @notice Router function to withdraw `_amount` of `_asset` tokens from the Silo for the `_depositor`\\n    /// @param _asset The address of the token to withdraw\\n    /// @param _depositor The address that originally deposited the collateral tokens being withdrawn,\\n    /// it should be the one initiating the withdrawal through the router\\n    /// @param _receiver The address that will receive the withdrawn tokens\\n    /// @param _amount The amount of the token to withdraw\\n    /// @param _collateralOnly True if withdrawing collateral only deposit\\n    /// @return withdrawnAmount withdrawn amount that was transferred to `_receiver`\\n    /// @return withdrawnShare burned share based on `withdrawnAmount`\\n    function withdrawFor(\\n        address _asset,\\n        address _depositor,\\n        address _receiver,\\n        uint256 _amount,\\n        bool _collateralOnly\\n    ) external returns (uint256 withdrawnAmount, uint256 withdrawnShare);\\n\\n    /// @notice Borrow `_amount` of `_asset` tokens from the Silo to `msg.sender`\\n    /// @param _asset The address of the token to borrow\\n    /// @param _amount The amount of the token to borrow\\n    /// @return debtAmount borrowed amount\\n    /// @return debtShare user debt share based on borrowed amount\\n    function borrow(address _asset, uint256 _amount) external returns (uint256 debtAmount, uint256 debtShare);\\n\\n    /// @notice Router function to borrow `_amount` of `_asset` tokens from the Silo for the `_receiver`\\n    /// @param _asset The address of the token to borrow\\n    /// @param _borrower The address that will take the loan,\\n    /// it should be the one initiating the borrowing through the router\\n    /// @param _receiver The address of the asset receiver\\n    /// @param _amount The amount of the token to borrow\\n    /// @return debtAmount borrowed amount\\n    /// @return debtShare `_receiver` debt share based on borrowed amount\\n    function borrowFor(address _asset, address _borrower, address _receiver, uint256 _amount)\\n        external\\n        returns (uint256 debtAmount, uint256 debtShare);\\n\\n    /// @notice Repay `_amount` of `_asset` tokens from `msg.sender` to the Silo\\n    /// @param _asset The address of the token to repay\\n    /// @param _amount amount of asset to repay, includes interests\\n    /// @return repaidAmount amount repaid\\n    /// @return burnedShare burned debt share\\n    function repay(address _asset, uint256 _amount) external returns (uint256 repaidAmount, uint256 burnedShare);\\n\\n    /// @notice Allows to repay in behalf of borrower to execute liquidation\\n    /// @param _asset The address of the token to repay\\n    /// @param _borrower The address of the user to have debt tokens burned\\n    /// @param _amount amount of asset to repay, includes interests\\n    /// @return repaidAmount amount repaid\\n    /// @return burnedShare burned debt share\\n    function repayFor(address _asset, address _borrower, uint256 _amount)\\n        external\\n        returns (uint256 repaidAmount, uint256 burnedShare);\\n\\n    /// @dev harvest protocol fees from an array of assets\\n    /// @return harvestedAmounts amount harvested during tx execution for each of silo asset\\n    function harvestProtocolFees() external returns (uint256[] memory harvestedAmounts);\\n\\n    /// @notice Function to update interests for `_asset` token since the last saved state\\n    /// @param _asset The address of the token to be updated\\n    /// @return interest accrued interest\\n    function accrueInterest(address _asset) external returns (uint256 interest);\\n\\n    /// @notice this methods does not requires to have tokens in order to liquidate user\\n    /// @dev during liquidation process, msg.sender will be notified once all collateral will be send to him\\n    /// msg.sender needs to be `IFlashLiquidationReceiver`\\n    /// @param _users array of users to liquidate\\n    /// @param _flashReceiverData this data will be forward to msg.sender on notification\\n    /// @return assets array of all processed assets (collateral + debt, including removed)\\n    /// @return receivedCollaterals receivedCollaterals[userId][assetId] => amount\\n    /// amounts of collaterals send to `_flashReceiver`\\n    /// @return shareAmountsToRepaid shareAmountsToRepaid[userId][assetId] => amount\\n    /// required amounts of debt to be repaid\\n    function flashLiquidate(address[] memory _users, bytes memory _flashReceiverData)\\n        external\\n        returns (\\n            address[] memory assets,\\n            uint256[][] memory receivedCollaterals,\\n            uint256[][] memory shareAmountsToRepaid\\n        );\\n}\\n\",\"keccak256\":\"0xb1af67bfc5cfb83f15757017ecacafe8258dd0be2e14bc02e8af1aa9ba8955b5\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/ISiloFactory.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.13;\\n\\ninterface ISiloFactory {\\n    /// @notice Emitted when Silo is deployed\\n    /// @param silo address of deployed Silo\\n    /// @param asset address of asset for which Silo was deployed\\n    /// @param version version of silo implementation\\n    event NewSiloCreated(address indexed silo, address indexed asset, uint128 version);\\n\\n    /// @notice Must be called by repository on constructor\\n    /// @param _siloRepository the SiloRepository to set\\n    function initRepository(address _siloRepository) external;\\n\\n    /// @notice Deploys Silo\\n    /// @param _siloAsset unique asset for which Silo is deployed\\n    /// @param _version version of silo implementation\\n    /// @param _data (optional) data that may be needed during silo creation\\n    /// @return silo deployed Silo address\\n    function createSilo(address _siloAsset, uint128 _version, bytes memory _data) external returns (address silo);\\n\\n    /// @dev just a helper method to see if address is a factory\\n    function siloFactoryPing() external pure returns (bytes4);\\n}\\n\",\"keccak256\":\"0x5df65ec4644cc935f9e807e4c295b67a22d2768487878a8619a0273a488d4b98\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/ISiloRepository.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.13;\\n\\nimport \\\"./ISiloFactory.sol\\\";\\nimport \\\"./ITokensFactory.sol\\\";\\nimport \\\"./IPriceProvidersRepository.sol\\\";\\nimport \\\"./INotificationReceiver.sol\\\";\\nimport \\\"./IInterestRateModel.sol\\\";\\n\\ninterface ISiloRepository {\\n    /// @dev protocol fees in precision points (Solvency._PRECISION_DECIMALS), we do allow for fee == 0\\n    struct Fees {\\n        /// @dev One time protocol fee for opening a borrow position in precision points (Solvency._PRECISION_DECIMALS)\\n        uint64 entryFee;\\n        /// @dev Protocol revenue share in interest paid in precision points (Solvency._PRECISION_DECIMALS)\\n        uint64 protocolShareFee;\\n        /// @dev Protocol share in liquidation profit in precision points (Solvency._PRECISION_DECIMALS).\\n        /// It's calculated from total collateral amount to be transferred to liquidator.\\n        uint64 protocolLiquidationFee;\\n    }\\n\\n    struct SiloVersion {\\n        /// @dev Default version of Silo. If set to 0, it means it is not set. By default it is set to 1\\n        uint128 byDefault;\\n\\n        /// @dev Latest added version of Silo. If set to 0, it means it is not set. By default it is set to 1\\n        uint128 latest;\\n    }\\n\\n    /// @dev AssetConfig struct represents configurable parameters for each Silo\\n    struct AssetConfig {\\n        /// @dev Loan-to-Value ratio represents the maximum borrowing power of a specific collateral.\\n        ///      For example, if the collateral asset has an LTV of 75%, the user can borrow up to 0.75 worth\\n        ///      of quote token in the principal currency for every quote token worth of collateral.\\n        ///      value uses 18 decimals eg. 100% == 1e18\\n        ///      max valid value is 1e18 so it needs storage of 60 bits\\n        uint64 maxLoanToValue;\\n\\n        /// @dev Liquidation Threshold represents the threshold at which a borrow position will be considered\\n        ///      undercollateralized and subject to liquidation for each collateral. For example,\\n        ///      if a collateral has a liquidation threshold of 80%, it means that the loan will be\\n        ///      liquidated when the borrowAmount value is worth 80% of the collateral value.\\n        ///      value uses 18 decimals eg. 100% == 1e18\\n        uint64 liquidationThreshold;\\n\\n        /// @dev interest rate model address\\n        IInterestRateModel interestRateModel;\\n    }\\n\\n    event NewDefaultMaximumLTV(uint64 defaultMaximumLTV);\\n\\n    event NewDefaultLiquidationThreshold(uint64 defaultLiquidationThreshold);\\n\\n    /// @notice Emitted on new Silo creation\\n    /// @param silo deployed Silo address\\n    /// @param asset unique asset for deployed Silo\\n    /// @param siloVersion version of deployed Silo\\n    event NewSilo(address indexed silo, address indexed asset, uint128 siloVersion);\\n\\n    /// @notice Emitted when new Silo (or existing one) becomes a bridge pool (pool with only bridge tokens).\\n    /// @param pool address of the bridge pool, It can be zero address when bridge asset is removed and pool no longer\\n    /// is treated as bridge pool\\n    event BridgePool(address indexed pool);\\n\\n    /// @notice Emitted on new bridge asset\\n    /// @param newBridgeAsset address of added bridge asset\\n    event BridgeAssetAdded(address indexed newBridgeAsset);\\n\\n    /// @notice Emitted on removed bridge asset\\n    /// @param bridgeAssetRemoved address of removed bridge asset\\n    event BridgeAssetRemoved(address indexed bridgeAssetRemoved);\\n\\n    /// @notice Emitted when default interest rate model is changed\\n    /// @param newModel address of new interest rate model\\n    event InterestRateModel(IInterestRateModel indexed newModel);\\n\\n    /// @notice Emitted on price provider repository address update\\n    /// @param newProvider address of new oracle repository\\n    event PriceProvidersRepositoryUpdate(\\n        IPriceProvidersRepository indexed newProvider\\n    );\\n\\n    /// @notice Emitted on token factory address update\\n    /// @param newTokensFactory address of new token factory\\n    event TokensFactoryUpdate(address indexed newTokensFactory);\\n\\n    /// @notice Emitted on router address update\\n    /// @param newRouter address of new router\\n    event RouterUpdate(address indexed newRouter);\\n\\n    /// @notice Emitted on INotificationReceiver address update\\n    /// @param newIncentiveContract address of new INotificationReceiver\\n    event NotificationReceiverUpdate(INotificationReceiver indexed newIncentiveContract);\\n\\n    /// @notice Emitted when new Silo version is registered\\n    /// @param factory factory address that deploys registered Silo version\\n    /// @param siloLatestVersion Silo version of registered Silo\\n    /// @param siloDefaultVersion current default Silo version\\n    event RegisterSiloVersion(address indexed factory, uint128 siloLatestVersion, uint128 siloDefaultVersion);\\n\\n    /// @notice Emitted when Silo version is unregistered\\n    /// @param factory factory address that deploys unregistered Silo version\\n    /// @param siloVersion version that was unregistered\\n    event UnregisterSiloVersion(address indexed factory, uint128 siloVersion);\\n\\n    /// @notice Emitted when default Silo version is updated\\n    /// @param newDefaultVersion new default version\\n    event SiloDefaultVersion(uint128 newDefaultVersion);\\n\\n    /// @notice Emitted when default fee is updated\\n    /// @param newEntryFee new entry fee\\n    /// @param newProtocolShareFee new protocol share fee\\n    /// @param newProtocolLiquidationFee new protocol liquidation fee\\n    event FeeUpdate(\\n        uint64 newEntryFee,\\n        uint64 newProtocolShareFee,\\n        uint64 newProtocolLiquidationFee\\n    );\\n\\n    /// @notice Emitted when asset config is updated for a silo\\n    /// @param silo silo for which asset config is being set\\n    /// @param asset asset for which asset config is being set\\n    /// @param assetConfig new asset config\\n    event AssetConfigUpdate(address indexed silo, address indexed asset, AssetConfig assetConfig);\\n\\n    /// @notice Emitted when silo (silo factory) version is set for asset\\n    /// @param asset asset for which asset config is being set\\n    /// @param version Silo version\\n    event VersionForAsset(address indexed asset, uint128 version);\\n\\n    /// @param _siloAsset silo asset\\n    /// @return version of Silo that is assigned for provided asset, if not assigned it returns zero (default)\\n    function getVersionForAsset(address _siloAsset) external returns (uint128);\\n\\n    /// @notice setter for `getVersionForAsset` mapping\\n    /// @param _siloAsset silo asset\\n    /// @param _version version of Silo that will be assigned for `_siloAsset`, zero (default) is acceptable\\n    function setVersionForAsset(address _siloAsset, uint128 _version) external;\\n\\n    /// @notice use this method only when off-chain verification is OFF\\n    /// @dev Silo does NOT support rebase and deflationary tokens\\n    /// @param _siloAsset silo asset\\n    /// @param _siloData (optional) data that may be needed during silo creation\\n    /// @return createdSilo address of created silo\\n    function newSilo(address _siloAsset, bytes memory _siloData) external returns (address createdSilo);\\n\\n    /// @notice use this method to deploy new version of Silo for an asset that already has Silo deployed.\\n    /// Only owner (DAO) can replace.\\n    /// @dev Silo does NOT support rebase and deflationary tokens\\n    /// @param _siloAsset silo asset\\n    /// @param _siloVersion version of silo implementation. Use 0 for default version which is fine\\n    /// for 99% of cases.\\n    /// @param _siloData (optional) data that may be needed during silo creation\\n    /// @return createdSilo address of created silo\\n    function replaceSilo(\\n        address _siloAsset,\\n        uint128 _siloVersion,\\n        bytes memory _siloData\\n    ) external returns (address createdSilo);\\n\\n    /// @notice Set factory contract for debt and collateral tokens for each Silo asset\\n    /// @dev Callable only by owner\\n    /// @param _tokensFactory address of TokensFactory contract that deploys debt and collateral tokens\\n    function setTokensFactory(address _tokensFactory) external;\\n\\n    /// @notice Set default fees\\n    /// @dev Callable only by owner\\n    /// @param _fees:\\n    /// - _entryFee one time protocol fee for opening a borrow position in precision points\\n    /// (Solvency._PRECISION_DECIMALS)\\n    /// - _protocolShareFee protocol revenue share in interest paid in precision points\\n    /// (Solvency._PRECISION_DECIMALS)\\n    /// - _protocolLiquidationFee protocol share in liquidation profit in precision points\\n    /// (Solvency._PRECISION_DECIMALS). It's calculated from total collateral amount to be transferred\\n    /// to liquidator.\\n    function setFees(Fees calldata _fees) external;\\n\\n    /// @notice Set configuration for given asset in given Silo\\n    /// @dev Callable only by owner\\n    /// @param _silo Silo address for which config applies\\n    /// @param _asset asset address for which config applies\\n    /// @param _assetConfig:\\n    ///    - _maxLoanToValue maximum Loan-to-Value, for details see `Repository.AssetConfig.maxLoanToValue`\\n    ///    - _liquidationThreshold liquidation threshold, for details see `Repository.AssetConfig.maxLoanToValue`\\n    ///    - _interestRateModel interest rate model address, for details see `Repository.AssetConfig.interestRateModel`\\n    function setAssetConfig(\\n        address _silo,\\n        address _asset,\\n        AssetConfig calldata _assetConfig\\n    ) external;\\n\\n    /// @notice Set default interest rate model\\n    /// @dev Callable only by owner\\n    /// @param _defaultInterestRateModel default interest rate model\\n    function setDefaultInterestRateModel(IInterestRateModel _defaultInterestRateModel) external;\\n\\n    /// @notice Set default maximum LTV\\n    /// @dev Callable only by owner\\n    /// @param _defaultMaxLTV default maximum LTV in precision points (Solvency._PRECISION_DECIMALS)\\n    function setDefaultMaximumLTV(uint64 _defaultMaxLTV) external;\\n\\n    /// @notice Set default liquidation threshold\\n    /// @dev Callable only by owner\\n    /// @param _defaultLiquidationThreshold default liquidation threshold in precision points\\n    /// (Solvency._PRECISION_DECIMALS)\\n    function setDefaultLiquidationThreshold(uint64 _defaultLiquidationThreshold) external;\\n\\n    /// @notice Set price provider repository\\n    /// @dev Callable only by owner\\n    /// @param _repository price provider repository address\\n    function setPriceProvidersRepository(IPriceProvidersRepository _repository) external;\\n\\n    /// @notice Set router contract\\n    /// @dev Callable only by owner\\n    /// @param _router router address\\n    function setRouter(address _router) external;\\n\\n    /// @notice Set NotificationReceiver contract\\n    /// @dev Callable only by owner\\n    /// @param _silo silo address for which to set `_notificationReceiver`\\n    /// @param _notificationReceiver NotificationReceiver address\\n    function setNotificationReceiver(address _silo, INotificationReceiver _notificationReceiver) external;\\n\\n    /// @notice Adds new bridge asset\\n    /// @dev New bridge asset must be unique. Duplicates in bridge assets are not allowed. It's possible to add\\n    /// bridge asset that has been removed in the past. Note that all Silos must be synced manually. Callable\\n    /// only by owner.\\n    /// @param _newBridgeAsset bridge asset address\\n    function addBridgeAsset(address _newBridgeAsset) external;\\n\\n    /// @notice Removes bridge asset\\n    /// @dev Note that all Silos must be synced manually. Callable only by owner.\\n    /// @param _bridgeAssetToRemove bridge asset address to be removed\\n    function removeBridgeAsset(address _bridgeAssetToRemove) external;\\n\\n    /// @notice Registers new Silo version\\n    /// @dev User can choose which Silo version he wants to deploy. It's possible to have multiple versions of Silo.\\n    /// Callable only by owner.\\n    /// @param _factory factory contract that deploys new version of Silo\\n    /// @param _isDefault true if this version should be used as default\\n    function registerSiloVersion(ISiloFactory _factory, bool _isDefault) external;\\n\\n    /// @notice Unregisters Silo version\\n    /// @dev Callable only by owner.\\n    /// @param _siloVersion Silo version to be unregistered\\n    function unregisterSiloVersion(uint128 _siloVersion) external;\\n\\n    /// @notice Sets default Silo version\\n    /// @dev Callable only by owner.\\n    /// @param _defaultVersion Silo version to be set as default\\n    function setDefaultSiloVersion(uint128 _defaultVersion) external;\\n\\n    /// @notice Check if contract address is a Silo deployment\\n    /// @param _silo address of expected Silo\\n    /// @return true if address is Silo deployment, otherwise false\\n    function isSilo(address _silo) external view returns (bool);\\n\\n    /// @notice Get Silo address of asset\\n    /// @param _asset address of asset\\n    /// @return address of corresponding Silo deployment\\n    function getSilo(address _asset) external view returns (address);\\n\\n    /// @notice Get Silo Factory for given version\\n    /// @param _siloVersion version of Silo implementation\\n    /// @return ISiloFactory contract that deploys Silos of given version\\n    function siloFactory(uint256 _siloVersion) external view returns (ISiloFactory);\\n\\n    /// @notice Get debt and collateral Token Factory\\n    /// @return ITokensFactory contract that deploys debt and collateral tokens\\n    function tokensFactory() external view returns (ITokensFactory);\\n\\n    /// @notice Get Router contract\\n    /// @return address of router contract\\n    function router() external view returns (address);\\n\\n    /// @notice Get current bridge assets\\n    /// @dev Keep in mind that not all Silos may be synced with current bridge assets so it's possible that some\\n    /// assets in that list are not part of given Silo.\\n    /// @return address array of bridge assets\\n    function getBridgeAssets() external view returns (address[] memory);\\n\\n    /// @notice Get removed bridge assets\\n    /// @dev Keep in mind that not all Silos may be synced with bridge assets so it's possible that some\\n    /// assets in that list are still part of given Silo.\\n    /// @return address array of bridge assets\\n    function getRemovedBridgeAssets() external view returns (address[] memory);\\n\\n    /// @notice Get maximum LTV for asset in given Silo\\n    /// @dev If dedicated config is not set, method returns default config\\n    /// @param _silo address of Silo\\n    /// @param _asset address of an asset\\n    /// @return maximum LTV in precision points (Solvency._PRECISION_DECIMALS)\\n    function getMaximumLTV(address _silo, address _asset) external view returns (uint256);\\n\\n    /// @notice Get Interest Rate Model address for asset in given Silo\\n    /// @dev If dedicated config is not set, method returns default config\\n    /// @param _silo address of Silo\\n    /// @param _asset address of an asset\\n    /// @return address of interest rate model\\n    function getInterestRateModel(address _silo, address _asset) external view returns (IInterestRateModel);\\n\\n    /// @notice Get liquidation threshold for asset in given Silo\\n    /// @dev If dedicated config is not set, method returns default config\\n    /// @param _silo address of Silo\\n    /// @param _asset address of an asset\\n    /// @return liquidation threshold in precision points (Solvency._PRECISION_DECIMALS)\\n    function getLiquidationThreshold(address _silo, address _asset) external view returns (uint256);\\n\\n    /// @notice Get incentive contract address. Incentive contracts are responsible for distributing rewards\\n    /// to debt and/or collateral token holders of given Silo\\n    /// @param _silo address of Silo\\n    /// @return incentive contract address\\n    function getNotificationReceiver(address _silo) external view returns (INotificationReceiver);\\n\\n    /// @notice Get owner role address of Repository\\n    /// @return owner role address\\n    function owner() external view returns (address);\\n\\n    /// @notice get PriceProvidersRepository contract that manages price providers implementations\\n    /// @return IPriceProvidersRepository address\\n    function priceProvidersRepository() external view returns (IPriceProvidersRepository);\\n\\n    /// @dev Get protocol fee for opening a borrow position\\n    /// @return fee in precision points (Solvency._PRECISION_DECIMALS == 100%)\\n    function entryFee() external view returns (uint256);\\n\\n    /// @dev Get protocol share fee\\n    /// @return protocol share fee in precision points (Solvency._PRECISION_DECIMALS == 100%)\\n    function protocolShareFee() external view returns (uint256);\\n\\n    /// @dev Get protocol liquidation fee\\n    /// @return protocol liquidation fee in precision points (Solvency._PRECISION_DECIMALS == 100%)\\n    function protocolLiquidationFee() external view returns (uint256);\\n\\n    /// @dev Checks all conditions for new silo creation and throws when not possible to create\\n    /// @param _asset address of asset for which you want to create silo\\n    /// @param _assetIsABridge bool TRUE when `_asset` is bridge asset, FALSE when it is not\\n    function ensureCanCreateSiloFor(address _asset, bool _assetIsABridge) external view;\\n\\n    function siloRepositoryPing() external pure returns (bytes4);\\n}\\n\",\"keccak256\":\"0x3ab90e88cad4aac25c6f44b1071bc31ef7e7c0594a9b916e74d1f1ba26d63e38\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/ITokensFactory.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.13;\\n\\nimport \\\"./IShareToken.sol\\\";\\n\\ninterface ITokensFactory {\\n    /// @notice Emitted when collateral token is deployed\\n    /// @param token address of deployed collateral token\\n    event NewShareCollateralTokenCreated(address indexed token);\\n\\n    /// @notice Emitted when collateral token is deployed\\n    /// @param token address of deployed debt token\\n    event NewShareDebtTokenCreated(address indexed token);\\n\\n    ///@notice Must be called by repository on constructor\\n    /// @param _siloRepository the SiloRepository to set\\n    function initRepository(address _siloRepository) external;\\n\\n    /// @notice Deploys collateral token\\n    /// @param _name name of the token\\n    /// @param _symbol symbol of the token\\n    /// @param _asset underlying asset for which token is deployed\\n    /// @return address of deployed collateral share token\\n    function createShareCollateralToken(\\n        string memory _name,\\n        string memory _symbol,\\n        address _asset\\n    ) external returns (IShareToken);\\n\\n    /// @notice Deploys debt token\\n    /// @param _name name of the token\\n    /// @param _symbol symbol of the token\\n    /// @param _asset underlying asset for which token is deployed\\n    /// @return address of deployed debt share token\\n    function createShareDebtToken(\\n        string memory _name,\\n        string memory _symbol,\\n        address _asset\\n    )\\n        external\\n        returns (IShareToken);\\n\\n    /// @dev just a helper method to see if address is a factory\\n    /// @return always true\\n    function tokensFactoryPing() external pure returns (bytes4);\\n}\\n\",\"keccak256\":\"0xcbfc948e23f6fe7b0bf32a70f4cdcd9b438c5234a0b388134f3e6caeb4da4f05\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/IWrappedNativeToken.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.13;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IWrappedNativeToken is IERC20 {\\n    function deposit() external payable;\\n    function withdraw(uint256 amount) external;\\n}\\n\",\"keccak256\":\"0x82d0957f4e4c039b013b9a2f9122f80f734e65cf6b7d36d033beb28551226d30\",\"license\":\"BUSL-1.1\"},\"contracts/lib/EasyMath.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.13;\\n\\nlibrary EasyMath {\\n    error ZeroAssets();\\n    error ZeroShares();\\n\\n    function toShare(uint256 amount, uint256 totalAmount, uint256 totalShares) internal pure returns (uint256) {\\n        if (totalShares == 0 || totalAmount == 0) {\\n            return amount;\\n        }\\n\\n        uint256 result = amount * totalShares / totalAmount;\\n\\n        // Prevent rounding error\\n        if (result == 0 && amount != 0) {\\n            revert ZeroShares();\\n        }\\n\\n        return result;\\n    }\\n\\n    function toShareRoundUp(uint256 amount, uint256 totalAmount, uint256 totalShares) internal pure returns (uint256) {\\n        if (totalShares == 0 || totalAmount == 0) {\\n            return amount;\\n        }\\n\\n        uint256 numerator = amount * totalShares;\\n        uint256 result = numerator / totalAmount;\\n        \\n        // Round up\\n        if (numerator % totalAmount != 0) {\\n            result += 1;\\n        }\\n\\n        return result;\\n    }\\n\\n    function toAmount(uint256 share, uint256 totalAmount, uint256 totalShares) internal pure returns (uint256) {\\n        if (totalShares == 0 || totalAmount == 0) {\\n            return 0;\\n        }\\n\\n        uint256 result = share * totalAmount / totalShares;\\n\\n        // Prevent rounding error\\n        if (result == 0 && share != 0) {\\n            revert ZeroAssets();\\n        }\\n\\n        return result;\\n    }\\n\\n    function toAmountRoundUp(uint256 share, uint256 totalAmount, uint256 totalShares) internal pure returns (uint256) {\\n        if (totalShares == 0 || totalAmount == 0) {\\n            return 0;\\n        }\\n\\n        uint256 numerator = share * totalAmount;\\n        uint256 result = numerator / totalShares;\\n        \\n        // Round up\\n        if (numerator % totalShares != 0) {\\n            result += 1;\\n        }\\n\\n        return result;\\n    }\\n\\n    function toValue(uint256 _assetAmount, uint256 _assetPrice, uint256 _assetDecimals)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        return _assetAmount * _assetPrice / 10 ** _assetDecimals;\\n    }\\n\\n    function sum(uint256[] memory _numbers) internal pure returns (uint256 s) {\\n        for(uint256 i; i < _numbers.length; i++) {\\n            s += _numbers[i];\\n        }\\n    }\\n\\n    /// @notice Calculates fraction between borrowed and deposited amount of tokens denominated in percentage\\n    /// @dev It assumes `_dp` = 100%.\\n    /// @param _dp decimal points used by model\\n    /// @param _totalDeposits current total deposits for assets\\n    /// @param _totalBorrowAmount current total borrows for assets\\n    /// @return utilization value\\n    function calculateUtilization(uint256 _dp, uint256 _totalDeposits, uint256 _totalBorrowAmount)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        if (_totalDeposits == 0 || _totalBorrowAmount == 0) return 0;\\n\\n        return _totalBorrowAmount * _dp / _totalDeposits;\\n    }\\n}\\n\",\"keccak256\":\"0xf4ec6eb1e6ddd4102f9cea8e7f4fb39d8740c383e0bddb94619f6275bb617120\",\"license\":\"BUSL-1.1\"},\"contracts/lib/Ping.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity >=0.7.6 <0.9.0;\\n\\n\\nlibrary Ping {\\n    function pong(function() external pure returns(bytes4) pingFunction) internal pure returns (bool) {\\n        return pingFunction.address != address(0) && pingFunction.selector == pingFunction();\\n    }\\n}\\n\",\"keccak256\":\"0xc99622dfb46693aeb8a332ee0e124f54e12d5ed5e6b8f70a0c0e3678df35c8b1\",\"license\":\"BUSL-1.1\"},\"contracts/lib/Solvency.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.13;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\n\\nimport \\\"../interfaces/IPriceProvidersRepository.sol\\\";\\nimport \\\"../interfaces/ISilo.sol\\\";\\nimport \\\"../interfaces/IInterestRateModel.sol\\\";\\nimport \\\"../interfaces/ISiloRepository.sol\\\";\\nimport \\\"./EasyMath.sol\\\";\\n\\nlibrary Solvency {\\n    using EasyMath for uint256;\\n\\n    /// @notice\\n    /// MaximumLTV - Maximum Loan-to-Value ratio represents the maximum borrowing power of all user's collateral\\n    /// positions in a Silo\\n    /// LiquidationThreshold - Liquidation Threshold represents the threshold at which all user's borrow positions\\n    /// in a Silo will be considered under collateralized and subject to liquidation\\n    enum TypeofLTV { MaximumLTV, LiquidationThreshold }\\n\\n    error DifferentArrayLength();\\n    error UnsupportedLTVType();\\n\\n    struct SolvencyParams {\\n        /// @param siloRepository SiloRepository address\\n        ISiloRepository siloRepository;\\n        /// @param silo Silo address\\n        ISilo silo;\\n        /// @param assets array with assets\\n        address[] assets;\\n        /// @param assetStates array of states for each asset, where index match the `assets` index\\n        ISilo.AssetStorage[] assetStates;\\n        /// @param user wallet address for which to read debt\\n        address user;\\n    }\\n\\n    /// @dev is value that used for integer calculations and decimal points for utilization ratios, LTV, protocol fees\\n    uint256 internal constant _PRECISION_DECIMALS = 1e18;\\n    uint256 internal constant _INFINITY = type(uint256).max;\\n\\n    /// @notice Returns current user LTV and second LTV chosen in params\\n    /// @dev This function is optimized for protocol use. In some cases there is no need to keep the calculation\\n    /// going and predefined results can be returned.\\n    /// @param _params `Solvency.SolvencyParams` struct with needed params for calculation\\n    /// @param _secondLtvType type of LTV to be returned as second value\\n    /// @return currentUserLTV Loan-to-Value ratio represents current user's proportion of debt to collateral\\n    /// @return secondLTV second type of LTV which depends on _secondLtvType, zero is returned if the value of the loan\\n    /// or the collateral are zero\\n    function calculateLTVs(SolvencyParams memory _params, TypeofLTV _secondLtvType)\\n        internal\\n        view\\n        returns (uint256 currentUserLTV, uint256 secondLTV)\\n    {\\n        uint256[] memory totalBorrowAmounts = getBorrowAmounts(_params);\\n\\n        // this return avoids eg. additional checks on withdraw, when user did not borrow any asset\\n        if (EasyMath.sum(totalBorrowAmounts) == 0) return (0, 0);\\n\\n        IPriceProvidersRepository priceProvidersRepository = _params.siloRepository.priceProvidersRepository();\\n\\n        uint256[] memory borrowValues = convertAmountsToValues(\\n            priceProvidersRepository,\\n            _params.assets,\\n            totalBorrowAmounts\\n        );\\n\\n        // value of user's total debt\\n        uint256 borrowTotalValue = EasyMath.sum(borrowValues);\\n\\n        if (borrowTotalValue == 0) return (0, 0);\\n\\n        uint256[] memory collateralValues = getUserCollateralValues(priceProvidersRepository, _params);\\n\\n        // value of user's collateral\\n        uint256 collateralTotalValue = EasyMath.sum(collateralValues);\\n\\n        if (collateralTotalValue == 0) return (_INFINITY, 0);\\n\\n        // value of theoretical debt user can have depending on TypeofLTV\\n        uint256 borrowAvailableTotalValue = _getTotalAvailableToBorrowValue(\\n            _params.siloRepository,\\n            address(_params.silo),\\n            _params.assets,\\n            _secondLtvType,\\n            collateralValues\\n        );\\n\\n        currentUserLTV = borrowTotalValue * _PRECISION_DECIMALS / collateralTotalValue;\\n\\n        // one of Solvency.TypeofLTV\\n        secondLTV = borrowAvailableTotalValue * _PRECISION_DECIMALS / collateralTotalValue;\\n    }\\n\\n    /// @notice Calculates chosen LTV limit\\n    /// @dev This function should be used by external actors like SiloLens and UI/subgraph. `calculateLTVs` is\\n    /// optimized for protocol use and may not return second LVT calculation when they are not needed.\\n    /// @param _params `Solvency.SolvencyParams` struct with needed params for calculation\\n    /// @param _ltvType acceptable values are only TypeofLTV.MaximumLTV or TypeofLTV.LiquidationThreshold\\n    /// @return limit theoretical LTV limit of `_ltvType`\\n    function calculateLTVLimit(SolvencyParams memory _params, TypeofLTV _ltvType)\\n        internal\\n        view\\n        returns (uint256 limit)\\n    {\\n        IPriceProvidersRepository priceProvidersRepository = _params.siloRepository.priceProvidersRepository();\\n\\n        uint256[] memory collateralValues = getUserCollateralValues(priceProvidersRepository, _params);\\n\\n        // value of user's collateral\\n        uint256 collateralTotalValue = EasyMath.sum(collateralValues);\\n\\n        if (collateralTotalValue == 0) return 0;\\n\\n        // value of theoretical debt user can have depending on TypeofLTV\\n        uint256 borrowAvailableTotalValue = _getTotalAvailableToBorrowValue(\\n            _params.siloRepository,\\n            address(_params.silo),\\n            _params.assets,\\n            _ltvType,\\n            collateralValues\\n        );\\n\\n        limit = borrowAvailableTotalValue * _PRECISION_DECIMALS / collateralTotalValue;\\n    }\\n\\n    /// @notice Returns worth (in quote token) of each collateral deposit of a user\\n    /// @param _priceProvidersRepository address of IPriceProvidersRepository where prices are read\\n    /// @param _params `Solvency.SolvencyParams` struct with needed params for calculation\\n    /// @return collateralValues worth of each collateral deposit of a user as an array\\n    function getUserCollateralValues(IPriceProvidersRepository _priceProvidersRepository, SolvencyParams memory _params)\\n        internal\\n        view\\n        returns(uint256[] memory collateralValues)\\n    {\\n        uint256[] memory collateralAmounts = getCollateralAmounts(_params);\\n        collateralValues = convertAmountsToValues(_priceProvidersRepository, _params.assets, collateralAmounts);\\n    }\\n\\n    /// @notice Convert assets amounts to values in quote token (amount * price)\\n    /// @param _priceProviderRepo address of IPriceProvidersRepository where prices are read\\n    /// @param _assets array with assets for which prices are read\\n    /// @param _amounts array of amounts\\n    /// @return values array of values for corresponding assets\\n    function convertAmountsToValues(\\n        IPriceProvidersRepository _priceProviderRepo,\\n        address[] memory _assets,\\n        uint256[] memory _amounts\\n    ) internal view returns (uint256[] memory values) {\\n        if (_assets.length != _amounts.length) revert DifferentArrayLength();\\n\\n        values = new uint256[](_assets.length);\\n\\n        for (uint256 i = 0; i < _assets.length; i++) {\\n            if (_amounts[i] == 0) continue;\\n\\n            uint256 assetPrice = _priceProviderRepo.getPrice(_assets[i]);\\n            uint8 assetDecimals = ERC20(_assets[i]).decimals();\\n\\n            values[i] = _amounts[i].toValue(assetPrice, assetDecimals);\\n        }\\n    }\\n\\n    /// @notice Get amount of collateral for each asset\\n    /// @param _params `Solvency.SolvencyParams` struct with needed params for calculation\\n    /// @return collateralAmounts array of amounts for each token in Silo. May contain zero values if user\\n    /// did not deposit given collateral token.\\n    function getCollateralAmounts(SolvencyParams memory _params)\\n        internal\\n        view\\n        returns (uint256[] memory collateralAmounts)\\n    {\\n        if (_params.assets.length != _params.assetStates.length) {\\n            revert DifferentArrayLength();\\n        }\\n\\n        collateralAmounts = new uint256[](_params.assets.length);\\n\\n        for (uint256 i = 0; i < _params.assets.length; i++) {\\n            uint256 userCollateralTokenBalance = _params.assetStates[i].collateralToken.balanceOf(_params.user);\\n            uint256 userCollateralOnlyTokenBalance = _params.assetStates[i].collateralOnlyToken.balanceOf(_params.user);\\n\\n            if (userCollateralTokenBalance + userCollateralOnlyTokenBalance == 0) continue;\\n\\n            uint256 rcomp = getRcomp(_params.silo, _params.siloRepository, _params.assets[i], block.timestamp);\\n\\n            collateralAmounts[i] = getUserCollateralAmount(\\n                _params.assetStates[i],\\n                userCollateralTokenBalance,\\n                userCollateralOnlyTokenBalance,\\n                rcomp,\\n                _params.siloRepository\\n            );\\n        }\\n    }\\n\\n    /// @notice Get amount of debt for each asset\\n    /// @param _params `Solvency.SolvencyParams` struct with needed params for calculation\\n    /// @return totalBorrowAmounts array of amounts for each token in Silo. May contain zero values if user\\n    /// did not borrow given token.\\n    function getBorrowAmounts(SolvencyParams memory _params)\\n        internal\\n        view\\n        returns (uint256[] memory totalBorrowAmounts)\\n    {\\n        if (_params.assets.length != _params.assetStates.length) {\\n            revert DifferentArrayLength();\\n        }\\n\\n        totalBorrowAmounts = new uint256[](_params.assets.length);\\n\\n        for (uint256 i = 0; i < _params.assets.length; i++) {\\n            uint256 rcomp = getRcomp(_params.silo, _params.siloRepository, _params.assets[i], block.timestamp);\\n            totalBorrowAmounts[i] = getUserBorrowAmount(_params.assetStates[i], _params.user, rcomp);\\n        }\\n    }\\n\\n    /// @notice Get amount of deposited token, including collateralOnly deposits\\n    /// @param _assetStates state of deposited asset in Silo\\n    /// @param _userCollateralTokenBalance balance of user's share collateral token\\n    /// @param _userCollateralOnlyTokenBalance balance of user's share collateralOnly token\\n    /// @param _rcomp compounded interest rate to account for during calculations, could be 0\\n    /// @param _siloRepository SiloRepository address\\n    /// @return amount of underlying token deposited, including collateralOnly deposit\\n    function getUserCollateralAmount(\\n        ISilo.AssetStorage memory _assetStates,\\n        uint256 _userCollateralTokenBalance,\\n        uint256 _userCollateralOnlyTokenBalance,\\n        uint256 _rcomp,\\n        ISiloRepository _siloRepository\\n    ) internal view returns (uint256) {\\n        uint256 assetAmount = _userCollateralTokenBalance == 0 ? 0 : _userCollateralTokenBalance.toAmount(\\n            totalDepositsWithInterest(_assetStates.totalDeposits, _siloRepository.protocolShareFee(), _rcomp),\\n            _assetStates.collateralToken.totalSupply()\\n        );\\n\\n        uint256 assetCollateralOnlyAmount = _userCollateralOnlyTokenBalance == 0\\n            ? 0\\n            : _userCollateralOnlyTokenBalance.toAmount(\\n                _assetStates.collateralOnlyDeposits,\\n                _assetStates.collateralOnlyToken.totalSupply()\\n            );\\n\\n        return assetAmount + assetCollateralOnlyAmount;\\n    }\\n\\n    /// @notice Get amount of borrowed token\\n    /// @param _assetStates state of borrowed asset in Silo\\n    /// @param _user user wallet address for which to read debt\\n    /// @param _rcomp compounded interest rate to account for during calculations, could be 0\\n    /// @return amount of borrowed token\\n    function getUserBorrowAmount(ISilo.AssetStorage memory _assetStates, address _user, uint256 _rcomp)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        uint256 balance = _assetStates.debtToken.balanceOf(_user);\\n        if (balance == 0) return 0;\\n\\n        uint256 totalBorrowAmountCached = totalBorrowAmountWithInterest(_assetStates.totalBorrowAmount, _rcomp);\\n        return balance.toAmountRoundUp(totalBorrowAmountCached, _assetStates.debtToken.totalSupply());\\n    }\\n\\n    /// @notice Get compounded interest rate from the model\\n    /// @param _silo Silo address\\n    /// @param _siloRepository SiloRepository address\\n    /// @param _asset address of asset for which to read interest rate\\n    /// @param _timestamp used to determine amount of time from last rate update\\n    /// @return rcomp compounded interest rate for an asset\\n    function getRcomp(ISilo _silo, ISiloRepository _siloRepository, address _asset, uint256 _timestamp)\\n        internal\\n        view\\n        returns (uint256 rcomp)\\n    {\\n        IInterestRateModel model = _siloRepository.getInterestRateModel(address(_silo), _asset);\\n        rcomp = model.getCompoundInterestRate(address(_silo), _asset, _timestamp);\\n    }\\n\\n    /// @notice Returns total deposits with interest dynamically calculated with the provided rComp\\n    /// @param _assetTotalDeposits total deposits for asset\\n    /// @param _protocolShareFee `siloRepository.protocolShareFee()`\\n    /// @param _rcomp compounded interest rate\\n    /// @return _totalDepositsWithInterests total deposits amount with interest\\n    function totalDepositsWithInterest(uint256 _assetTotalDeposits, uint256 _protocolShareFee, uint256 _rcomp)\\n        internal\\n        pure\\n        returns (uint256 _totalDepositsWithInterests)\\n    {\\n        uint256 depositorsShare = _PRECISION_DECIMALS - _protocolShareFee;\\n\\n        return _assetTotalDeposits + _assetTotalDeposits * _rcomp / _PRECISION_DECIMALS * depositorsShare /\\n            _PRECISION_DECIMALS;\\n    }\\n\\n    /// @notice Returns total borrow amount with interest dynamically calculated with the provided rComp\\n    /// @param _totalBorrowAmount total borrow amount\\n    /// @param _rcomp compounded interest rate\\n    /// @return totalBorrowAmountWithInterests total borrow amount with interest\\n    function totalBorrowAmountWithInterest(uint256 _totalBorrowAmount, uint256 _rcomp)\\n        internal\\n        pure\\n        returns (uint256 totalBorrowAmountWithInterests)\\n    {\\n        totalBorrowAmountWithInterests = _totalBorrowAmount + _totalBorrowAmount * _rcomp / _PRECISION_DECIMALS;\\n    }\\n\\n    /// @notice Calculates protocol liquidation fee and new protocol total fees collected\\n    /// @param _protocolEarnedFees amount of total collected fees so far\\n    /// @param _amount amount on which we will apply fee\\n    /// @param _liquidationFee liquidation fee in Solvency._PRECISION_DECIMALS\\n    /// @return liquidationFeeAmount calculated interest\\n    /// @return newProtocolEarnedFees the new total amount of protocol fees\\n    function calculateLiquidationFee(uint256 _protocolEarnedFees, uint256 _amount, uint256 _liquidationFee)\\n        internal\\n        pure\\n        returns (uint256 liquidationFeeAmount, uint256 newProtocolEarnedFees)\\n    {\\n        unchecked {\\n            // If we overflow on multiplication it should not revert tx, we will get lower fees\\n            liquidationFeeAmount = _amount * _liquidationFee / Solvency._PRECISION_DECIMALS;\\n\\n            if (_protocolEarnedFees > type(uint256).max - liquidationFeeAmount) {\\n                newProtocolEarnedFees = type(uint256).max;\\n                liquidationFeeAmount = type(uint256).max - _protocolEarnedFees;\\n            } else {\\n                newProtocolEarnedFees = _protocolEarnedFees + liquidationFeeAmount;\\n            }\\n        }\\n    }\\n\\n    /// @notice Calculates theoretical value (in quote token) that user could borrow based given collateral value\\n    /// @param _siloRepository SiloRepository address\\n    /// @param _silo Silo address\\n    /// @param _asset address of collateral token\\n    /// @param _type type of LTV limit to use for calculations\\n    /// @param _collateralValue value of collateral deposit (in quote token)\\n    /// @return availableToBorrow value (in quote token) that user can borrow against collateral value\\n    function _getAvailableToBorrowValue(\\n        ISiloRepository _siloRepository,\\n        address _silo,\\n        address _asset,\\n        TypeofLTV _type,\\n        uint256 _collateralValue\\n    ) private view returns (uint256 availableToBorrow) {\\n        uint256 assetLTV;\\n\\n        if (_type == TypeofLTV.MaximumLTV) {\\n            assetLTV = _siloRepository.getMaximumLTV(_silo, _asset);\\n        } else if (_type == TypeofLTV.LiquidationThreshold) {\\n            assetLTV = _siloRepository.getLiquidationThreshold(_silo, _asset);\\n        } else {\\n            revert UnsupportedLTVType();\\n        }\\n\\n        // value that can be borrowed against the deposit\\n        // ie. for assetLTV = 50%, 1 ETH * 50% = 0.5 ETH of available to borrow\\n        availableToBorrow = _collateralValue * assetLTV / _PRECISION_DECIMALS;\\n    }\\n\\n    /// @notice Calculates theoretical value (in quote token) that user can borrow based on deposited collateral\\n    /// @param _siloRepository SiloRepository address\\n    /// @param _silo Silo address\\n    /// @param _assets array with assets\\n    /// @param _ltvType type of LTV limit to use for calculations\\n    /// acceptable values are only TypeofLTV.MaximumLTV or TypeofLTV.LiquidationThreshold\\n    /// @param _collateralValues value (worth in quote token) of each deposit made by user\\n    /// @return totalAvailableToBorrowValue value (in quote token) that user can borrow against collaterals\\n    function _getTotalAvailableToBorrowValue(\\n        ISiloRepository _siloRepository,\\n        address _silo,\\n        address[] memory _assets,\\n        TypeofLTV _ltvType,\\n        uint256[] memory _collateralValues\\n    ) private view returns (uint256 totalAvailableToBorrowValue) {\\n        if (_assets.length != _collateralValues.length) revert DifferentArrayLength();\\n\\n        for (uint256 i = 0; i < _assets.length; i++) {\\n            totalAvailableToBorrowValue += _getAvailableToBorrowValue(\\n                _siloRepository,\\n                _silo,\\n                _assets[i],\\n                _ltvType,\\n                _collateralValues[i]\\n            );\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe395d7ef5e8d8a67fc3b308e677f10d70348d5c182371f83db1f37279b76890b\",\"license\":\"BUSL-1.1\"},\"contracts/lib/TokenHelper.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.13;\\n\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\n\\n\\nlibrary TokenHelper {\\n    uint256 private constant _BYTES32_SIZE = 32;\\n\\n    error TokenIsNotAContract();\\n\\n    function assertAndGetDecimals(address _token) internal view returns (uint256) {\\n        (bool hasMetadata, bytes memory data) = _tokenMetadataCall(_token, abi.encodeCall(IERC20Metadata.decimals,()));\\n\\n        // decimals() is optional in the ERC20 standard, so if metadata is not accessible\\n        // we assume there are no decimals and use 0.\\n        if (!hasMetadata) {\\n            return 0;\\n        }\\n\\n        return abi.decode(data, (uint8));\\n    }\\n\\n    /// @dev Returns the symbol for the provided ERC20 token.\\n    /// An empty string is returned if the call to the token didn't succeed.\\n    /// @param _token address of the token to get the symbol for\\n    /// @return assetSymbol the token symbol\\n    function symbol(address _token) internal view returns (string memory assetSymbol) {\\n        (bool hasMetadata, bytes memory data) = _tokenMetadataCall(_token, abi.encodeCall(IERC20Metadata.symbol,()));\\n\\n        if (!hasMetadata || data.length == 0) {\\n            return \\\"?\\\";\\n        } else if (data.length == _BYTES32_SIZE) {\\n            return string(removeZeros(data));\\n        } else {\\n            return abi.decode(data, (string));\\n        }\\n    }\\n\\n    /// @dev Removes bytes with value equal to 0 from the provided byte array.\\n    /// @param _data byte array from which to remove zeroes\\n    /// @return result byte array with zeroes removed \\n    function removeZeros(bytes memory _data) internal pure returns (bytes memory result) {\\n        uint256 n = _data.length;\\n\\n        unchecked {\\n            for (uint256 i; i < n; i++) {\\n                if (_data[i] == 0) continue;\\n\\n                result = abi.encodePacked(result, _data[i]);\\n            }\\n        }\\n    }\\n\\n    /// @dev Performs a staticcall to the token to get its metadata (symbol, decimals, name)\\n    function _tokenMetadataCall(address _token, bytes memory _data) private view returns(bool, bytes memory) {\\n        // We need to do this before the call, otherwise the call will succeed even for EOAs\\n        if (!Address.isContract(_token)) revert TokenIsNotAContract();\\n\\n        (bool success, bytes memory result) = _token.staticcall(_data);\\n\\n        // If the call reverted we assume the token doesn't follow the metadata extension\\n        if (!success) {\\n            return (false, \\\"\\\");\\n        }\\n\\n        return (true, result);\\n    }\\n}\\n\",\"keccak256\":\"0x7e65c9647420e686cc897b3426cd94840cd42b25cc0a647e4bcdf45897fe6743\",\"license\":\"BUSL-1.1\"},\"contracts/utils/GuardedLaunch.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.13;\\n\\nimport \\\"../interfaces/IGuardedLaunch.sol\\\";\\nimport \\\"./TwoStepOwnable.sol\\\";\\nimport \\\"./Manageable.sol\\\";\\n\\n/// @title GuardedLaunch\\n/// @notice Implements security and risk averse functions for Silo\\n/// @dev This contract is meant to limit Silo functionality for Beta Release in order to minimize any damage\\n/// of potential critical vulnerability.\\n/// @custom:security-contact security@silo.finance\\ncontract GuardedLaunch is IGuardedLaunch, TwoStepOwnable, Manageable {\\n    uint256 private constant _INFINITY = type(uint256).max;\\n\\n    /// @dev Initial value for defaultMaxLiquidity is 250 quote tokens\\n    uint256 private constant _INITIAL_MAX_LIQUIDITY = 250 * 1e18;\\n\\n    /// @dev stores max liquidity config\\n    MaxLiquidityLimit public maxLiquidity;\\n\\n    /// @dev stores pause config\\n    Paused public isPaused;\\n\\n    error GlobalLimitDidNotChange();\\n    error GlobalPauseDidNotChange();\\n    error MaxLiquidityDidNotChange();\\n    error SiloMaxLiquidityDidNotChange();\\n    error SiloPauseDidNotChange();\\n\\n    constructor() Manageable(msg.sender) {\\n        maxLiquidity.globalLimit = true;\\n\\n        maxLiquidity.defaultMaxLiquidity = _INITIAL_MAX_LIQUIDITY;\\n    }\\n\\n    /// @inheritdoc IGuardedLaunch\\n    function setLimitedMaxLiquidity(bool _globalLimit) external onlyManager override {\\n        if (maxLiquidity.globalLimit == _globalLimit) revert GlobalLimitDidNotChange();\\n\\n        maxLiquidity.globalLimit = _globalLimit;\\n        emit LimitedMaxLiquidityToggled(maxLiquidity.globalLimit);\\n    }\\n\\n    /// @inheritdoc IGuardedLaunch\\n    function setDefaultSiloMaxDepositsLimit(uint256 _maxDeposits) external onlyManager override {\\n        if (maxLiquidity.defaultMaxLiquidity == _maxDeposits) {\\n            revert MaxLiquidityDidNotChange();\\n        }\\n\\n        maxLiquidity.defaultMaxLiquidity = _maxDeposits;\\n        emit DefaultSiloMaxDepositsLimitUpdate(_maxDeposits);\\n    }\\n\\n    /// @inheritdoc IGuardedLaunch\\n    function setSiloMaxDepositsLimit(\\n        address _silo,\\n        address _asset,\\n        uint256 _maxDeposits\\n    ) external onlyManager override {\\n        if (maxLiquidity.siloMaxLiquidity[_silo][_asset] == _maxDeposits) {\\n            revert SiloMaxLiquidityDidNotChange();\\n        }\\n\\n        maxLiquidity.siloMaxLiquidity[_silo][_asset] = _maxDeposits;\\n        emit SiloMaxDepositsLimitsUpdate(_silo, _asset, _maxDeposits);\\n    }\\n\\n    /// @inheritdoc IGuardedLaunch\\n    function setGlobalPause(bool _globalPause) external onlyManager override {\\n        if (isPaused.globalPause == _globalPause) revert GlobalPauseDidNotChange();\\n\\n        isPaused.globalPause = _globalPause;\\n        emit GlobalPause(_globalPause);\\n    }\\n\\n    /// @inheritdoc IGuardedLaunch\\n    function setSiloPause(address _silo, address _asset, bool _pauseValue) external onlyManager override {\\n        if (isPaused.siloPause[_silo][_asset] == _pauseValue) {\\n            revert SiloPauseDidNotChange();\\n        }\\n\\n        isPaused.siloPause[_silo][_asset] = _pauseValue;\\n        emit SiloPause(_silo, _asset, _pauseValue);\\n    }\\n\\n    /// @inheritdoc IGuardedLaunch\\n    function isSiloPaused(address _silo, address _asset) external view override returns (bool) {\\n        return isPaused.globalPause || isPaused.siloPause[_silo][address(0)] || isPaused.siloPause[_silo][_asset];\\n    }\\n\\n    /// @inheritdoc IGuardedLaunch\\n    function getMaxSiloDepositsValue(address _silo, address _asset) external view override returns (uint256) {\\n        if (maxLiquidity.globalLimit) {\\n            uint256 maxDeposits = maxLiquidity.siloMaxLiquidity[_silo][_asset];\\n            if (maxDeposits != 0) {\\n                return maxDeposits;\\n            }\\n            return maxLiquidity.defaultMaxLiquidity;\\n        }\\n        return _INFINITY;\\n    }\\n\\n    /// @dev Returns the address of the current owner.\\n    function owner() public view override(TwoStepOwnable, Manageable) virtual returns (address) {\\n        return TwoStepOwnable.owner();\\n    }\\n}\\n\",\"keccak256\":\"0x6b79be1182eeb90551218b2ab307e4efa0691e1206e4813cc3b35df5abbdf1d4\",\"license\":\"BUSL-1.1\"},\"contracts/utils/LiquidationReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.13;\\n\\n/// @dev This is cloned solution of @openzeppelin/contracts/security/ReentrancyGuard.sol\\nabstract contract LiquidationReentrancyGuard {\\n    error LiquidationReentrancyCall();\\n\\n    uint256 private constant _LIQUIDATION_NOT_ENTERED = 1;\\n    uint256 private constant _LIQUIDATION_ENTERED = 2;\\n\\n    uint256 private _liquidationStatus;\\n\\n    modifier liquidationNonReentrant() {\\n        if (_liquidationStatus == _LIQUIDATION_ENTERED) {\\n            revert LiquidationReentrancyCall();\\n        }\\n\\n        _liquidationStatus = _LIQUIDATION_ENTERED;\\n\\n        _;\\n\\n        _liquidationStatus = _LIQUIDATION_NOT_ENTERED;\\n    }\\n\\n    constructor() {\\n        _liquidationStatus = _LIQUIDATION_NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x476239f2ec536f87cb4f783e02307172662fee5ad7b6d66ce6194e3fb2a51b7f\",\"license\":\"BUSL-1.1\"},\"contracts/utils/Manageable.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.13;\\n\\n/// @title Manageable\\n/// @notice Implements simple manager role that can be changed by a manger or external owner role\\n/// @dev This contract is designed to work with Ownable from openzeppelin\\n/// @custom:security-contact security@silo.finance\\nabstract contract Manageable {\\n    /// @notice wallet address of manager role\\n    address private _managerRole;\\n\\n    /// @notice Emitted when manager is changed\\n    /// @param manager new manager address\\n    event ManagerChanged(address manager);\\n\\n    error ManagerIsZero();\\n    error OnlyManager();\\n    error OnlyOwnerOrManager();\\n    error ManagerDidNotChange();\\n\\n    modifier onlyManager() {\\n        if (_managerRole != msg.sender) revert OnlyManager();\\n        _;\\n    }\\n\\n    /// @param _manager new manager address\\n    constructor(address _manager) {\\n        if (_manager == address(0)) revert ManagerIsZero();\\n\\n        _managerRole = _manager;\\n    }\\n\\n    /// @notice Change manager address\\n    /// @dev Callable by manager or external owner role\\n    /// @param _manager new manager address\\n    function changeManager(address _manager) external {\\n        if (msg.sender != owner() && msg.sender != _managerRole) {\\n            revert OnlyOwnerOrManager();\\n        }\\n\\n        if (_manager == address(0)) revert ManagerIsZero();\\n        if (_manager == _managerRole) revert ManagerDidNotChange();\\n\\n        _managerRole = _manager;\\n        emit ManagerChanged(_manager);\\n    }\\n\\n    function manager() public view virtual returns (address) {\\n        return _managerRole;\\n    }\\n\\n    /// @notice Gets external owner role\\n    /// @return owner address\\n    function owner() public view virtual returns (address);\\n}\\n\",\"keccak256\":\"0x1df1f33a3158b634af38cf2a1ea838c5ab37962afba4339f0bb5e501751e0fbd\",\"license\":\"BUSL-1.1\"},\"contracts/utils/TwoStepOwnable.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity >=0.7.6 <0.9.0;\\n\\n/// @title TwoStepOwnable\\n/// @notice Contract that implements the same functionality as popular Ownable contract from openzeppelin library.\\n/// The only difference is that it adds a possibility to transfer ownership in two steps. Single step ownership\\n/// transfer is still supported.\\n/// @dev Two step ownership transfer is meant to be used by humans to avoid human error. Single step ownership\\n/// transfer is meant to be used by smart contracts to avoid over-complicated two step integration. For that reason,\\n/// both ways are supported.\\nabstract contract TwoStepOwnable {\\n    /// @dev current owner\\n    address private _owner;\\n    /// @dev candidate to an owner\\n    address private _pendingOwner;\\n\\n    /// @notice Emitted when ownership is transferred on `transferOwnership` and `acceptOwnership`\\n    /// @param newOwner new owner\\n    event OwnershipTransferred(address indexed newOwner);\\n    /// @notice Emitted when ownership transfer is proposed, aka pending owner is set\\n    /// @param newPendingOwner new proposed/pending owner\\n    event OwnershipPending(address indexed newPendingOwner);\\n\\n    /**\\n     *  error OnlyOwner();\\n     *  error OnlyPendingOwner();\\n     *  error OwnerIsZero();\\n     */\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        if (owner() != msg.sender) revert(\\\"OnlyOwner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(msg.sender);\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) revert(\\\"OwnerIsZero\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers pending ownership of the contract to a new account (`newPendingOwner`) and clears any existing\\n     * pending ownership.\\n     * Can only be called by the current owner.\\n     */\\n    function transferPendingOwnership(address newPendingOwner) public virtual onlyOwner {\\n        _setPendingOwner(newPendingOwner);\\n    }\\n\\n    /**\\n     * @dev Clears the pending ownership.\\n     * Can only be called by the current owner.\\n     */\\n    function removePendingOwnership() public virtual onlyOwner {\\n        _setPendingOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a pending owner\\n     * Can only be called by the pending owner.\\n     */\\n    function acceptOwnership() public virtual {\\n        if (msg.sender != pendingOwner()) revert(\\\"OnlyPendingOwner\\\");\\n        _setOwner(pendingOwner());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the pending owner.\\n     */\\n    function pendingOwner() public view virtual returns (address) {\\n        return _pendingOwner;\\n    }\\n\\n    /**\\n     * @dev Sets the new owner and emits the corresponding event.\\n     */\\n    function _setOwner(address newOwner) private {\\n        if (_owner == newOwner) revert(\\\"OwnerDidNotChange\\\");\\n\\n        _owner = newOwner;\\n        emit OwnershipTransferred(newOwner);\\n\\n        if (_pendingOwner != address(0)) {\\n            _setPendingOwner(address(0));\\n        }\\n    }\\n\\n    /**\\n     * @dev Sets the new pending owner and emits the corresponding event.\\n     */\\n    function _setPendingOwner(address newPendingOwner) private {\\n        if (_pendingOwner == newPendingOwner) revert(\\\"PendingOwnerDidNotChange\\\");\\n\\n        _pendingOwner = newPendingOwner;\\n        emit OwnershipPending(newPendingOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xeda289312a3dfe253df601ac8a3ddda1c95ee9f9985a80a4f91adbf3f303c1d7\",\"license\":\"BUSL-1.1\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106103995760003560e01c80636645fd67116101e9578063c2fa74941161010f578063ed4c8bb3116100ad578063f2fde38b1161007c578063f2fde38b14610966578063f45f268214610979578063f887ea401461098c578063fa2a06391461099f57600080fd5b8063ed4c8bb3146108fa578063ed9407401461090d578063ee306a3414610920578063f297692a1461092857600080fd5b8063cc1fdf16116100e9578063cc1fdf16146108a9578063e30c3978146108bc578063e99ed41d146108cd578063eafecffa146108e257600080fd5b8063c2fa749414610870578063c552b7e014610883578063c96fad281461089657600080fd5b806379ba509711610187578063b187bd2611610156578063b187bd261461082a578063b310db2214610837578063ba0d69d31461084a578063c0d786551461085d57600080fd5b806379ba5097146107ab5780638da5cb5b146107b35780639af1d35a146107c4578063a3fbbaae1461081757600080fd5b80636a082764116101c35780636a0827641461073f57806370c0345c14610752578063715018a61461077a578063791183d11461078257600080fd5b80636645fd6714610706578063685f628a1461071957806369a6b3db1461072c57600080fd5b8063296041ea116102ce578063481c6a751161026c57806356fecf1a1161023b57806356fecf1a146106ba5780635ddf2be3146106cd5780635e46bea5146106e05780635f37af9e146106f357600080fd5b8063481c6a751461067057806348b3eabc146106815780634fbc58951461069457806355a2cc71146106a757600080fd5b806332936c44116102a857806332936c4414610619578063342d68c61461062c57806344552b5d1461065557806344cf3e931461065d57600080fd5b8063296041ea146105de5780632cd5f317146105f35780633278c6941461060657600080fd5b806315c3c2d11161033b57806319afb8981161031557806319afb8981461055f5780631b3665331461057257806325ed3d441461058557806327d434161461059d57600080fd5b806315c3c2d1146105105780631893ea141461052357806318b461721461053657600080fd5b806307e930331161037757806307e93033146104525780630b9290581461049357806312d04a42146104bf57806312f0dcd8146104d257600080fd5b806301d6b8131461039e57806304ab688414610422578063072ea61c14610437575b600080fd5b6103ee6103ac366004612fd8565b6015602090815260009283526040808420909152908252902080546001909101546001600160401b0380831692600160401b900416906001600160a01b031683565b604080516001600160401b0394851681529390921660208401526001600160a01b0316908201526060015b60405180910390f35b610435610430366004613026565b6109b2565b005b600a546001600160401b03165b604051908152602001610419565b61047b610460366004613043565b6012602052600090815260409020546001600160a01b031681565b6040516001600160a01b039091168152602001610419565b6008546009546103ee916001600160401b0380821692600160401b90920416906001600160a01b031683565b6104446104cd366004612fd8565b610ae3565b6105006104e036600461305c565b6001600160a01b0390811660009081526014602052604090205416151590565b6040519015158152602001610419565b61043561051e36600461305c565b610b39565b610435610531366004612fd8565b610c2a565b61047b61054436600461305c565b6013602052600090815260409020546001600160a01b031681565b61043561056d36600461305c565b610d36565b610435610580366004613087565b610f47565b600a54600160401b90046001600160401b0316610444565b6105c66105ab36600461305c565b6010602052600090815260409020546001600160801b031681565b6040516001600160801b039091168152602001610419565b6105e6611034565b60405161041991906130d2565b61043561060136600461305c565b611045565b61043561061436600461305c565b611261565b610444610627366004612fd8565b6112a3565b61047b61063a36600461305c565b6011602052600090815260409020546001600160a01b031681565b610435611303565b61050061066b366004612fd8565b611348565b6002546001600160a01b031661047b565b61047b61068f366004612fd8565b6113b6565b6104356106a236600461311f565b6113f8565b6104356106b536600461314d565b61158e565b6104356106c8366004613043565b611631565b600c5461047b906001600160a01b031681565b600e5461047b906001600160a01b031681565b61047b610701366004613228565b6116b4565b61043561071436600461311f565b611747565b61043561072736600461305c565b6117de565b61043561073a36600461314d565b6118cf565b61043561074d366004613287565b611966565b6003546004546107639160ff169082565b604080519215158352602083019190915201610419565b610435611a3c565b61047b61079036600461305c565b6014602052600090815260409020546001600160a01b031681565b610435611a7f565b6000546001600160a01b031661047b565b600a546107ed906001600160401b0380821691600160401b8104821691600160801b9091041683565b604080516001600160401b0394851681529284166020840152921691810191909152606001610419565b61043561082536600461305c565b611ae6565b6006546105009060ff1681565b6104356108453660046132a2565b611bce565b6104356108583660046132ef565b611d20565b61043561086b36600461305c565b612069565b61044461087e366004612fd8565b61215a565b610435610891366004613337565b6121ac565b6104356108a4366004613287565b612409565b600b5461047b906001600160a01b031681565b6001546001600160a01b031661047b565b60405163e99ed41d60e01b8152602001610419565b600a54600160801b90046001600160401b0316610444565b61043561090836600461305c565b61250b565b61043561091b366004613026565b6125ce565b6105e66126fa565b600f54610946906001600160801b0380821691600160801b90041682565b604080516001600160801b03938416815292909116602083015201610419565b61043561097436600461305c565b612706565b61047b610987366004613353565b61278c565b600d5461047b906001600160a01b031681565b6104356109ad3660046133a2565b6127dd565b6008546001600160401b0380831691600160401b900416670de0b6b3a764000081106109f05760405162f9474b60e61b815260040160405180910390fd5b8115806109fd5750808210155b15610a1b57604051632f2a24a960e11b815260040160405180910390fd5b33610a2e6000546001600160a01b031690565b6001600160a01b031614610a5d5760405162461bcd60e51b8152600401610a54906133e3565b60405180910390fd5b6008546001600160401b03808516911603610a8b57604051634b8bb4c160e01b815260040160405180910390fd5b6008805467ffffffffffffffff19166001600160401b0385169081179091556040519081527ff24256d9766456ecc09aacd623be7d6c4aea837de6d33aa190f39b6dfc9f58ce906020015b60405180910390a1505050565b60035460009060ff1615610b2e576001600160a01b038084166000908152600560209081526040808320938616835292905220548015610b24579050610b33565b5050600454610b33565b506000195b92915050565b33610b4c6000546001600160a01b031690565b6001600160a01b031614610b725760405162461bcd60e51b8152600401610a54906133e3565b610b89816001600160a01b031663eec3e6a76128af565b610ba65760405163057faf4d60e31b815260040160405180910390fd5b600c546001600160a01b03808316911603610bd457604051633ef9374960e01b815260040160405180910390fd5b6040516001600160a01b038216907f62277ad8137ec819c909a28dd0b1fe8f7facf9fe4f4596f71c35fb1179de751c90600090a2600c80546001600160a01b0319166001600160a01b0392909216919091179055565b33610c3d6000546001600160a01b031690565b6001600160a01b031614610c635760405162461bcd60e51b8152600401610a54906133e3565b610c7a816001600160a01b03166311279b4a6128af565b610c975760405163ee60b28160e01b815260040160405180910390fd5b6001600160a01b03828116600090815260116020526040902054818316911603610cd457604051635099b97f60e01b815260040160405180910390fd5b6040516001600160a01b038216907f8ac70028cbcdf11017e87b22003359f7577da04d0880c74ae3289a9029bef6a990600090a26001600160a01b03918216600090815260116020526040902080546001600160a01b03191691909216179055565b33610d496000546001600160a01b031690565b6001600160a01b031614610d6f5760405162461bcd60e51b8152600401610a54906133e3565b6001600160a01b038116610d9657604051631e84cbc160e31b815260040160405180910390fd5b610da060166129bd565b600103610dc05760405163437f484960e01b815260040160405180910390fd5b610dcb6016826129c7565b610de8576040516343e7dd2f60e01b815260040160405180910390fd5b610df36018826129a2565b506040516001600160a01b038216907f780c06b06ab07a0d47596bc3082bbd3f7ecc1907ff035c3ea0e2a1602876a52b90600090a26001600160a01b03808216600090815260136020526040902054168015610edb57806001600160a01b031663a388991b6040518163ffffffff1660e01b8152600401600060405180830381600087803b158015610e8457600080fd5b505af1158015610e98573d6000803e3d6000fd5b5050600e80546001600160a01b031916905550506040516000907f41df3a85176fe451d19027e7b43ecc444bc299ef0d82c2b3874fbc7441d62884908290a25050565b600e546001600160a01b03168015610f4157806001600160a01b031663a388991b6040518163ffffffff1660e01b8152600401600060405180830381600087803b158015610f2857600080fd5b505af1158015610f3c573d6000803e3d6000fd5b505050505b50505b50565b6002546001600160a01b03163314610f725760405163605919ad60e11b815260040160405180910390fd5b6001600160a01b0380841660009081526007602090815260408083209386168352929052205481151560ff909116151503610fc05760405163715c41ad60e01b815260040160405180910390fd5b6001600160a01b03838116600081815260076020908152604080832094871680845294825291829020805460ff19168615159081179091558251938452908301939093528101919091527f25679bcc320e874c367bc177e782eec47457781ade29259bcea7c3f1fd5c3ef590606001610ad6565b606061104060186129dc565b905090565b336110586000546001600160a01b031690565b6001600160a01b03161461107e5760405162461bcd60e51b8152600401610a54906133e3565b600c546040516350ebbcc160e01b81526001600160a01b038381166004830152909116906350ebbcc190602401602060405180830381865afa1580156110c8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110ec9190613406565b61110957604051630241d97f60e11b815260040160405180910390fd5b61111281612935565b5061111e6016826129a2565b61113b57604051635ed2680160e01b815260040160405180910390fd5b6111466018826129c7565b506040516001600160a01b038216907fda0511750b81a254e0b084c2c863785e3d1c5b2b989afd8ac0e884f8ee2e033c90600090a26001600160a01b03808216600090815260136020526040902054600e5490821691168115611217576001600160a01b038116156111cb57604051631e0b881960e31b815260040160405180910390fd5b50600e80546001600160a01b0319166001600160a01b0383169081179091556040518291907f41df3a85176fe451d19027e7b43ecc444bc299ef0d82c2b3874fbc7441d6288490600090a25b6001600160a01b03811615610f4157806001600160a01b031663a388991b6040518163ffffffff1660e01b8152600401600060405180830381600087803b158015610f2857600080fd5b336112746000546001600160a01b031690565b6001600160a01b03161461129a5760405162461bcd60e51b8152600401610a54906133e3565b610f44816129e9565b6001600160a01b038281166000908152601560209081526040808320938516835292905290812054600160401b90046001600160401b031680156112e8579050610b33565b5050600854600160401b90046001600160401b031692915050565b336113166000546001600160a01b031690565b6001600160a01b03161461133c5760405162461bcd60e51b8152600401610a54906133e3565b61134660006129e9565b565b60065460009060ff168061137f57506001600160a01b038316600090815260076020908152604080832083805290915290205460ff165b806113af57506001600160a01b0380841660009081526007602090815260408083209386168352929052205460ff165b9392505050565b6001600160a01b03808316600090815260156020908152604080832085851684529091529020600101541680610b3357506009546001600160a01b0316610b33565b3361140b6000546001600160a01b031690565b6001600160a01b0316146114315760405162461bcd60e51b8152600401610a54906133e3565b611448826001600160a01b0316635a0c4de46128af565b61146557604051637b64d2bb60e11b815260040160405180910390fd5b60408051808201909152600f546001600160801b038082168352600160801b909104166020820181815260019161149d908390613439565b6001600160801b0390811690915260208381018051831660009081526012835260409081902080546001600160a01b0319166001600160a01b038a1690811790915591518651825191861682529094169284019290925292507f3878761190f637385b15245770921955dbd3f3652f86d6bdfcb0a6afe81db04f910160405180910390a2811561156b576020818101516001600160801b03168083526040519081527f723c9edacabd261ad9586f194e9d5409ac4b22c939d90a8db99556690018bfe0910160405180910390a15b80516020909101516001600160801b03908116600160801b02911617600f555050565b6002546001600160a01b031633146115b95760405163605919ad60e11b815260040160405180910390fd5b60035481151560ff9091161515036115e45760405163c65b3d2960e01b815260040160405180910390fd5b6003805460ff191682151590811790915560405160ff909116151581527eace7bfa8dc4895fea42b63dd0304a5b26ee0982b8d764257b6b106b11a4541906020015b60405180910390a150565b6002546001600160a01b0316331461165c5760405163605919ad60e11b815260040160405180910390fd5b60045481900361167f57604051633225cebb60e01b815260040160405180910390fd5b60048190556040518181527f5b71e2324e73b2492a36b7c5f86de1bd745d891c29c3fa39e1ed97960a259eb390602001611626565b6000336116c96000546001600160a01b031690565b6001600160a01b0316146116ef5760405162461bcd60e51b8152600401610a54906133e3565b6001600160a01b0380851660009081526013602052604090205416806117285760405163ccacf28760e01b815260040160405180910390fd5b61173e8585611738601683612a90565b86612ab2565b95945050505050565b6001600160a01b03828116600090815260136020526040902054161561178057604051630907ddeb60e41b815260040160405180910390fd5b80156117da57600e546001600160a01b0316156117b057604051631e0b881960e31b815260040160405180910390fd5b6117ba60166129bd565b6001036117da57604051635dc8364160e11b815260040160405180910390fd5b5050565b336117f16000546001600160a01b031690565b6001600160a01b0316146118175760405162461bcd60e51b8152600401610a54906133e3565b61182e816001600160a01b031663c42401f16128af565b61184b5760405163ee39b72560e01b815260040160405180910390fd5b6009546001600160a01b0380831691160361187957604051630465d63560e01b815260040160405180910390fd5b6040516001600160a01b038216907fd196f9719fb4ff43e12fe6d14f3ab40fa45e350b24e2626b9504d055600f0c0790600090a2600980546001600160a01b0319166001600160a01b0392909216919091179055565b6002546001600160a01b031633146118fa5760405163605919ad60e11b815260040160405180910390fd5b60065481151560ff90911615150361192557604051634ad6576f60e01b815260040160405180910390fd5b6006805460ff19168215159081179091556040519081527fa5fea31b6dbd7aec6098ca4653b1d51af1ef786fcb19031c4c4e55b675535f1e90602001611626565b336119796000546001600160a01b031690565b6001600160a01b03161461199f5760405162461bcd60e51b8152600401610a54906133e3565b6001600160801b0381166000908152601260205260409020546001600160a01b03166119de57604051630d15fae960e01b815260040160405180910390fd5b6040516001600160801b03821681527f723c9edacabd261ad9586f194e9d5409ac4b22c939d90a8db99556690018bfe09060200160405180910390a1600f80546001600160801b0319166001600160801b0392909216919091179055565b33611a4f6000546001600160a01b031690565b6001600160a01b031614611a755760405162461bcd60e51b8152600401610a54906133e3565b6113466000612cc0565b6001546001600160a01b03163314611acc5760405162461bcd60e51b815260206004820152601060248201526f27b7363ca832b73234b733a7bbb732b960811b6044820152606401610a54565b611346611ae16001546001600160a01b031690565b612cc0565b6000546001600160a01b03163314801590611b0c57506002546001600160a01b03163314155b15611b2a5760405163b647320d60e01b815260040160405180910390fd5b6001600160a01b038116611b5157604051639c774ebf60e01b815260040160405180910390fd5b6002546001600160a01b0390811690821603611b8057604051632ebe652b60e21b815260040160405180910390fd5b600280546001600160a01b0319166001600160a01b0383169081179091556040519081527f198db6e425fb8aafd1823c6ca50be2d51e5764571a5ae0f0f21c6812e45def0b90602001611626565b33611be16000546001600160a01b031690565b6001600160a01b031614611c075760405162461bcd60e51b8152600401610a54906133e3565b6001600160a01b0382166000908152601060205260409020546001600160801b03808316911603611c4b5760405163f55015b160e01b815260040160405180910390fd5b6001600160801b03811615801590611c8257506001600160801b0381166000908152601260205260409020546001600160a01b0316155b15611ca057604051634eb171af60e01b815260040160405180910390fd5b6040516001600160801b03821681526001600160a01b038316907fb958cbba2ceb00710b20b9f7b874ecdef41b643e87f3ad9affe0d7739d6c919a9060200160405180910390a26001600160a01b0391909116600090815260106020526040902080546001600160801b0319166001600160801b03909216919091179055565b611d2d6020820182613026565b6001600160401b0316611d466040830160208401613026565b6001600160401b0316670de0b6b3a76400008110611d765760405162f9474b60e61b815260040160405180910390fd5b811580611d835750808210155b15611da157604051632f2a24a960e11b815260040160405180910390fd5b33611db46000546001600160a01b031690565b6001600160a01b031614611dda5760405162461bcd60e51b8152600401610a54906133e3565b6001600160a01b038516611e015760405163dfb94ea560e01b815260040160405180910390fd5b6001600160a01b038416611e285760405163281a22f360e11b815260040160405180910390fd5b611e4e611e3b606085016040860161305c565b6001600160a01b031663c42401f16128af565b1580611ec85750611e65606084016040850161305c565b6001600160a01b0316636bcc82166040518163ffffffff1660e01b8152600401602060405180830381865afa158015611ea2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ec69190613464565b155b15611ee65760405163ee39b72560e01b815260040160405180910390fd5b6001600160a01b0380861660009081526015602090815260408083208885168452825291829020825160608101845281546001600160401b038082168352600160401b909104168184015260019091015490931691830191909152611f4d90850185613026565b6001600160401b031681600001516001600160401b0316148015611f955750611f7c6040850160208601613026565b6001600160401b031681602001516001600160401b0316145b8015611fc55750611fac606085016040860161305c565b6001600160a01b031681604001516001600160a01b0316145b15611fe35760405163f485675760e01b815260040160405180910390fd5b846001600160a01b0316866001600160a01b03167fa7e777b5635c66f73eb783f9073900f9ca2dd898e30bc77f81644f1c78aa0dd386604051612026919061347d565b60405180910390a36001600160a01b038087166000908152601560209081526040808320938916835292905220849061205f82826134d4565b5050505050505050565b3361207c6000546001600160a01b031690565b6001600160a01b0316146120a25760405162461bcd60e51b8152600401610a54906133e3565b6120b9816001600160a01b03166325d5bf4e6128af565b6120d657604051632425ecd160e21b815260040160405180910390fd5b600d546001600160a01b0380831691160361210457604051630cdb36f960e41b815260040160405180910390fd5b6040516001600160a01b038216907f66ce7706404042811db82deac21b76e6488aa6e912fd7d57b4cfa3c5a75587ab90600090a2600d80546001600160a01b0319166001600160a01b0392909216919091179055565b6001600160a01b0380831660009081526015602090815260408083209385168352929052908120546001600160401b03168015612198579050610b33565b50506008546001600160401b031692915050565b336121bf6000546001600160a01b031690565b6001600160a01b0316146121e55760405162461bcd60e51b8152600401610a54906133e3565b670de0b6b3a76400006121fb6020830183613026565b6001600160401b03161061222257604051636fe6a4c960e01b815260040160405180910390fd5b670de0b6b3a764000061223b6040830160208401613026565b6001600160401b031610612262576040516361902cb560e01b815260040160405180910390fd5b670de0b6b3a764000061227b6060830160408401613026565b6001600160401b0316106122a2576040516379e1ef2960e01b815260040160405180910390fd5b60408051606081018252600a546001600160401b03808216808452600160401b83048216602080860191909152600160801b909304909116938301939093529091906122f090840184613026565b6001600160401b031614801561232d575080602001516001600160401b03168260200160208101906123229190613026565b6001600160401b0316145b8015612360575080604001516001600160401b03168260400160208101906123559190613026565b6001600160401b0316145b1561237e576040516353c81ab960e11b815260040160405180910390fd5b7f0bb1069a7e7f20128a7b5ab748a6b3da407eacd702a47c82dad3d75c31ac1c496123ac6020840184613026565b6123bc6040850160208601613026565b6123cc6060860160408701613026565b604080516001600160401b039485168152928416602084015292168183015290519081900360600190a181600a612403828261355f565b50505050565b3361241c6000546001600160a01b031690565b6001600160a01b0316146124425760405162461bcd60e51b8152600401610a54906133e3565b6001600160801b0381166000908152601260205260409020546001600160a01b031680158061247e5750600f546001600160801b038381169116145b1561249c57604051634eb171af60e01b815260040160405180910390fd5b6040516001600160801b03831681526001600160a01b038216907f8bc0514e0cb2bd11d5786d5c8f856fb52056d319fc42c4a895807965a4f7791c9060200160405180910390a2506001600160801b0316600090815260126020526040902080546001600160a01b0319169055565b3361251e6000546001600160a01b031690565b6001600160a01b0316146125445760405162461bcd60e51b8152600401610a54906133e3565b61255b816001600160a01b0316636849100f6128af565b61257857604051630307663d60e61b815260040160405180910390fd5b6040516001600160a01b038216907f2cf3169753956d21755ee0c43a6802b18cb71131bae8405d5a0b97e919e4ad2990600090a2600b80546001600160a01b0319166001600160a01b0392909216919091179055565b6008546001600160401b03908116908216670de0b6b3a764000081106126065760405162f9474b60e61b815260040160405180910390fd5b8115806126135750808210155b1561263157604051632f2a24a960e11b815260040160405180910390fd5b336126446000546001600160a01b031690565b6001600160a01b03161461266a5760405162461bcd60e51b8152600401610a54906133e3565b6008546001600160401b03808516600160401b909204160361269f5760405163d5e8e5fb60e01b815260040160405180910390fd5b6008805467ffffffffffffffff60401b1916600160401b6001600160401b038616908102919091179091556040519081527f421dd56981f3a94f01459e7d9bc4cd85e070e7258f83a9622e5b09e40c4d20ee90602001610ad6565b606061104060166129dc565b336127196000546001600160a01b031690565b6001600160a01b03161461273f5760405162461bcd60e51b8152600401610a54906133e3565b6001600160a01b0381166127835760405162461bcd60e51b815260206004820152600b60248201526a4f776e657249735a65726f60a81b6044820152606401610a54565b610f4481612cc0565b60008061279a601685612a90565b90506127a68482611747565b6001600160a01b0384166000908152601060205260409020546127d59085906001600160801b03168386612ab2565b949350505050565b6002546001600160a01b031633146128085760405163605919ad60e11b815260040160405180910390fd5b6001600160a01b0380841660009081526005602090815260408083209386168352929052205481900361284e5760405163ce9e721f60e01b815260040160405180910390fd5b6001600160a01b0383811660008181526005602090815260408083209487168084529482529182902085905590518481527f25c16b7d0bcf048ed0d91eb5e50591eb538c034fd4ebee6cac8b7c9cf77c770b910160405180910390a3505050565b60006001600160a01b038316158015906113af575082826040518163ffffffff1660e01b8152600401602060405180830381865afa1580156128f5573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061291991906135f0565b60e083901b6001600160e01b0319908116911614905092915050565b6040805160048152602481019091526020810180516001600160e01b031663313ce56760e01b17905260009081908190612970908590612d71565b9150915081612983575060009392505050565b80806020019051810190612997919061361a565b60ff16949350505050565b60006113af836001600160a01b038416612e25565b3b151590565b6000610b33825490565b60006113af836001600160a01b038416612e74565b606060006113af83612f67565b6001546001600160a01b03808316911603612a465760405162461bcd60e51b815260206004820152601860248201527f50656e64696e674f776e65724469644e6f744368616e676500000000000000006044820152606401610a54565b600180546001600160a01b0319166001600160a01b0383169081179091556040517fd6aad444c90d39fb0eee1c6e357a7fad83d63f719ac5f880445a2beb0ff3ab5890600090a250565b6001600160a01b038116600090815260018301602052604081205415156113af565b6000836001600160801b0316600003612ad457600f546001600160801b031693505b6001600160801b0384166000908152601260205260409020546001600160a01b031680612b1457604051634eb171af60e01b815260040160405180910390fd5b60405163573bbca560e01b81526001600160a01b0382169063573bbca590612b4490899089908890600401613669565b6020604051808303816000875af1158015612b63573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b8791906136bb565b6001600160a01b03808816600081815260136020908152604080832080549587166001600160a01b0319968716811790915580845260149092528083208054909516909317909355815163a388991b60e01b81529151939550919263a388991b9260048084019391929182900301818387803b158015612c0657600080fd5b505af1158015612c1a573d6000803e3d6000fd5b50506040516001600160801b03881681526001600160a01b03808a169350851691507fd67d472c55ce8b249ca39858e9032ae0237147a9b81f4d1253c246c75876dd699060200160405180910390a38315612cb757600e80546001600160a01b0319166001600160a01b0384169081179091556040517f41df3a85176fe451d19027e7b43ecc444bc299ef0d82c2b3874fbc7441d6288490600090a25b50949350505050565b6000546001600160a01b03808316911603612d115760405162461bcd60e51b81526020600482015260116024820152704f776e65724469644e6f744368616e676560781b6044820152606401610a54565b600080546001600160a01b0319166001600160a01b038316908117825560405190917f04dba622d284ed0014ee4b9a6a68386be1a4c08a4913ae272de89199cc68616391a26001546001600160a01b031615610f4457610f4460006129e9565b60006060833b612d94576040516373d39f9d60e01b815260040160405180910390fd5b600080856001600160a01b031685604051612daf91906136d8565b600060405180830381855afa9150503d8060008114612dea576040519150601f19603f3d011682016040523d82523d6000602084013e612def565b606091505b509150915081612e1657600060405180602001604052806000815250935093505050612e1e565b600193509150505b9250929050565b6000818152600183016020526040812054612e6c57508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610b33565b506000610b33565b60008181526001830160205260408120548015612f5d576000612e986001836136f4565b8554909150600090612eac906001906136f4565b9050818114612f11576000866000018281548110612ecc57612ecc61370b565b9060005260206000200154905080876000018481548110612eef57612eef61370b565b6000918252602080832090910192909255918252600188019052604090208390555b8554869080612f2257612f22613721565b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050610b33565b6000915050610b33565b606081600001805480602002602001604051908101604052809291908181526020018280548015612fb757602002820191906000526020600020905b815481526020019060010190808311612fa3575b50505050509050919050565b6001600160a01b0381168114610f4457600080fd5b60008060408385031215612feb57600080fd5b8235612ff681612fc3565b9150602083013561300681612fc3565b809150509250929050565b6001600160401b0381168114610f4457600080fd5b60006020828403121561303857600080fd5b81356113af81613011565b60006020828403121561305557600080fd5b5035919050565b60006020828403121561306e57600080fd5b81356113af81612fc3565b8015158114610f4457600080fd5b60008060006060848603121561309c57600080fd5b83356130a781612fc3565b925060208401356130b781612fc3565b915060408401356130c781613079565b809150509250925092565b6020808252825182820181905260009190848201906040850190845b818110156131135783516001600160a01b0316835292840192918401916001016130ee565b50909695505050505050565b6000806040838503121561313257600080fd5b823561313d81612fc3565b9150602083013561300681613079565b60006020828403121561315f57600080fd5b81356113af81613079565b80356001600160801b038116811461318157600080fd5b919050565b634e487b7160e01b600052604160045260246000fd5b600082601f8301126131ad57600080fd5b81356001600160401b03808211156131c7576131c7613186565b604051601f8301601f19908116603f011681019082821181831017156131ef576131ef613186565b8160405283815286602085880101111561320857600080fd5b836020870160208301376000602085830101528094505050505092915050565b60008060006060848603121561323d57600080fd5b833561324881612fc3565b92506132566020850161316a565b915060408401356001600160401b0381111561327157600080fd5b61327d8682870161319c565b9150509250925092565b60006020828403121561329957600080fd5b6113af8261316a565b600080604083850312156132b557600080fd5b82356132c081612fc3565b91506132ce6020840161316a565b90509250929050565b6000606082840312156132e957600080fd5b50919050565b600080600060a0848603121561330457600080fd5b833561330f81612fc3565b9250602084013561331f81612fc3565b915061332e85604086016132d7565b90509250925092565b60006060828403121561334957600080fd5b6113af83836132d7565b6000806040838503121561336657600080fd5b823561337181612fc3565b915060208301356001600160401b0381111561338c57600080fd5b6133988582860161319c565b9150509250929050565b6000806000606084860312156133b757600080fd5b83356133c281612fc3565b925060208401356133d281612fc3565b929592945050506040919091013590565b60208082526009908201526827b7363ca7bbb732b960b91b604082015260600190565b60006020828403121561341857600080fd5b81516113af81613079565b634e487b7160e01b600052601160045260246000fd5b60006001600160801b0380831681851680830382111561345b5761345b613423565b01949350505050565b60006020828403121561347657600080fd5b5051919050565b60608101823561348c81613011565b6001600160401b0390811683526020840135906134a882613011565b16602083015260408301356134bc81612fc3565b6001600160a01b031660409290920191909152919050565b81356134df81613011565b815467ffffffffffffffff19166001600160401b03821617825550602082013561350881613011565b815467ffffffffffffffff60401b1916604082901b67ffffffffffffffff60401b161782555060018101604083013561354081612fc3565b81546001600160a01b0319166001600160a01b03919091161790555050565b813561356a81613011565b815467ffffffffffffffff19166001600160401b03821617825550602082013561359381613011565b815467ffffffffffffffff60401b1916604082901b67ffffffffffffffff60401b161782555060408201356135c781613011565b815467ffffffffffffffff60801b191660809190911b67ffffffffffffffff60801b1617905550565b60006020828403121561360257600080fd5b81516001600160e01b0319811681146113af57600080fd5b60006020828403121561362c57600080fd5b815160ff811681146113af57600080fd5b60005b83811015613658578181015183820152602001613640565b838111156124035750506000910152565b60018060a01b03841681526001600160801b038316602082015260606040820152600082518060608401526136a581608085016020870161363d565b601f01601f191691909101608001949350505050565b6000602082840312156136cd57600080fd5b81516113af81612fc3565b600082516136ea81846020870161363d565b9190910192915050565b60008282101561370657613706613423565b500390565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052603160045260246000fdfea2646970667358221220c87df71128452e0b33444e65e09d6200f248f1b9e8fb7261e32ea74bb0eaf78664736f6c634300080d0033",
  "devdoc": {
    "custom:security-contact": "security@silo.finance",
    "details": "Stores configuration for each asset in each silo. Each asset in each Silo starts with a default config that later on can be changed by the contract owner. Stores registry of Factory contracts that deploy different versions of Silos It is possible to have multiple versions/implementations of Silo and use different versions for different tokens. For example, one version can be used for UNI (ERC20) and the other can be used for UniV3LP tokens (ERC721). Manages bridge assets. Each Silo can have 1 or more bridge assets. New Silos are created with all currently active bridge assets. Silos that are already developed must synchronize bridge assets. Sync can be done by anyone, function has public access. Is a single source of truth for other contract addresses.",
    "kind": "dev",
    "methods": {
      "acceptOwnership()": {
        "details": "Transfers ownership of the contract to a pending owner Can only be called by the pending owner."
      },
      "addBridgeAsset(address)": {
        "details": "New bridge asset must be unique. Duplicates in bridge assets are not allowed. It's possible to add bridge asset that has been removed in the past. Note that all Silos must be synced manually. Callable only by owner.",
        "params": {
          "_newBridgeAsset": "bridge asset address"
        }
      },
      "changeManager(address)": {
        "details": "Callable by manager or external owner role",
        "params": {
          "_manager": "new manager address"
        }
      },
      "constructor": {
        "params": {
          "_defaultLiquidationThreshold": "liquidation threshold for default configuration",
          "_defaultMaxLTV": "maximum Loan-to-Value for default configuration",
          "_initialBridgeAssets": "bridge assets to start with",
          "_siloFactory": "address of SiloFactory contract that deploys Silos",
          "_tokensFactory": "address of TokensFactory contract that deploys debt and collateral tokens for each Silo asset"
        }
      },
      "ensureCanCreateSiloFor(address,bool)": {
        "details": "Checks all conditions for new silo creation and throws when not possible to create",
        "params": {
          "_asset": "address of asset for which you want to create silo",
          "_assetIsABridge": "bool TRUE when `_asset` is bridge asset, FALSE when it is not"
        }
      },
      "entryFee()": {
        "details": "Get protocol fee for opening a borrow position",
        "returns": {
          "_0": "fee in precision points (Solvency._PRECISION_DECIMALS == 100%)"
        }
      },
      "getBridgeAssets()": {
        "details": "Keep in mind that not all Silos may be synced with current bridge assets so it's possible that some assets in that list are not part of given Silo.",
        "returns": {
          "_0": "address array of bridge assets"
        }
      },
      "getInterestRateModel(address,address)": {
        "details": "If dedicated config is not set, method returns default config",
        "params": {
          "_asset": "address of an asset",
          "_silo": "address of Silo"
        },
        "returns": {
          "model": "address of interest rate model"
        }
      },
      "getLiquidationThreshold(address,address)": {
        "details": "If dedicated config is not set, method returns default config",
        "params": {
          "_asset": "address of an asset",
          "_silo": "address of Silo"
        },
        "returns": {
          "_0": "liquidation threshold in precision points (Solvency._PRECISION_DECIMALS)"
        }
      },
      "getMaxSiloDepositsValue(address,address)": {
        "params": {
          "_asset": "Silo asset for which to set limit",
          "_silo": "Silo address for which to set limit"
        },
        "returns": {
          "_0": "deposit limit for Silo"
        }
      },
      "getMaximumLTV(address,address)": {
        "details": "If dedicated config is not set, method returns default config",
        "params": {
          "_asset": "address of an asset",
          "_silo": "address of Silo"
        },
        "returns": {
          "_0": "maximum LTV in precision points (Solvency._PRECISION_DECIMALS)"
        }
      },
      "getRemovedBridgeAssets()": {
        "details": "Keep in mind that not all Silos may be synced with bridge assets so it's possible that some assets in that list are still part of given Silo.",
        "returns": {
          "_0": "address array of bridge assets"
        }
      },
      "isSilo(address)": {
        "params": {
          "_silo": "address of expected Silo"
        },
        "returns": {
          "_0": "true if address is Silo deployment, otherwise false"
        }
      },
      "isSiloPaused(address,address)": {
        "params": {
          "_asset": "address of an asset",
          "_silo": "address of Silo"
        },
        "returns": {
          "_0": "true if given asset in a Silo is paused, otherwise false"
        }
      },
      "newSilo(address,bytes)": {
        "details": "Silo does NOT support rebase and deflationary tokens",
        "params": {
          "_siloAsset": "silo asset",
          "_siloData": "(optional) data that may be needed during silo creation"
        },
        "returns": {
          "_0": "address of created silo"
        }
      },
      "owner()": {
        "returns": {
          "_0": "owner role address"
        }
      },
      "pendingOwner()": {
        "details": "Returns the address of the pending owner."
      },
      "protocolLiquidationFee()": {
        "details": "Get protocol liquidation fee",
        "returns": {
          "_0": "protocol liquidation fee in precision points (Solvency._PRECISION_DECIMALS == 100%)"
        }
      },
      "protocolShareFee()": {
        "details": "Get protocol share fee",
        "returns": {
          "_0": "protocol share fee in precision points (Solvency._PRECISION_DECIMALS == 100%)"
        }
      },
      "registerSiloVersion(address,bool)": {
        "details": "User can choose which Silo version he wants to deploy. It's possible to have multiple versions of Silo. Callable only by owner.",
        "params": {
          "_factory": "factory contract that deploys new version of Silo",
          "_isDefault": "true if this version should be used as default"
        }
      },
      "removeBridgeAsset(address)": {
        "details": "Note that all Silos must be synced manually. Callable only by owner.",
        "params": {
          "_bridgeAssetToRemove": "bridge asset address to be removed"
        }
      },
      "removePendingOwnership()": {
        "details": "Clears the pending ownership. Can only be called by the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "replaceSilo(address,uint128,bytes)": {
        "details": "Silo does NOT support rebase and deflationary tokens",
        "params": {
          "_siloAsset": "silo asset",
          "_siloData": "(optional) data that may be needed during silo creation",
          "_siloVersion": "version of silo implementation. Use 0 for default version which is fine for 99% of cases."
        },
        "returns": {
          "_0": "address of created silo"
        }
      },
      "setAssetConfig(address,address,(uint64,uint64,address))": {
        "details": "Callable only by owner",
        "params": {
          "_asset": "asset address for which config applies",
          "_assetConfig": ":    - _maxLoanToValue maximum Loan-to-Value, for details see `Repository.AssetConfig.maxLoanToValue`    - _liquidationThreshold liquidation threshold, for details see `Repository.AssetConfig.maxLoanToValue`    - _interestRateModel interest rate model address, for details see `Repository.AssetConfig.interestRateModel`",
          "_silo": "Silo address for which config applies"
        }
      },
      "setDefaultInterestRateModel(address)": {
        "details": "Callable only by owner",
        "params": {
          "_defaultInterestRateModel": "default interest rate model"
        }
      },
      "setDefaultLiquidationThreshold(uint64)": {
        "details": "Callable only by owner",
        "params": {
          "_defaultLiquidationThreshold": "default liquidation threshold in precision points (Solvency._PRECISION_DECIMALS)"
        }
      },
      "setDefaultMaximumLTV(uint64)": {
        "details": "Callable only by owner",
        "params": {
          "_defaultMaxLTV": "default maximum LTV in precision points (Solvency._PRECISION_DECIMALS)"
        }
      },
      "setDefaultSiloMaxDepositsLimit(uint256)": {
        "params": {
          "_maxDeposits": "deposit limit amount in quote token"
        }
      },
      "setDefaultSiloVersion(uint128)": {
        "details": "Callable only by owner.",
        "params": {
          "_defaultVersion": "Silo version to be set as default"
        }
      },
      "setFees((uint64,uint64,uint64))": {
        "details": "Callable only by owner",
        "params": {
          "_fees": ": - _entryFee one time protocol fee for opening a borrow position in precision points (Solvency._PRECISION_DECIMALS) - _protocolShareFee protocol revenue share in interest paid in precision points (Solvency._PRECISION_DECIMALS) - _protocolLiquidationFee protocol share in liquidation profit in precision points (Solvency._PRECISION_DECIMALS). It's calculated from total collateral amount to be transferred to liquidator."
        }
      },
      "setGlobalPause(bool)": {
        "details": "Callable only by owner.",
        "params": {
          "_globalPause": "true to pause all Silos, otherwise false"
        }
      },
      "setNotificationReceiver(address,address)": {
        "details": "Callable only by owner",
        "params": {
          "_notificationReceiver": "NotificationReceiver address",
          "_silo": "silo address for which to set `_notificationReceiver`"
        }
      },
      "setPriceProvidersRepository(address)": {
        "details": "Callable only by owner",
        "params": {
          "_repository": "price provider repository address"
        }
      },
      "setRouter(address)": {
        "details": "Callable only by owner",
        "params": {
          "_router": "router address"
        }
      },
      "setSiloMaxDepositsLimit(address,address,uint256)": {
        "params": {
          "_asset": "Silo asset for which to set limit",
          "_maxDeposits": "deposit limit amount in quote token",
          "_silo": "Silo address for which to set limit"
        }
      },
      "setSiloPause(address,address,bool)": {
        "details": "Callable only by owner.",
        "params": {
          "_asset": "address of an asset that is being paused",
          "_pauseValue": "true to pause, false to unpause",
          "_silo": "address of Silo in which `_asset` is being paused"
        }
      },
      "setTokensFactory(address)": {
        "details": "Callable only by owner",
        "params": {
          "_tokensFactory": "address of TokensFactory contract that deploys debt and collateral tokens"
        }
      },
      "setVersionForAsset(address,uint128)": {
        "params": {
          "_siloAsset": "silo asset",
          "_version": "version of Silo that will be assigned for `_siloAsset`, zero (default) is acceptable"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "transferPendingOwnership(address)": {
        "details": "Transfers pending ownership of the contract to a new account (`newPendingOwner`) and clears any existing pending ownership. Can only be called by the current owner."
      },
      "unregisterSiloVersion(uint128)": {
        "details": "Callable only by owner.",
        "params": {
          "_siloVersion": "Silo version to be unregistered"
        }
      }
    },
    "stateVariables": {
      "_INITIAL_SILO_VERSION": {
        "details": "Value used to initialize the Silo's version data"
      },
      "_ONE_HUNDRED_PERCENT": {
        "details": "representation of 100%"
      },
      "_bridgeAssets": {
        "details": "List of bridge assets supported by the protocol"
      },
      "_removedBridgeAssets": {
        "details": "List of bridge assets removed by the protocol"
      },
      "assetConfigs": {
        "details": "maps silo => asset => config"
      },
      "bridgePool": {
        "details": "Silo for bridge asset. We can have only one bridge pool"
      },
      "defaultAssetConfig": {
        "details": "Default values for AssetConfig. Used if values are not configured manually."
      },
      "fees": {
        "details": "Protocol fee configuration"
      },
      "getNotificationReceiver": {
        "details": "Maps Silo address to incentive contract that will distribute rewards for that Silo"
      },
      "getSilo": {
        "details": "maps token address to silo address, asset => silo"
      },
      "getVersionForAsset": {
        "details": "Maps asset => silo version"
      },
      "priceProvidersRepository": {
        "details": "PriceProvidersRepository contract that manages PriceProviders implementations and is an entry point for reading prices for Silos."
      },
      "router": {
        "details": "SiloRouter utility contract that combines number of actions (Deposit, Withdraw, Borrow, Repay) for batch execution in single transaction."
      },
      "siloFactory": {
        "details": "Maps version => ISiloFactory. Versions start at 1 and are incremented by 1."
      },
      "siloReverse": {
        "details": "maps silo address to token address, silo => asset"
      },
      "siloVersion": {
        "details": "Silo version data"
      },
      "tokensFactory": {
        "details": "Factory contracts that deploys debt and collateral tokens for each asset in Silo"
      }
    },
    "title": "SiloRepository",
    "version": 1
  },
  "userdoc": {
    "events": {
      "AssetConfigUpdate(address,address,(uint64,uint64,address))": {
        "notice": "Emitted when asset config is updated for a silo"
      },
      "BridgeAssetAdded(address)": {
        "notice": "Emitted on new bridge asset"
      },
      "BridgeAssetRemoved(address)": {
        "notice": "Emitted on removed bridge asset"
      },
      "BridgePool(address)": {
        "notice": "Emitted when new Silo (or existing one) becomes a bridge pool (pool with only bridge tokens)."
      },
      "DefaultSiloMaxDepositsLimitUpdate(uint256)": {
        "notice": "Emitted when default max liquidity limit is changed"
      },
      "FeeUpdate(uint64,uint64,uint64)": {
        "notice": "Emitted when default fee is updated"
      },
      "GlobalPause(bool)": {
        "notice": "Emitted when all Silos are paused or unpaused"
      },
      "InterestRateModel(address)": {
        "notice": "Emitted when default interest rate model is changed"
      },
      "LimitedMaxLiquidityToggled(bool)": {
        "notice": "Emitted when max liquidity toggle is switched"
      },
      "ManagerChanged(address)": {
        "notice": "Emitted when manager is changed"
      },
      "NewSilo(address,address,uint128)": {
        "notice": "Emitted on new Silo creation"
      },
      "NotificationReceiverUpdate(address)": {
        "notice": "Emitted on INotificationReceiver address update"
      },
      "OwnershipPending(address)": {
        "notice": "Emitted when ownership transfer is proposed, aka pending owner is set"
      },
      "OwnershipTransferred(address)": {
        "notice": "Emitted when ownership is transferred on `transferOwnership` and `acceptOwnership`"
      },
      "PriceProvidersRepositoryUpdate(address)": {
        "notice": "Emitted on price provider repository address update"
      },
      "RegisterSiloVersion(address,uint128,uint128)": {
        "notice": "Emitted when new Silo version is registered"
      },
      "RouterUpdate(address)": {
        "notice": "Emitted on router address update"
      },
      "SiloDefaultVersion(uint128)": {
        "notice": "Emitted when default Silo version is updated"
      },
      "SiloMaxDepositsLimitsUpdate(address,address,uint256)": {
        "notice": "Emitted when deposit liquidity limit is changed for Silo and asset"
      },
      "SiloPause(address,address,bool)": {
        "notice": "Emitted when a single Silo or single asset in a Silo is paused or unpaused"
      },
      "TokensFactoryUpdate(address)": {
        "notice": "Emitted on token factory address update"
      },
      "UnregisterSiloVersion(address,uint128)": {
        "notice": "Emitted when Silo version is unregistered"
      },
      "VersionForAsset(address,uint128)": {
        "notice": "Emitted when silo (silo factory) version is set for asset"
      }
    },
    "kind": "user",
    "methods": {
      "addBridgeAsset(address)": {
        "notice": "Adds new bridge asset"
      },
      "changeManager(address)": {
        "notice": "Change manager address"
      },
      "getBridgeAssets()": {
        "notice": "Get current bridge assets"
      },
      "getInterestRateModel(address,address)": {
        "notice": "Get Interest Rate Model address for asset in given Silo"
      },
      "getLiquidationThreshold(address,address)": {
        "notice": "Get liquidation threshold for asset in given Silo"
      },
      "getMaxSiloDepositsValue(address,address)": {
        "notice": "Gets deposit limit for Silo"
      },
      "getMaximumLTV(address,address)": {
        "notice": "Get maximum LTV for asset in given Silo"
      },
      "getRemovedBridgeAssets()": {
        "notice": "Get removed bridge assets"
      },
      "isSilo(address)": {
        "notice": "Check if contract address is a Silo deployment"
      },
      "isSiloPaused(address,address)": {
        "notice": "Check given asset in a Silo is paused"
      },
      "newSilo(address,bytes)": {
        "notice": "use this method only when off-chain verification is OFF"
      },
      "owner()": {
        "notice": "Get owner role address of Repository"
      },
      "registerSiloVersion(address,bool)": {
        "notice": "Registers new Silo version"
      },
      "removeBridgeAsset(address)": {
        "notice": "Removes bridge asset"
      },
      "replaceSilo(address,uint128,bytes)": {
        "notice": "use this method to deploy new version of Silo for an asset that already has Silo deployed. Only owner (DAO) can replace."
      },
      "setAssetConfig(address,address,(uint64,uint64,address))": {
        "notice": "Set configuration for given asset in given Silo"
      },
      "setDefaultInterestRateModel(address)": {
        "notice": "Set default interest rate model"
      },
      "setDefaultLiquidationThreshold(uint64)": {
        "notice": "Set default liquidation threshold"
      },
      "setDefaultMaximumLTV(uint64)": {
        "notice": "Set default maximum LTV"
      },
      "setDefaultSiloMaxDepositsLimit(uint256)": {
        "notice": "Sets default deposit limit for all Silos"
      },
      "setDefaultSiloVersion(uint128)": {
        "notice": "Sets default Silo version"
      },
      "setFees((uint64,uint64,uint64))": {
        "notice": "Set default fees"
      },
      "setGlobalPause(bool)": {
        "notice": "Pause all Silos"
      },
      "setLimitedMaxLiquidity(bool)": {
        "notice": "Sets limited liquidity to provided value"
      },
      "setNotificationReceiver(address,address)": {
        "notice": "Set NotificationReceiver contract"
      },
      "setPriceProvidersRepository(address)": {
        "notice": "Set price provider repository"
      },
      "setRouter(address)": {
        "notice": "Set router contract"
      },
      "setSiloMaxDepositsLimit(address,address,uint256)": {
        "notice": "Sets deposit limit for Silo"
      },
      "setSiloPause(address,address,bool)": {
        "notice": "Pause single asset in a single Silo"
      },
      "setTokensFactory(address)": {
        "notice": "Set factory contract for debt and collateral tokens for each Silo asset"
      },
      "setVersionForAsset(address,uint128)": {
        "notice": "setter for `getVersionForAsset` mapping"
      },
      "unregisterSiloVersion(uint128)": {
        "notice": "Unregisters Silo version"
      }
    },
    "notice": "SiloRepository handles the creation and configuration of Silos.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 25145,
        "contract": "contracts/SiloRepository.sol:SiloRepository",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 25148,
        "contract": "contracts/SiloRepository.sol:SiloRepository",
        "label": "_pendingOwner",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 24397,
        "contract": "contracts/SiloRepository.sol:SiloRepository",
        "label": "_managerRole",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 23764,
        "contract": "contracts/SiloRepository.sol:SiloRepository",
        "label": "maxLiquidity",
        "offset": 0,
        "slot": "3",
        "type": "t_struct(MaxLiquidityLimit)17426_storage"
      },
      {
        "astId": 23768,
        "contract": "contracts/SiloRepository.sol:SiloRepository",
        "label": "isPaused",
        "offset": 0,
        "slot": "6",
        "type": "t_struct(Paused)17436_storage"
      },
      {
        "astId": 13858,
        "contract": "contracts/SiloRepository.sol:SiloRepository",
        "label": "defaultAssetConfig",
        "offset": 0,
        "slot": "8",
        "type": "t_struct(AssetConfig)18118_storage"
      },
      {
        "astId": 13862,
        "contract": "contracts/SiloRepository.sol:SiloRepository",
        "label": "fees",
        "offset": 0,
        "slot": "10",
        "type": "t_struct(Fees)18100_storage"
      },
      {
        "astId": 13867,
        "contract": "contracts/SiloRepository.sol:SiloRepository",
        "label": "tokensFactory",
        "offset": 0,
        "slot": "11",
        "type": "t_contract(ITokensFactory)18591"
      },
      {
        "astId": 13872,
        "contract": "contracts/SiloRepository.sol:SiloRepository",
        "label": "priceProvidersRepository",
        "offset": 0,
        "slot": "12",
        "type": "t_contract(IPriceProvidersRepository)17859"
      },
      {
        "astId": 13876,
        "contract": "contracts/SiloRepository.sol:SiloRepository",
        "label": "router",
        "offset": 0,
        "slot": "13",
        "type": "t_address"
      },
      {
        "astId": 13879,
        "contract": "contracts/SiloRepository.sol:SiloRepository",
        "label": "bridgePool",
        "offset": 0,
        "slot": "14",
        "type": "t_address"
      },
      {
        "astId": 13883,
        "contract": "contracts/SiloRepository.sol:SiloRepository",
        "label": "siloVersion",
        "offset": 0,
        "slot": "15",
        "type": "t_struct(SiloVersion)18107_storage"
      },
      {
        "astId": 13889,
        "contract": "contracts/SiloRepository.sol:SiloRepository",
        "label": "getVersionForAsset",
        "offset": 0,
        "slot": "16",
        "type": "t_mapping(t_address,t_uint128)"
      },
      {
        "astId": 13896,
        "contract": "contracts/SiloRepository.sol:SiloRepository",
        "label": "getNotificationReceiver",
        "offset": 0,
        "slot": "17",
        "type": "t_mapping(t_address,t_contract(INotificationReceiver)17715)"
      },
      {
        "astId": 13903,
        "contract": "contracts/SiloRepository.sol:SiloRepository",
        "label": "siloFactory",
        "offset": 0,
        "slot": "18",
        "type": "t_mapping(t_uint256,t_contract(ISiloFactory)18083)"
      },
      {
        "astId": 13909,
        "contract": "contracts/SiloRepository.sol:SiloRepository",
        "label": "getSilo",
        "offset": 0,
        "slot": "19",
        "type": "t_mapping(t_address,t_address)"
      },
      {
        "astId": 13914,
        "contract": "contracts/SiloRepository.sol:SiloRepository",
        "label": "siloReverse",
        "offset": 0,
        "slot": "20",
        "type": "t_mapping(t_address,t_address)"
      },
      {
        "astId": 13922,
        "contract": "contracts/SiloRepository.sol:SiloRepository",
        "label": "assetConfigs",
        "offset": 0,
        "slot": "21",
        "type": "t_mapping(t_address,t_mapping(t_address,t_struct(AssetConfig)18118_storage))"
      },
      {
        "astId": 13934,
        "contract": "contracts/SiloRepository.sol:SiloRepository",
        "label": "_bridgeAssets",
        "offset": 0,
        "slot": "22",
        "type": "t_struct(AddressSet)7290_storage"
      },
      {
        "astId": 13938,
        "contract": "contracts/SiloRepository.sol:SiloRepository",
        "label": "_removedBridgeAssets",
        "offset": 0,
        "slot": "24",
        "type": "t_struct(AddressSet)7290_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IInterestRateModel)17693": {
        "encoding": "inplace",
        "label": "contract IInterestRateModel",
        "numberOfBytes": "20"
      },
      "t_contract(INotificationReceiver)17715": {
        "encoding": "inplace",
        "label": "contract INotificationReceiver",
        "numberOfBytes": "20"
      },
      "t_contract(IPriceProvidersRepository)17859": {
        "encoding": "inplace",
        "label": "contract IPriceProvidersRepository",
        "numberOfBytes": "20"
      },
      "t_contract(ISiloFactory)18083": {
        "encoding": "inplace",
        "label": "contract ISiloFactory",
        "numberOfBytes": "20"
      },
      "t_contract(ITokensFactory)18591": {
        "encoding": "inplace",
        "label": "contract ITokensFactory",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_contract(INotificationReceiver)17715)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => contract INotificationReceiver)",
        "numberOfBytes": "32",
        "value": "t_contract(INotificationReceiver)17715"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_mapping(t_address,t_struct(AssetConfig)18118_storage))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => struct ISiloRepository.AssetConfig))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_struct(AssetConfig)18118_storage)"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_struct(AssetConfig)18118_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct ISiloRepository.AssetConfig)",
        "numberOfBytes": "32",
        "value": "t_struct(AssetConfig)18118_storage"
      },
      "t_mapping(t_address,t_uint128)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint128)",
        "numberOfBytes": "32",
        "value": "t_uint128"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_contract(ISiloFactory)18083)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => contract ISiloFactory)",
        "numberOfBytes": "32",
        "value": "t_contract(ISiloFactory)18083"
      },
      "t_struct(AddressSet)7290_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.AddressSet",
        "members": [
          {
            "astId": 7289,
            "contract": "contracts/SiloRepository.sol:SiloRepository",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)6989_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(AssetConfig)18118_storage": {
        "encoding": "inplace",
        "label": "struct ISiloRepository.AssetConfig",
        "members": [
          {
            "astId": 18110,
            "contract": "contracts/SiloRepository.sol:SiloRepository",
            "label": "maxLoanToValue",
            "offset": 0,
            "slot": "0",
            "type": "t_uint64"
          },
          {
            "astId": 18113,
            "contract": "contracts/SiloRepository.sol:SiloRepository",
            "label": "liquidationThreshold",
            "offset": 8,
            "slot": "0",
            "type": "t_uint64"
          },
          {
            "astId": 18117,
            "contract": "contracts/SiloRepository.sol:SiloRepository",
            "label": "interestRateModel",
            "offset": 0,
            "slot": "1",
            "type": "t_contract(IInterestRateModel)17693"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Fees)18100_storage": {
        "encoding": "inplace",
        "label": "struct ISiloRepository.Fees",
        "members": [
          {
            "astId": 18093,
            "contract": "contracts/SiloRepository.sol:SiloRepository",
            "label": "entryFee",
            "offset": 0,
            "slot": "0",
            "type": "t_uint64"
          },
          {
            "astId": 18096,
            "contract": "contracts/SiloRepository.sol:SiloRepository",
            "label": "protocolShareFee",
            "offset": 8,
            "slot": "0",
            "type": "t_uint64"
          },
          {
            "astId": 18099,
            "contract": "contracts/SiloRepository.sol:SiloRepository",
            "label": "protocolLiquidationFee",
            "offset": 16,
            "slot": "0",
            "type": "t_uint64"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(MaxLiquidityLimit)17426_storage": {
        "encoding": "inplace",
        "label": "struct IGuardedLaunch.MaxLiquidityLimit",
        "members": [
          {
            "astId": 17415,
            "contract": "contracts/SiloRepository.sol:SiloRepository",
            "label": "globalLimit",
            "offset": 0,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 17418,
            "contract": "contracts/SiloRepository.sol:SiloRepository",
            "label": "defaultMaxLiquidity",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 17425,
            "contract": "contracts/SiloRepository.sol:SiloRepository",
            "label": "siloMaxLiquidity",
            "offset": 0,
            "slot": "2",
            "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(Paused)17436_storage": {
        "encoding": "inplace",
        "label": "struct IGuardedLaunch.Paused",
        "members": [
          {
            "astId": 17428,
            "contract": "contracts/SiloRepository.sol:SiloRepository",
            "label": "globalPause",
            "offset": 0,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 17435,
            "contract": "contracts/SiloRepository.sol:SiloRepository",
            "label": "siloPause",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Set)6989_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 6984,
            "contract": "contracts/SiloRepository.sol:SiloRepository",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 6988,
            "contract": "contracts/SiloRepository.sol:SiloRepository",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(SiloVersion)18107_storage": {
        "encoding": "inplace",
        "label": "struct ISiloRepository.SiloVersion",
        "members": [
          {
            "astId": 18103,
            "contract": "contracts/SiloRepository.sol:SiloRepository",
            "label": "byDefault",
            "offset": 0,
            "slot": "0",
            "type": "t_uint128"
          },
          {
            "astId": 18106,
            "contract": "contracts/SiloRepository.sol:SiloRepository",
            "label": "latest",
            "offset": 16,
            "slot": "0",
            "type": "t_uint128"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint128": {
        "encoding": "inplace",
        "label": "uint128",
        "numberOfBytes": "16"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      }
    }
  }
}