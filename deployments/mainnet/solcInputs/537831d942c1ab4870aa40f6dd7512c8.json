{
  "language": "Solidity",
  "sources": {
    "contracts/InterestRateModel.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity 0.8.7;\n\nimport \"./lib/EasyMath.sol\";\n\ncontract InterestRateModel {\n    using EasyMath for int256;\n\n    uint256 public constant SECONDS_PER_YEAR = 31536000;\n    uint256 public constant BASIS_POINTS = 10000;\n\n    uint256 public constant ACCEPTED_RANGE = 5e16;\n    int256 public constant DECIMAL_POINTS = 1e18;\n\n    /// @dev is our target value for borrowAmount utilization\n    ///         eg. if optimal utilization is X, then if current utilization is less than X,\n    ///         interest rate will be dropping to give incentive to borrow and bring utilization closer to X\n    ///         when current utilization will be higher than X, interests will be increased to give incentive for return\n    ///         money and bring utilization closer to X\n    ///         utilization is using DECIMAL_POINTS, so base unit is 1e18\n    int256 public immutable pidUtilizationOptimal;\n\n    int256 public immutable pidKp;\n\n    /// @dev interval for interest rate update in seconds\n    uint256 public immutable interestsRateInterval;\n\n    constructor(\n        uint64 _pidUtilizationOptimal,\n        uint64 _pidKp,\n        uint64 _interestsRateInterval\n    ) {\n        require(_pidUtilizationOptimal != 0, \"InterestRateModel: invalid _utilizationOptimal\");\n        require(_pidKp != 0, \"InterestRateModel: invalid _pidKp\");\n        require(_interestsRateInterval != 0, \"InterestRateModel: invalid _updateInterval\");\n\n        pidUtilizationOptimal = int256(uint256(_pidUtilizationOptimal));\n        pidKp = int256(uint256(_pidKp));\n        interestsRateInterval = uint256(_interestsRateInterval);\n    }\n\n    /// @notice calculates new interest rate\n    /// @param _deposit total deposit of the asset\n    /// @param _borrowAmount total borrow amount\n    /// @param _interestRate interest rate at `_interestRateUpdateTimestamp`\n    /// @return newInterestRate new current interest rate, it will be changed ONLY if `_deltaTime` >= `_interval`\n    function interestRateForInterval(uint256 _deposit, uint256 _borrowAmount, uint256 _interestRate)\n        public\n        view\n        returns (uint256 newInterestRate)\n    {\n        unchecked {\n            // borrowAmountUtilization\n            int256 u = int256(_borrowAmount) * DECIMAL_POINTS / int256(_deposit);\n\n            int256 error = u - pidUtilizationOptimal;\n\n            if (error.abs() <= ACCEPTED_RANGE) {\n                error = 0;\n            }\n\n            int256 p = pidKp * error / DECIMAL_POINTS;\n            int256 interestRate = int256(_interestRate) + p.toBasisPoint();\n\n            if (interestRate < 0) {\n                interestRate = 0;\n            }\n\n            return uint256(interestRate);\n        }\n    }\n\n    function calculatePastInterests(\n        uint256 _borrowAmountWithInterests,\n        uint256 _interestRate,\n        uint256 _deltaTime\n    ) public pure returns (uint256 pastInterests) {\n        uint256 x = _interestRate * _deltaTime;\n        pastInterests = _borrowAmountWithInterests * x / (BASIS_POINTS * SECONDS_PER_YEAR + x);\n    }\n\n    function calculateInterests(uint256 _borrowAmount, uint256 _interestRate, uint256 _siloShareFee, uint256 _deltaTime)\n        public\n        pure\n        returns (uint256 interests, uint256 siloInterestShare)\n    {\n        uint256 fullInterests = _borrowAmount * _interestRate * _deltaTime;\n\n        unchecked {\n            interests = fullInterests / BASIS_POINTS / SECONDS_PER_YEAR;\n            siloInterestShare = interests * _siloShareFee / BASIS_POINTS;\n        }\n    }\n}\n"
    },
    "contracts/lib/EasyMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.7;\n\nlibrary EasyMath {\n    function abs(int256 x) internal pure returns (uint256) {\n        return x <= 0 ? uint256(-x) : uint256(x);\n    }\n\n    function toShare(uint256 amount, uint256 totalAmount, uint256 totalShares) internal pure returns (uint256) {\n        if (totalShares == 0 || totalAmount == 0) {\n            return amount;\n        }\n        return amount * totalShares / totalAmount;\n    }\n\n    function toAmount(uint256 share, uint256 totalAmount, uint256 totalShares) internal pure returns (uint256) {\n        if (totalShares == 0 || totalAmount == 0) {\n            return 0;\n        }\n        return share * totalAmount / totalShares;\n    }\n\n    /// from 18 decimals to basis points (4 decimals)\n    function toBasisPoint(uint256 amount) internal pure returns (uint256) {\n        return amount / 1e14;\n    }\n\n    /// from basis points (4 decimals) ot 18 decimals\n    function fromBasisPoint(uint256 amount) internal pure returns (uint256) {\n        return amount * 1e14;\n    }\n\n    /// from 18 decimals to basis points (4 decimals)\n    function toBasisPoint(int256 amount) internal pure returns (int256) {\n        return amount / 1e14;\n    }\n\n    /// from basis points (4 decimals) ot 18 decimals\n    function fromBasisPoint(int256 amount) internal pure returns (int256) {\n        return amount * 1e14;\n    }\n}\n"
    },
    "contracts/VirtualBalances.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity 0.8.7;\n\nimport \"./InterestRateModel.sol\";\nimport \"./interfaces/IVirtualBalances.sol\";\n\n// import \"hardhat/console.sol\";\n\ncontract VirtualBalances is IVirtualBalances, InterestRateModel {\n    /// @dev max iterations for calculating virtual interests rates, see `getInterestRate()`\n    ///         interests rates can be different for each interval, they are calculated in a loop\n    ///         in order to not run out of gas and do not lock silo, we need to stop iterating and apply flat rate\n    uint256 public immutable iterationsBeforeFlatRate;\n\n    constructor(\n        uint64 _pidUtilizationOptimal,\n        uint64 _pidKp,\n        uint64 _interestsRateInterval,\n        uint64 _iterationsBeforeFlatRate\n    ) InterestRateModel(_pidUtilizationOptimal, _pidKp, _interestsRateInterval) {\n        require(_iterationsBeforeFlatRate != 0, \"VirtualBalances: invalid _intervalIterationsForFlatRate\");\n\n        iterationsBeforeFlatRate = uint256(_iterationsBeforeFlatRate);\n    }\n\n    /// @dev this is helper for gas calculations\n    function calcGasForInterestData(VirtualBalancesInputData calldata _input) external {\n        _getInterestData(_input);\n    }\n\n    /// @inheritdoc IVirtualBalances\n    function getInterestData(VirtualBalancesInputData calldata _input)\n        external view override returns (VirtualBalancesOutput memory output)\n    {\n        output = _getInterestData(_input);\n        output.newBorrowAmountUpdateTimestamp = _input.currentTimestamp;\n    }\n\n    function preIterationCalculations(VirtualBalancesInputData calldata _input) public view returns (\n        uint256 newDeposit,\n        uint256 newBorrowAmount,\n        uint256 interestRateTimestampAfterIterations,\n        uint256 maxIterations\n    ) {\n        unchecked {\n            require(\n                _input.borrowAmountLastUpdateTimestamp - _input.interestRateLastUpdateTimestamp < interestsRateInterval,\n                \"_calculateDebtAndInterest: invalid timestamps\"\n            );\n\n            uint256 timePassed = _input.borrowAmountLastUpdateTimestamp - _input.interestRateLastUpdateTimestamp;\n            uint256 passedInterests = calculatePastInterests(_input.borrowAmount, _input.interestRate, timePassed);\n            uint256 siloPassedInterests  = passedInterests * _input.siloShareFee / BASIS_POINTS;\n\n            // when we subtract this interests, we can do full iterations for first period\n            newBorrowAmount = _input.borrowAmount - passedInterests;\n            newDeposit = _input.deposit - siloPassedInterests;\n\n            // at this moment we know, we will do at least one iteration, so:\n            // _input.currentTimestamp is >= _input.interestRateLastUpdateTimestamp + iteration\n\n            uint256 borrowAmountFullDeltaTime = _input.currentTimestamp - _input.interestRateLastUpdateTimestamp;\n            maxIterations = borrowAmountFullDeltaTime / interestsRateInterval;\n            // console.log(\"%s - %s\", _input.currentTimestamp, _input.interestRateLastUpdateTimestamp);\n            // console.log(\"borrowAmountFullDeltaTime %s, max: %s\", borrowAmountFullDeltaTime, maxIterations);\n\n            if (maxIterations > iterationsBeforeFlatRate) {\n                maxIterations = iterationsBeforeFlatRate;\n            }\n\n            return (\n                newDeposit,\n                newBorrowAmount,\n                _input.interestRateLastUpdateTimestamp + maxIterations * interestsRateInterval,\n                maxIterations\n            );\n        }\n    }\n\n    /// @dev should always calculate all interest, regardless of the intervals.\n    ///      Intervals should be used only to change interest rate.\n    function _getInterestData(VirtualBalancesInputData calldata _input)\n        internal\n        view\n        returns (VirtualBalancesOutput memory output)\n    {\n        unchecked {\n            if (_input.borrowAmount == 0) {\n                output.newInterestRateTimestamp =\n                    _input.currentTimestamp - (_input.currentTimestamp % interestsRateInterval);\n\n                output.newDeposit = _input.deposit;\n\n                return output;\n            }\n\n            if (_input.deposit == 0) {\n                // TODO this is still weird case, is it possible to have _borrowAmount > 0 and _deposit == 0?\n                //      idk what should be correct values here\n                output.newBorrowAmount = _input.borrowAmount;\n                output.newInterestRate = _input.interestRate;\n                output.newInterestRateTimestamp = _input.interestRateLastUpdateTimestamp;\n\n                return output;\n            }\n\n            (\n                output.newDeposit,\n                output.newBorrowAmount,\n                output.newInterestRate,\n                output.newInterestRateTimestamp\n            ) = _calculateDebtAndInterest(_input);\n\n            require(\n                _input.borrowAmount <= output.newBorrowAmount,\n                \"VirtualBalances._getInterestRate: borrowAmount overflow\"\n            );\n\n            output.totalInterests = output.newBorrowAmount - _input.borrowAmount;\n        }\n    }\n\n    // TODO return number of iterations?\n    // solhint-disable-next-line function-max-lines\n    function _calculateDebtAndInterest(VirtualBalancesInputData calldata _input) internal view returns (\n        uint256 newDeposit,\n        uint256 newBorrowAmount,\n        uint256 newInterestRate,\n        uint256 newInterestRateTimestamp\n    ) {\n        uint256 interestRateTimestampAfterIterations;\n        uint256 maxIterations;\n        newInterestRate = _input.interestRate;\n\n        (\n            newDeposit,\n            newBorrowAmount,\n            interestRateTimestampAfterIterations,\n            maxIterations\n        ) = preIterationCalculations(_input);\n\n        // TODO test how much iterations it can handle but not on its own - inside tx when we will be updating interests\n        // TODO is recurrence more optimal way?\n        // we doing \"full\" iterations, means every deltaTime is equal to interestsRateInterval\n        while (maxIterations != 0) {\n            unchecked {\n                maxIterations--;\n\n                (uint256 interests, uint256 siloInterestShare) = calculateInterests(\n                    newBorrowAmount,\n                    newInterestRate,\n                    _input.siloShareFee,\n                    interestsRateInterval\n                );\n\n                newBorrowAmount += interests;\n                newDeposit += siloInterestShare;\n                newInterestRate = interestRateForInterval(_input.deposit, newBorrowAmount, newInterestRate);\n            }\n        }\n\n        uint256 timeLeft = _input.currentTimestamp - interestRateTimestampAfterIterations;\n\n        // we need to handle last step, it might be:\n        // - because we have flat rate\n        // - because last iteration is not for full interval\n        if (timeLeft != 0) {\n            (uint256 interests, uint256 siloInterestShare) = calculateInterests(\n                newBorrowAmount,\n                newInterestRate,\n                _input.siloShareFee,\n                timeLeft\n            );\n\n            newBorrowAmount += interests;\n            newDeposit += siloInterestShare;\n        }\n\n        newInterestRateTimestamp = _input.currentTimestamp - (_input.currentTimestamp % interestsRateInterval);\n    }\n}\n"
    },
    "contracts/interfaces/IVirtualBalances.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity 0.8.7;\n\ninterface IVirtualBalances {\n    /// @param currentTimestamp block.timestamp\n    /// @param siloShareFee BASIS_POINTS - factory.protocolShareFee\n    /// @param deposit total deposit of the asset\n    /// @param borrowAmount total borrow amount\n    /// @param borrowAmountLastUpdateTimestamp time when `borrowAmount` was updated\n    /// @param interestRate interest rate at `interestRateLastUpdateTimestamp`\n    /// @param interestRateLastUpdateTimestamp time when `interestRate` was updated\n    struct VirtualBalancesInputData {\n        uint256 currentTimestamp;\n        uint256 siloShareFee;\n        uint256 deposit;\n        uint256 borrowAmount;\n        uint256 borrowAmountLastUpdateTimestamp;\n        uint256 interestRate;\n        uint256 interestRateLastUpdateTimestamp;\n    }\n\n    /// @param newDeposit new deposit after apply interests for interval\n    /// @param newBorrowAmount new borrowAmount after apply interests for interval\n    /// @param newBorrowAmountUpdateTimestamp timestamp for `newBorrowAmount`\n    /// @param newInterestRate new current interest rate\n    /// @param newInterestRateTimestamp timestamp for `newInterestRate`\n    /// @param totalInterests interest for provided period of time\n    ///        from `borrowAmountLastUpdateTimestamp` to `newBorrowAmountUpdateTimestamp`\n    /// @param protocolInterestShare % for protocol\n    /// @param siloInterestShare % for users\n    struct VirtualBalancesOutput {\n        uint256 newDeposit;\n        uint256 newBorrowAmount;\n        uint256 newBorrowAmountUpdateTimestamp;\n        uint256 newInterestRate;\n        uint256 newInterestRateTimestamp;\n        uint256 totalInterests;\n        uint256 protocolInterestShare;\n        uint256 siloInterestShare;\n    }\n\n    /// @notice calculates total interests since `_lastUpdateTimestamp`\n    /// @param _params see VirtualBalancesInputData\n    /// @return output see InterestDataOuptut\n    function getInterestData(VirtualBalancesInputData memory _params)\n        external view returns (VirtualBalancesOutput memory output);\n}\n"
    },
    "contracts/SiloFactory.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity 0.8.7;\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport \"@openzeppelin/contracts/proxy/Clones.sol\";\nimport \"./interfaces/ISiloFactory.sol\";\nimport \"./interfaces/ISiloBridgePool.sol\";\nimport \"./interfaces/ISiloOracleRepository.sol\";\nimport \"./interfaces/IVirtualBalances.sol\";\n\nimport \"./utils/GuardedLaunch.sol\";\nimport \"./Silo.sol\";\n\ncontract SiloFactory is ISiloFactory, GuardedLaunch {\n    /// @dev SiloConfig struct represents configurable parameters for each Silo\n    struct SiloConfig {\n        /// @dev Loan-to-Value ratio represents the maximum borrowing power of a specific collateral.\n        ///      For example, if a collateral has a LTV of 75%, the user can borrow up to 0.75 worth\n        ///      of ETH in the principal currency for every 1 ETH worth of collateral.\n        uint256 maxLoanToValue;\n\n        /// @dev Liquidation Threshold represents the threshold at which a borrow position will be considered\n        ///      undercollateralized and subject to liquidation for each collateral. For example,\n        ///      if a collateral has a liquidation threshold of 80%, it means that the loan will be\n        ///      liquidated when the borrowAmount value is worth 80% of the collateral value.\n        uint256 liquidationThreshold;\n\n        address virtualBalances;\n    }\n\n    uint256 public constant BASIS_POINTS = 10000;\n    //Implementation of Silo for cloning\n    address public immutable siloImplementation;\n\n    /// @dev Default values for SiloConfig. Used if values are not configured manually.\n    SiloConfig public defaultSiloConfig;\n    address public override bridgeAsset;\n\n    /// @dev one time protocol fee for opening a borrow position in basis points\n    uint256 public override entryFee;\n    /// @dev protocol revenue share in interest paid\n    uint256 public override protocolShareFee;\n    /// @dev protocol share in liquidation profit\n    uint256 public protocolLiquidationFee;\n\n    address public override bridgePool;\n    address public override oracle;\n    address public override router;\n\n    /// @dev maps token address to silo address, token => silo\n    mapping(address => address) public override silo;\n    /// @dev maps token address to silo address, silo => token\n    mapping(address => address) public siloReverse;\n    /// @dev maps silo address to its config\n    mapping(address => SiloConfig) public siloConfigs;\n\n    event NewSilo(address indexed silo, address indexed asset, string name, string symbol);\n    event InterestRateModel(address oldModel, address newModel);\n    event BridgePoolUpdate(address oldPool, address newPool);\n    event OracleUpdate(address oldOracle, address newOracle);\n    event RouterUpdate(address oldRouter, address newRouter);\n    event FeeUpdate(\n        uint256 oldEntryFee,\n        uint256 newEntryFee,\n        uint256 oldProtocolShareFee,\n        uint256 newProtocolShareFee,\n        uint256 oldProtocolLiquidationFee,\n        uint256 newProtocolLiquidationFee\n    );\n\n    constructor(\n        uint256 _defaultMaxLTV,\n        uint256 _defaultLiquidationThreshold,\n        address _bridgeAsset\n    ) {\n        __TwoStepOwnableUpgradeable_init();\n        defaultSiloConfig.maxLoanToValue = _defaultMaxLTV;\n        defaultSiloConfig.liquidationThreshold = _defaultLiquidationThreshold;\n        bridgeAsset = _bridgeAsset;\n        Silo siloImpl = new Silo();\n        siloImpl.initialize(_bridgeAsset, \"Silo\", \"silo\");\n        siloImplementation = address(siloImpl);\n    }\n\n    function setFees(uint256 _entryFee, uint256 _protocolShareFee, uint256 _protocolLiquidationFee) external onlyOwner {\n        emit FeeUpdate(\n            entryFee,\n            _entryFee,\n            protocolShareFee,\n            _protocolShareFee,\n            protocolLiquidationFee,\n            _protocolLiquidationFee\n        );\n\n        entryFee = _entryFee;\n        protocolShareFee = _protocolShareFee;\n        protocolLiquidationFee = _protocolLiquidationFee;\n    }\n\n    function setSiloConfig(\n        address _silo,\n        uint256 _maxLoanToValue,\n        uint256 _liquidationThreshold,\n        address _interestRateModel\n    ) external onlyOwner {\n        siloConfigs[_silo] = SiloConfig(_maxLoanToValue, _liquidationThreshold, _interestRateModel);\n    }\n\n    function setDefaultVirtualBalances(address _defaultInterestRateModel) external onlyOwner {\n        require(_defaultInterestRateModel != address(0), \"SiloFactory: new defaultInterestRateModel is zero address\");\n        emit InterestRateModel(defaultSiloConfig.virtualBalances, _defaultInterestRateModel);\n        defaultSiloConfig.virtualBalances = _defaultInterestRateModel;\n    }\n\n    function setDefaultMaximumLTV(uint256 _defaultMaxLTV) external onlyOwner {\n        defaultSiloConfig.maxLoanToValue = _defaultMaxLTV;\n    }\n\n    function setDefaultLiquidationThreshold(uint256 _defaultLiquidationThreshold) external onlyOwner {\n        defaultSiloConfig.liquidationThreshold = _defaultLiquidationThreshold;\n    }\n\n    function setBridgePool(address _bridgePool) external onlyOwner {\n        require(_bridgePool != address(0), \"SiloFactory: new bridgePool is zero address\");\n        emit BridgePoolUpdate(bridgePool, _bridgePool);\n        bridgePool = _bridgePool;\n    }\n\n    function setOracle(address _oracle) external onlyOwner {\n        require(_oracle != address(0), \"SiloFactory: new oracle is zero address\");\n        emit OracleUpdate(oracle, _oracle);\n        oracle = _oracle;\n    }\n\n    function setRouter(address _router) external onlyOwner {\n        require(_router != address(0), \"SiloFactory: new router is zero address\");\n        emit RouterUpdate(router, _router);\n        router = _router;\n    }\n\n    function isSilo(address _silo) external view override returns (bool) {\n        return siloReverse[_silo] != address(0);\n    }\n\n    function getMaximumLTV(address _silo) external view override returns (uint256) {\n        uint256 maxLoanToValue = siloConfigs[_silo].maxLoanToValue;\n        if (maxLoanToValue != 0) {\n            return maxLoanToValue;\n        }\n        return defaultSiloConfig.maxLoanToValue;\n    }\n\n    function getVirtualBalances(address _silo) external view override returns (address) {\n        address interestRateModel = siloConfigs[_silo].virtualBalances;\n        if (interestRateModel != address(0)) {\n            return interestRateModel;\n        }\n        return defaultSiloConfig.virtualBalances;\n    }\n\n    function getLiquidationThreshold(address _silo) external view override returns (uint256) {\n        uint256 liquidationThreshold = siloConfigs[_silo].liquidationThreshold;\n        if (liquidationThreshold != 0) {\n            return liquidationThreshold;\n        }\n        return defaultSiloConfig.liquidationThreshold;\n    }\n\n    /// @param _asset silo asset\n    /// @param _oracle (optional) if provided, asset will be initialised on that oracle\n    ///        it does not mean, this oracle will be chosen for asset, it only means, after valid initialization,\n    ///        it could be chosen, if is is the best one\n    /// @param _oracleData custom data for oracle initialization\n    function newSilo(address _asset, address _oracle, bytes calldata _oracleData) public isPermissionedSiloCreation {\n        require(_asset != bridgeAsset, \"SiloFactory: bridge asset\");\n        require(silo[_asset] == address(0), \"SiloFactory: silo exists\");\n\n        string memory name = string(abi.encodePacked(string(\"Silo \"), ERC20(_asset).name()));\n        string memory symbol = string(abi.encodePacked(string(\"silo\"), ERC20(_asset).symbol()));\n\n        address _silo = Clones.clone(siloImplementation);\n        Silo(_silo).initialize(_asset, name, symbol);\n        silo[_asset] = _silo;\n        siloReverse[_silo] = _asset;\n        emit NewSilo(_silo, _asset, name, symbol);\n\n        ISiloBridgePool(bridgePool).addSilo(_silo, name, symbol);\n        ISiloOracleRepository(oracle).initOracleForAsset(_asset, _oracle, _oracleData);\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"./extensions/IERC20Metadata.sol\";\nimport \"../../utils/Context.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20, IERC20Metadata {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * The default value of {decimals} is 18. To select a different value for\n     * {decimals} you should overload it.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n     * overridden;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `recipient` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * Requirements:\n     *\n     * - `sender` and `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``sender``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        _transfer(sender, recipient, amount);\n\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\n        require(currentAllowance >= amount, \"ERC20: transfer amount exceeds allowance\");\n        unchecked {\n            _approve(sender, _msgSender(), currentAllowance - amount);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `sender` cannot be the zero address.\n     * - `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     */\n    function _transfer(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) internal virtual {\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(sender, recipient, amount);\n\n        uint256 senderBalance = _balances[sender];\n        require(senderBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[sender] = senderBalance - amount;\n        }\n        _balances[recipient] += amount;\n\n        emit Transfer(sender, recipient, amount);\n\n        _afterTokenTransfer(sender, recipient, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        _balances[account] += amount;\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n        }\n        _totalSupply -= amount;\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n}\n"
    },
    "@openzeppelin/contracts/proxy/Clones.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev https://eips.ethereum.org/EIPS/eip-1167[EIP 1167] is a standard for\n * deploying minimal proxy contracts, also known as \"clones\".\n *\n * > To simply and cheaply clone contract functionality in an immutable way, this standard specifies\n * > a minimal bytecode implementation that delegates all calls to a known, fixed address.\n *\n * The library includes functions to deploy a proxy using either `create` (traditional deployment) or `create2`\n * (salted deterministic deployment). It also includes functions to predict the addresses of clones deployed using the\n * deterministic method.\n *\n * _Available since v3.4._\n */\nlibrary Clones {\n    /**\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\n     *\n     * This function uses the create opcode, which should never revert.\n     */\n    function clone(address implementation) internal returns (address instance) {\n        assembly {\n            let ptr := mload(0x40)\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\n            instance := create(0, ptr, 0x37)\n        }\n        require(instance != address(0), \"ERC1167: create failed\");\n    }\n\n    /**\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\n     *\n     * This function uses the create2 opcode and a `salt` to deterministically deploy\n     * the clone. Using the same `implementation` and `salt` multiple time will revert, since\n     * the clones cannot be deployed twice at the same address.\n     */\n    function cloneDeterministic(address implementation, bytes32 salt) internal returns (address instance) {\n        assembly {\n            let ptr := mload(0x40)\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\n            instance := create2(0, ptr, 0x37, salt)\n        }\n        require(instance != address(0), \"ERC1167: create2 failed\");\n    }\n\n    /**\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\n     */\n    function predictDeterministicAddress(\n        address implementation,\n        bytes32 salt,\n        address deployer\n    ) internal pure returns (address predicted) {\n        assembly {\n            let ptr := mload(0x40)\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf3ff00000000000000000000000000000000)\n            mstore(add(ptr, 0x38), shl(0x60, deployer))\n            mstore(add(ptr, 0x4c), salt)\n            mstore(add(ptr, 0x6c), keccak256(ptr, 0x37))\n            predicted := keccak256(add(ptr, 0x37), 0x55)\n        }\n    }\n\n    /**\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\n     */\n    function predictDeterministicAddress(address implementation, bytes32 salt)\n        internal\n        view\n        returns (address predicted)\n    {\n        return predictDeterministicAddress(implementation, salt, address(this));\n    }\n}\n"
    },
    "contracts/interfaces/ISiloFactory.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity 0.8.7;\n\ninterface ISiloFactory {\n    function isSilo(address silo) external view returns (bool);\n    function silo(address silo) external view returns (address);\n    function router() external view returns (address);\n    function bridgePool() external view returns (address);\n    function bridgeAsset() external view returns (address);\n    function oracle() external view returns (address);\n    function entryFee() external view returns (uint256);\n    function protocolShareFee() external view returns (uint256);\n    function getVirtualBalances(address silo) external view returns (address);\n    function getMaximumLTV(address silo) external view returns (uint256);\n    function getLiquidationThreshold(address silo) external view returns (uint256);\n}\n"
    },
    "contracts/interfaces/ISiloBridgePool.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity 0.8.7;\n\ninterface ISiloBridgePool {\n    function depositFor(address silo, address user, uint256 amount) external;\n    function borrowFor(address silo, address user, address to, uint256 amount) external;\n    function seizeCollateral(address user, address liquidator) external returns (uint256);\n    function addSilo(address silo, string memory name, string memory symbol) external;\n    function getCollateralValue(address silo, address user) external view returns (uint256);\n    function getLTV(address silo, address user) external view returns (uint256);\n    function isSolvent(address silo, address user) external view returns (bool);\n    function asset() external view returns (address);\n}\n"
    },
    "contracts/interfaces/ISiloOracleRepository.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity 0.8.7;\n\ninterface ISiloOracleRepository {\n    function addOracle(address oracle) external;\n    function removeOracle(uint256 oracleId) external;\n    function initOracleForAsset(address _asset, address _oracle, bytes calldata _data) external;\n    function setBestOracleForAsset(address _asset) external returns (address bestOracle);\n    function changeBestOracleForAsset(address asset, address oracle) external;\n    // TODO do research (do we need to refresh price?) and make sure this can stay as a view\n    function getPrice(address token) external view returns (uint256);\n}\n"
    },
    "contracts/utils/GuardedLaunch.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity 0.8.7;\n\nimport \"../interfaces/IGuardedLaunch.sol\";\nimport \"./TwoStepOwnableUpgradeable.sol\";\n\ncontract GuardedLaunch is IGuardedLaunch, TwoStepOwnableUpgradeable {\n    /// @dev SiloLiquidityConfig struct represents maximum allowed deposit limits for each Silo\n    struct SiloLimitConfig {\n        uint256 maxDeposits;\n        uint256 maxBridgeDeposits;\n    }\n\n    uint256 public constant INFINITY = type(uint256).max;\n\n    // @dev flag for guarded functionality\n    bool public guardedLaunch;\n    // @dev flag to limit permissionless Silo creation\n    bool public permissionedSiloCreation;\n    // @dev flag to limit max liquidity on Silos\n    bool public limitedMaxLiquidity;\n    SiloLimitConfig public defaultSiloLimitConfig;\n\n    mapping(address => SiloLimitConfig) public siloLimitConfigs;\n\n    event GuardedLaunchToggled(bool newGuardedLaunchState);\n    event PermissionedSiloCreationToggled(bool newPermissionedSiloCreationState);\n    event LimitedMaxLiquidityToggled(bool newLimitedMaxLiquidityState);\n    event SiloLimitConfigUpdate(address indexed silo, uint256 newMaxDeposits, uint256 newMaxBridgeDeposits);\n\n    modifier isPermissionedSiloCreation() {\n        require(\n            owner() == _msgSender() ||\n            !(guardedLaunch && permissionedSiloCreation), \"Silo: only owner can perform\"\n        );\n        _;\n    }\n\n    constructor() {\n        /// @dev All guarded launch flags are turned ON by default\n        guardedLaunch = true;\n        permissionedSiloCreation = true;\n        limitedMaxLiquidity = true;\n        /// @dev Default values for SiloLiquidityConfig are both 50 ETH\n        defaultSiloLimitConfig.maxDeposits = 50 ether;\n        defaultSiloLimitConfig.maxBridgeDeposits = 50 ether;\n    }\n\n    function toggleGuardedLaunch() external onlyOwner {\n        guardedLaunch = !guardedLaunch;\n        emit GuardedLaunchToggled(guardedLaunch);\n    }\n\n    function togglePermissionedSiloCreation() external onlyOwner {\n        permissionedSiloCreation = !permissionedSiloCreation;\n        emit PermissionedSiloCreationToggled(permissionedSiloCreation);\n    }\n\n    function toggleLimitedMaxLiquidity() external onlyOwner {\n        limitedMaxLiquidity = !limitedMaxLiquidity;\n        emit LimitedMaxLiquidityToggled(limitedMaxLiquidity);\n    }\n\n    function setSiloLimitConfig(\n        address _silo,\n        uint256 _maxDeposits,\n        uint256 _maxBridgeDeposits\n    ) external onlyOwner {\n        siloLimitConfigs[_silo] = SiloLimitConfig(\n            _maxDeposits,\n            _maxBridgeDeposits\n        );\n        emit SiloLimitConfigUpdate(_silo, _maxDeposits, _maxBridgeDeposits);\n    }\n\n    function getMaxSiloDeposits(address _silo) external view override returns (uint256) {\n        if (guardedLaunch && limitedMaxLiquidity) {\n            uint256 maxDeposits = siloLimitConfigs[_silo].maxDeposits;\n            if (maxDeposits != 0) {\n                return maxDeposits;\n            }\n            return defaultSiloLimitConfig.maxDeposits;\n        }\n        return INFINITY;\n    }\n\n    function getMaxSiloBridgeDeposits(address _silo) external view override returns (uint256) {\n        if (guardedLaunch && limitedMaxLiquidity) {\n            uint256 maxBridgeDeposits = siloLimitConfigs[_silo].maxBridgeDeposits;\n            if (maxBridgeDeposits != 0) {\n                return maxBridgeDeposits;\n            }\n            return defaultSiloLimitConfig.maxBridgeDeposits;\n        }\n        return INFINITY;\n    }\n}\n"
    },
    "contracts/Silo.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity 0.8.7;\n\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\n\nimport \"./interfaces/ISilo.sol\";\nimport \"./interfaces/ISiloFactory.sol\";\nimport \"./interfaces/IGuardedLaunch.sol\";\nimport \"./interfaces/ISiloBridgePool.sol\";\nimport \"./interfaces/ISiloOracleRepository.sol\";\nimport \"./interfaces/IVirtualBalances.sol\";\n\nimport \"./lib/EasyMath.sol\";\n\ncontract Silo is Initializable, ISilo, ERC20Upgradeable, ReentrancyGuardUpgradeable {\n    using SafeERC20 for ERC20;\n    using EasyMath for uint256;\n\n    uint256 public constant BASIS_POINTS = 10000;\n    uint256 public constant INFINITY = type(uint256).max;\n\n    // solhint-disable-next-line var-name-mixedcase\n    uint256 public DECIMAL_POINTS; // TODO make it immutable\n    ISiloFactory public factory;\n\n    address public override asset;\n    uint256 public totalDeposits;\n    uint256 public totalBorrowShare;\n    uint256 public totalBorrowAmount;\n    uint256 public interestRate;\n    uint256 public protocolFees;\n    uint256 public borrowAmountLastUpdateTimestamp;  // TODO it might be uint32\n    uint256 public interestRateLastUpdateTimestamp;  // TODO it might be uint32\n\n    mapping(address => uint256) public borrowShare;\n\n    event Deposit(address indexed user, uint256 amount);\n    event Withdraw(address indexed user, uint256 amount);\n    event Borrow(address indexed user, uint256 amount);\n    event Repay(address indexed user, uint256 amount);\n    event Liquidate(address indexed _user, uint256 amountRepaid, uint256 seizedCollateral);\n\n    modifier onlyRouter() {\n        require(msg.sender == factory.router(), \"Silo: onlyRouter\");\n        _;\n    }\n\n    modifier onlyBridge() {\n        require(msg.sender == factory.bridgePool(), \"Silo: onlyBridge\");\n        _;\n    }\n\n    modifier interest() {\n        accrueInterest();\n        _;\n    }\n\n    /// @dev check if user has enough collateral deposited to silo to support withstanding borrow position on bridgePool\n    modifier bridgePositionSolvent(address _user) {\n        _;\n        ISiloBridgePool bridgePool = ISiloBridgePool(factory.bridgePool());\n        require(bridgePool.isSolvent(address(this), _user), \"Silo: not solvent in bridge position\");\n    }\n\n    modifier validateBorrow(address _user) {\n        _;\n        require(\n            getLTV(_user) <= factory.getMaximumLTV(address(this)),\n            \"Silo: maximumLTV\"\n        );\n    }\n\n    modifier validateMaxDeposits() {\n        _;\n        ISiloOracleRepository oracle = ISiloOracleRepository(factory.oracle());\n        require(\n            oracle.getPrice(asset) * totalDeposits / DECIMAL_POINTS <=\n                IGuardedLaunch(address(factory)).getMaxSiloDeposits(address(this)),\n            \"Silo: total deposits exceed liquidity limit\"\n        );\n    }\n\n    function deposit(uint256 _amount) external override {\n        _deposit(msg.sender, msg.sender, _amount);\n    }\n\n    function depositFor(address _user, uint256 _amount) external override onlyRouter {\n        _deposit(_user, msg.sender, _amount);\n    }\n\n    function withdraw(uint256 _amount) external override {\n        _withdraw(msg.sender, _amount);\n    }\n\n    function withdrawFor(address _user, uint256 _amount) external override onlyRouter {\n        _withdraw(_user, _amount);\n    }\n\n    function borrow(uint256 _amount) external override validateBorrow(msg.sender) interest  {\n        _borrow(msg.sender, msg.sender, _amount);\n    }\n\n    function borrowFor(address _user, address _to, uint256 _amount)\n        external override onlyRouter validateBorrow(_user) interest\n    {\n        _borrow(_user, _to, _amount);\n    }\n\n    function repay(uint256 _amount) external override nonReentrant {\n        _repay(msg.sender, msg.sender, _amount);\n    }\n\n    function repayFor(address _user, uint256 _amount) external override nonReentrant onlyRouter {\n        _repay(_user, msg.sender, _amount);\n    }\n\n    function seizeCollateral(address _user, address _liquidator) external override onlyBridge returns (uint256) {\n        uint256 collateral = balanceOf(_user);\n        _transfer(_user, _liquidator, collateral);\n        return collateral.toAmount(totalDeposits, totalSupply());\n    }\n\n    function liquidate(address[] memory _users) external override nonReentrant interest returns (uint256[] memory) {\n        uint256[] memory liquidated = new uint256[](_users.length);\n        uint256 n = _users.length;\n        for (uint256 i = 0; i < n; i++) {\n            liquidated[i] = _liquidate(_users[i]);\n        }\n        return liquidated;\n    }\n\n    function initialize(\n        address _asset,\n        string memory _name,\n        string memory _symbol\n    ) public initializer {\n        __Context_init_unchained();\n        __ReentrancyGuard_init_unchained();\n        __ERC20_init_unchained(_name, _symbol);\n        factory = ISiloFactory(msg.sender);\n        asset = _asset;\n        DECIMAL_POINTS = 10**ERC20(_asset).decimals();\n    }\n\n    /// @dev should always calculate all interest based on current timestamp, regardless of the intervals.\n    ///      Intervals should be used only to change interest rate.\n    function accrueInterest() public {\n        uint256 borrowAmountLastUpdateTimestampCached = borrowAmountLastUpdateTimestamp;\n        uint256 totalDepositsCached = totalDeposits;\n        uint256 blockTimestamp = block.timestamp;\n\n        if (blockTimestamp == borrowAmountLastUpdateTimestampCached) {\n            return;\n        }\n\n        address model = factory.getVirtualBalances(address(this));\n\n        IVirtualBalances.VirtualBalancesOutput memory output = IVirtualBalances(model).getInterestData(\n            IVirtualBalances.VirtualBalancesInputData({\n                currentTimestamp: blockTimestamp,\n                deposit: totalDepositsCached,\n                siloShareFee: BASIS_POINTS - factory.protocolShareFee(),\n                borrowAmount: totalBorrowAmount,\n                borrowAmountLastUpdateTimestamp: borrowAmountLastUpdateTimestampCached,\n                interestRate: interestRate,\n                interestRateLastUpdateTimestamp: interestRateLastUpdateTimestamp\n            })\n        );\n\n        totalBorrowAmount = output.newBorrowAmount;\n        borrowAmountLastUpdateTimestamp = output.newBorrowAmountUpdateTimestamp;\n        interestRate = output.newInterestRate;\n        interestRateLastUpdateTimestamp = output.newInterestRateTimestamp;\n\n        // accrue interest\n        (\n            protocolFees,\n            totalDeposits\n        ) = calculateInterestShares(protocolFees, totalDepositsCached, output.totalInterests);\n    }\n\n    function getTotalDepositsUpdated() public view returns (uint256 _totalDeposits) {\n        IVirtualBalances.VirtualBalancesOutput memory output = _executeInterestRateCalculations();\n        (,_totalDeposits) = calculateInterestShares(protocolFees, totalDeposits, output.totalInterests);\n    }\n\n    function isSolvent(address _user) public view override returns (bool) {\n        require(_user != address(0), \"Silo: user != address(0)\");\n        uint256 liquidationThreshold = factory.getLiquidationThreshold(address(this));\n        return getLTV(_user) <= liquidationThreshold;\n    }\n\n    function getLTV(address _user) public view returns (uint256) {\n        uint256 borrowAmountValue = getBorrowAmountValue(_user);\n        if (borrowAmountValue == 0) return 0;\n\n        ISiloBridgePool bridgePool = ISiloBridgePool(factory.bridgePool());\n        uint256 collateralValue = bridgePool.getCollateralValue(address(this), _user);\n        if (collateralValue == 0) return INFINITY;\n        return borrowAmountValue * BASIS_POINTS / collateralValue;\n    }\n\n    /// @dev value of collateral (asset) provided by user\n    function getCollateralValue(address _user) public view override returns (uint256) {\n        ISiloOracleRepository oracle = ISiloOracleRepository(factory.oracle());\n        uint256 assetPrice = oracle.getPrice(asset);\n        uint256 assetAmount = balanceOf(_user).toAmount(getTotalDepositsUpdated(), totalSupply());\n        return assetAmount * assetPrice / DECIMAL_POINTS;\n    }\n\n    /// @dev value of asset borrowed by user\n    function getBorrowAmountValue(address _user) public view returns (uint256) {\n        ISiloOracleRepository oracle = ISiloOracleRepository(factory.oracle());\n\n        // TODO can we save gas if we do not return whole structure?\n        IVirtualBalances.VirtualBalancesOutput memory output = _executeInterestRateCalculations();\n\n        uint256 assetDebtAmount = borrowShare[_user].toAmount(output.newBorrowAmount, totalBorrowShare);\n        uint256 assetPrice = oracle.getPrice(asset);\n        return assetDebtAmount * assetPrice / DECIMAL_POINTS;\n    }\n\n    function liquidity() public view returns (uint256) {\n        return ERC20(asset).balanceOf(address(this));\n    }\n\n    function balanceOfUnderlying(address _user) public view returns (uint256) {\n        uint256 share = balanceOf(_user);\n        return share.toAmount(getTotalDepositsUpdated(), totalSupply());\n    }\n\n    function calcFee(uint256 _amount) public view returns (uint256) {\n        uint256 entryFee = factory.entryFee();\n        if (entryFee == 0) return 0; // no fee\n        return _amount * entryFee / BASIS_POINTS;\n    }\n\n    function calculateInterestShares(\n        uint256 _protocolFees,\n        uint256 _totalDeposits,\n        uint256 _totalInterestsForDeltaTime\n    ) public view returns (\n        uint256 newProtocolFees,\n        uint256 newTotalDeposits\n    ) {\n        uint256 protocolInterestShare = _totalInterestsForDeltaTime * factory.protocolShareFee() / BASIS_POINTS;\n        uint256 siloInterestShare = _totalInterestsForDeltaTime - protocolInterestShare;\n\n        newProtocolFees = _protocolFees + protocolInterestShare;\n        newTotalDeposits = _totalDeposits + siloInterestShare;\n    }\n\n    function _deposit(address _user, address _from, uint256 _amount)\n        internal\n        nonReentrant\n        interest\n        validateMaxDeposits\n    {\n        require(borrowShare[_user] == 0, \"Silo: cannot deposit & borrow the same asset\");\n\n        uint256 balanceBefore = liquidity();\n        ERC20(asset).safeTransferFrom(_from, address(this), _amount);\n        uint256 balanceAfter = liquidity();\n\n        _amount = balanceAfter - balanceBefore;\n        uint256 share = _amount.toShare(totalDeposits, totalSupply());\n        totalDeposits += _amount;\n        emit Deposit(_user, _amount);\n        _mint(_user, share);\n    }\n\n    function _withdraw(address _user, uint256 _amount) internal nonReentrant bridgePositionSolvent(_user) interest {\n        uint256 share;\n        if (_amount == type(uint256).max) {\n            share = balanceOf(_user);\n            _amount = share.toAmount(totalDeposits, totalSupply());\n        } else {\n            share = _amount.toShare(totalDeposits, totalSupply());\n        }\n        totalDeposits -= _amount;\n        _burn(_user, share);\n        emit Withdraw(_user, _amount);\n\n        ERC20(asset).safeTransfer(_user, _amount);\n    }\n\n    function _borrow(address _user, address _to, uint256 _amount) internal nonReentrant {\n        require(balanceOf(_user) == 0, \"Silo: cannot borrow & deposit the same asset\");\n        require(liquidity() >= _amount, \"Silo: deposit shortage\");\n\n        uint256 fee = calcFee(_amount);\n        // TODO, do we need to apply virtual balances here??\n\n        uint256 borrowerShare = (_amount + fee).toShare(totalBorrowAmount, totalBorrowShare);\n        borrowShare[_user] += borrowerShare;\n        totalBorrowShare += borrowerShare;\n        totalBorrowAmount += _amount + fee;\n        protocolFees += fee;\n\n        emit Borrow(_user, _amount);\n\n        ERC20(asset).safeTransfer(_to, _amount);\n    }\n\n    function _repay(address _user, address _from, uint256 _amount) internal interest returns (uint256) {\n        uint256 repayShare;\n        if (_amount == type(uint256).max) {\n            repayShare = borrowShare[_user];\n            _amount = repayShare.toAmount(totalBorrowAmount, totalBorrowShare);\n        } else {\n            repayShare = _amount.toShare(totalBorrowAmount, totalBorrowShare);\n        }\n\n        borrowShare[_user] -= repayShare;\n        totalBorrowShare -= repayShare;\n        totalBorrowAmount -= _amount;\n\n        emit Repay(_user, _amount);\n\n        ERC20(asset).safeTransferFrom(_from, address(this), _amount);\n\n        //  TODO what about change? if somebody repays more than should\n\n        return _amount;\n    }\n\n    function _liquidate(address _user) internal returns (uint256 seizedCollateral) {\n        // gracefully fail if _user is solvent\n        if (isSolvent(_user)) return 0;\n\n        uint256 amountRepaid = _repay(_user, msg.sender, type(uint256).max);\n\n        ISiloBridgePool bridgePool = ISiloBridgePool(factory.bridgePool());\n        seizedCollateral = bridgePool.seizeCollateral(_user, msg.sender);\n\n        emit Liquidate(_user, amountRepaid, seizedCollateral);\n\n        require(isSolvent(_user), \"Silo: user not solvent\");\n    }\n\n    function _transfer(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) internal virtual override bridgePositionSolvent(sender) {\n        super._transfer(sender, recipient, amount);\n    }\n\n    function _executeInterestRateCalculations()\n        internal\n        view\n        returns (IVirtualBalances.VirtualBalancesOutput memory output)\n    {\n        address model = factory.getVirtualBalances(address(this));\n\n        return IVirtualBalances(model).getInterestData(\n            IVirtualBalances.VirtualBalancesInputData({\n                currentTimestamp: block.timestamp,\n                deposit: totalDeposits,\n                siloShareFee: BASIS_POINTS - factory.protocolShareFee(),\n                borrowAmount: totalBorrowAmount,\n                borrowAmountLastUpdateTimestamp: borrowAmountLastUpdateTimestamp,\n                interestRate: interestRate,\n                interestRateLastUpdateTimestamp: interestRateLastUpdateTimestamp\n            })\n        );\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "contracts/interfaces/IGuardedLaunch.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity 0.8.7;\n\ninterface IGuardedLaunch {\n    function getMaxSiloDeposits(address silo) external view returns (uint256);\n    function getMaxSiloBridgeDeposits(address silo) external view returns (uint256);\n}\n"
    },
    "contracts/utils/TwoStepOwnableUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.7;\n\nimport \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\";\n\nabstract contract TwoStepOwnableUpgradeable is Initializable, ContextUpgradeable {\n    address private _owner;\n    address private _pendingOwner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n    event OwnershipPending(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _setOwner(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _setOwner(newOwner);\n    }\n\n    /**\n     * @dev Transfers pending ownership of the contract to a new account (`newPendingOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferPendingOwnership(address newPendingOwner) public virtual onlyOwner {\n        emit OwnershipPending(owner(), newPendingOwner);\n        _pendingOwner = newPendingOwner;\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a pending owner\n     * Can only be called by the pending owner.\n     */\n    function acceptOwnership() public virtual {\n        require(_msgSender() == pendingOwner(), \"Ownable: caller is not the pendingOwner\");\n        _setOwner(pendingOwner());\n        _pendingOwner = address(0);\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Returns the address of the pending owner.\n     */\n    function pendingOwner() public view virtual returns (address) {\n        return _pendingOwner;\n    }\n\n    /* solhint-disable func-name-mixedcase */\n    function __TwoStepOwnableUpgradeable_init() internal initializer {\n        __Context_init_unchained();\n        __TwoStepOwnableUpgradeable_init_unchained();\n    }\n\n    function __TwoStepOwnableUpgradeable_init_unchained() internal initializer {\n        _setOwner(_msgSender());\n    }\n    /* solhint-enable func-name-mixedcase */\n\n    function _setOwner(address newOwner) private {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal initializer {\n        __Context_init_unchained();\n    }\n\n    function __Context_init_unchained() internal initializer {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n    uint256[50] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     */\n    bool private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Modifier to protect an initializer function from being invoked twice.\n     */\n    modifier initializer() {\n        require(_initializing || !_initialized, \"Initializable: contract is already initialized\");\n\n        bool isTopLevelCall = !_initializing;\n        if (isTopLevelCall) {\n            _initializing = true;\n            _initialized = true;\n        }\n\n        _;\n\n        if (isTopLevelCall) {\n            _initializing = false;\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20Upgradeable.sol\";\nimport \"./extensions/IERC20MetadataUpgradeable.sol\";\nimport \"../../utils/ContextUpgradeable.sol\";\nimport \"../../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20Upgradeable is Initializable, ContextUpgradeable, IERC20Upgradeable, IERC20MetadataUpgradeable {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * The default value of {decimals} is 18. To select a different value for\n     * {decimals} you should overload it.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    function __ERC20_init(string memory name_, string memory symbol_) internal initializer {\n        __Context_init_unchained();\n        __ERC20_init_unchained(name_, symbol_);\n    }\n\n    function __ERC20_init_unchained(string memory name_, string memory symbol_) internal initializer {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n     * overridden;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `recipient` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * Requirements:\n     *\n     * - `sender` and `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``sender``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        _transfer(sender, recipient, amount);\n\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\n        require(currentAllowance >= amount, \"ERC20: transfer amount exceeds allowance\");\n        unchecked {\n            _approve(sender, _msgSender(), currentAllowance - amount);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `sender` cannot be the zero address.\n     * - `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     */\n    function _transfer(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) internal virtual {\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(sender, recipient, amount);\n\n        uint256 senderBalance = _balances[sender];\n        require(senderBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[sender] = senderBalance - amount;\n        }\n        _balances[recipient] += amount;\n\n        emit Transfer(sender, recipient, amount);\n\n        _afterTokenTransfer(sender, recipient, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        _balances[account] += amount;\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n        }\n        _totalSupply -= amount;\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n    uint256[45] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuardUpgradeable is Initializable {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    function __ReentrancyGuard_init() internal initializer {\n        __ReentrancyGuard_init_unchained();\n    }\n\n    function __ReentrancyGuard_init_unchained() internal initializer {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and make it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n    uint256[49] private __gap;\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\nimport \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    function safeTransfer(\n        IERC20 token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20 token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) {\n            // Return data is optional\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
    },
    "contracts/interfaces/ISilo.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity 0.8.7;\n\ninterface ISilo {\n    function deposit(uint256 amount) external;\n    function borrow(uint256 amount) external;\n    function withdraw(uint256 amount) external;\n    function withdrawFor(address user, uint256 amount) external;\n    function repay(uint256 amount) external;\n    function repayFor(address user, uint256 amount) external;\n    function liquidate(address[] memory user) external returns (uint256[] memory);\n    function depositFor(address user, uint256 amount) external;\n    function borrowFor(address user, address to, uint256 amount) external;\n    function seizeCollateral(address user, address liquidator) external returns (uint256);\n    function asset() external view returns (address);\n    function isSolvent(address user) external view returns (bool);\n    function getCollateralValue(address user) external view returns (uint256);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20Upgradeable {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20Upgradeable.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20MetadataUpgradeable is IERC20Upgradeable {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        assembly {\n            size := extcodesize(account)\n        }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "contracts/SiloBridgePool.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity 0.8.7;\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"@openzeppelin/contracts/proxy/Clones.sol\";\n\nimport \"./interfaces/ISilo.sol\";\nimport \"./interfaces/ISiloFactory.sol\";\nimport \"./interfaces/IGuardedLaunch.sol\";\nimport \"./interfaces/ISiloBridgePool.sol\";\nimport \"./interfaces/ISiloOracleRepository.sol\";\nimport \"./interfaces/IVirtualBalances.sol\";\n\nimport \"./utils/BridgeERC20Upgradeable.sol\";\nimport \"./lib/EasyMath.sol\";\n\ncontract SiloBridgePool is ISiloBridgePool, ReentrancyGuard {\n    using SafeERC20 for ERC20;\n    using SafeERC20 for ERC20Upgradeable;\n    using EasyMath for uint256;\n\n    struct BridgeSiloStorage {\n        BridgeERC20Upgradeable token;\n        uint256 totalDeposits;\n        uint256 totalBorrowAmount;\n        uint256 borrowAmountLastUpdateTimestamp;\n        uint256 totalBorrowShare;\n        uint256 interestRate;\n        uint256 interestRateLastUpdateTimestamp;\n        uint256 protocolFees;\n        uint256 deposit;\n        mapping(address => uint256) borrowShare;\n    }\n\n    uint256 public constant BASIS_POINTS = 10000;\n    uint256 public constant INFINITY = type(uint256).max;\n\n    //Implementation of BridgeERC20 for cloning\n    address public immutable bridgeERC20Implementation;\n\n    // solhint-disable-next-line var-name-mixedcase\n    uint256 public immutable DECIMAL_POINTS;\n    ISiloFactory immutable public factory;\n\n    address public override asset;\n\n    // silo address => BridgeSiloStorage\n    mapping(address => BridgeSiloStorage) public state;\n\n    event Deposit(address indexed silo, address indexed user, uint256 amount);\n    event Withdraw(address indexed silo, address indexed user, uint256 amount);\n    event Borrow(address indexed silo, address indexed user, uint256 amount);\n    event Repay(address indexed silo, address indexed user, uint256 amount);\n    event Liquidate(address indexed silo, address indexed _user, uint256 amountRepaid, uint256 seizedCollateral);\n\n    modifier onlyRouter() {\n        require(msg.sender == factory.router(), \"SiloBridgePool: onlyRouter\");\n        _;\n    }\n\n    modifier onlyFactory() {\n        require(msg.sender == address(factory), \"SiloBridgePool: onlyFactory\");\n        _;\n    }\n\n    modifier onlySilo() {\n        require(factory.isSilo(msg.sender), \"SiloBridgePool: onlySilo\");\n        _;\n    }\n\n    modifier interest(address _silo) {\n        accrueInterest(_silo);\n        _;\n    }\n\n    /// @dev check if user has enough collateral deposited to bridgePool to support withstanding borrow position on silo\n    modifier siloPositionSolvent(address _silo, address _user) {\n        _;\n        require(ISilo(_silo).isSolvent(_user), \"SiloBridgePool: not solvent in silo position\");\n    }\n\n    modifier validateBorrow(address _silo, address _user) {\n        _;\n        require(\n            getLTV(_silo, _user) <= factory.getMaximumLTV(address(this)),\n            \"SiloBridgePool: maximumLTV\"\n        );\n    }\n\n    modifier validateMaxDeposits(address _silo) {\n        _;\n        ISiloOracleRepository oracle = ISiloOracleRepository(factory.oracle());\n        require(\n            oracle.getPrice(asset) * state[_silo].totalDeposits / DECIMAL_POINTS <=\n                IGuardedLaunch(address(factory)).getMaxSiloBridgeDeposits(_silo),\n            \"SiloBridgePool: total deposits exceed liquidity limit\"\n        );\n    }\n\n    constructor (address _factory) {\n        factory = ISiloFactory(_factory);\n        asset = ISiloFactory(_factory).bridgeAsset();\n        DECIMAL_POINTS = 10**ERC20Upgradeable(asset).decimals();\n        BridgeERC20Upgradeable bridgeERC20Impl = new BridgeERC20Upgradeable();\n        bridgeERC20Impl.initialize(\"Bridge\", \"bridge\", asset);\n        bridgeERC20Implementation = address(bridgeERC20Impl);\n    }\n\n    function deposit(address _silo, uint256 _amount) external {\n        _deposit(_silo, msg.sender, msg.sender, _amount);\n    }\n\n    function depositFor(address _silo, address _user, uint256 _amount) external override onlyRouter {\n        _deposit(_silo, _user, msg.sender, _amount);\n    }\n\n    function withdraw(address _silo, uint256 _amount) external {\n        _withdraw(_silo, msg.sender, _amount);\n    }\n\n    function withdrawFor(address _silo, address _user, uint256 _amount) external onlyRouter {\n        _withdraw(_silo, _user, _amount);\n    }\n\n    function borrow(address _silo, uint256 _amount)\n        external\n        validateBorrow(_silo, msg.sender)\n        interest(_silo)\n    {\n        _borrow(_silo, msg.sender, msg.sender, _amount);\n    }\n\n    function borrowFor(address _silo, address _user, address _to, uint256 _amount)\n        external\n        override\n        onlyRouter\n        validateBorrow(_silo, _user)\n        interest(_silo)\n    {\n        _borrow(_silo, _user, _to, _amount);\n    }\n\n    function repay(address _silo, uint256 _amount) external {\n        _repay(_silo, msg.sender, msg.sender, _amount);\n    }\n\n    function repayFor(address _silo, address _user, uint256 _amount) external onlyRouter {\n        _repay(_silo, _user, msg.sender, _amount);\n    }\n\n    function seizeCollateral(address _user, address _liquidator) external override onlySilo returns (uint256) {\n        BridgeSiloStorage storage _state = state[msg.sender];\n        uint256 collateral = _state.token.balanceOf(_user);\n        _state.token.forceTransfer(_user, _liquidator, collateral);\n        return collateral.toAmount(_state.totalDeposits, _state.token.totalSupply());\n    }\n\n    function liquidate(address _silo, address[] memory _users) external interest(_silo) returns (uint256[] memory) {\n        uint256[] memory liquidated = new uint256[](_users.length);\n        uint256 n = _users.length;\n        for (uint256 i = 0; i < n; i++) {\n            liquidated[i] = _liquidate(_silo, _users[i]);\n        }\n        return liquidated;\n    }\n\n    function addSilo(address _silo, string memory _name, string memory _symbol) external override onlyFactory {\n        BridgeSiloStorage storage _state = state[_silo];\n        string memory name = string(abi.encodePacked(string(\"Bridge \"), _name));\n        string memory symbol = string(abi.encodePacked(string(\"bridge-\"), _symbol));\n        address clone = Clones.clone(bridgeERC20Implementation);\n        BridgeERC20Upgradeable(clone).initialize(name, symbol, _silo);\n        _state.token = BridgeERC20Upgradeable(clone);\n    }\n\n    function accrueInterest(address _silo) public {\n        BridgeSiloStorage storage _state = state[_silo];\n        _accrueInterest(_state, block.timestamp);\n    }\n\n    function getTotalDepositsUpdated(address _silo) public view returns (uint256 _totalDeposits) {\n        BridgeSiloStorage storage _state = state[_silo];\n        IVirtualBalances.VirtualBalancesOutput memory output = _executeInterestRateCalculations(_state);\n        (,_totalDeposits) = calculateInterestShares(\n            _state.protocolFees,\n            _state.totalDeposits,\n            output.totalInterests\n        );\n    }\n\n    function isSolvent(address _silo, address _user) public view override returns (bool) {\n        require(_user != address(0), \"SiloBridgePool: user != address(0)\");\n        uint256 liquidationThreshold = factory.getLiquidationThreshold(address(this));\n        return getLTV(_silo, _user) <= liquidationThreshold;\n    }\n\n    function getLTV(address _silo, address _user) public view override returns (uint256) {\n        uint256 borrowAmountValue = getBorrowAmountValue(_silo, _user);\n        if (borrowAmountValue == 0) return 0;\n\n        uint256 collateralValue = ISilo(_silo).getCollateralValue(_user);\n        if (collateralValue == 0) return INFINITY;\n        return borrowAmountValue * BASIS_POINTS / collateralValue;\n    }\n\n    /// @dev value of collateral (asset) provided by user\n    function getCollateralValue(address _silo, address _user) public view override returns (uint256) {\n        BridgeSiloStorage storage _state = state[_silo];\n        ISiloOracleRepository oracle = ISiloOracleRepository(factory.oracle());\n        uint256 assetPrice = oracle.getPrice(asset);\n        uint256 assetAmount = _state.token.balanceOf(_user).toAmount(\n            getTotalDepositsUpdated(_silo),\n            _state.token.totalSupply()\n        );\n        // TODO: price must have 1e18 decimals\n        return assetAmount * assetPrice / DECIMAL_POINTS;\n    }\n\n    /// @dev value of asset borrowed by user\n    function getBorrowAmountValue(address _silo, address _user) public view returns (uint256) {\n        BridgeSiloStorage storage _state = state[_silo];\n        ISiloOracleRepository oracle = ISiloOracleRepository(factory.oracle());\n\n        IVirtualBalances.VirtualBalancesOutput memory output = _executeInterestRateCalculations(_state);\n\n        uint256 assetDebtAmount = _state.borrowShare[_user].toAmount(output.newBorrowAmount, _state.totalBorrowShare);\n\n        uint256 assetPrice = oracle.getPrice(asset);\n        // TODO: price must have 1e18 decimals\n        return assetDebtAmount * assetPrice / DECIMAL_POINTS;\n    }\n\n    function liquidity() public view returns (uint256) {\n        return BridgeERC20Upgradeable(asset).balanceOf(address(this));\n    }\n\n    function balanceOfUnderlying(address _silo, address _user) public view returns (uint256) {\n        BridgeSiloStorage storage _state = state[_silo];\n        uint256 share = _state.token.balanceOf(_user);\n        return share.toAmount(getTotalDepositsUpdated(_silo), _state.token.totalSupply());\n    }\n\n    function calcFee(uint256 _amount) public view returns (uint256) {\n        uint256 entryFee = factory.entryFee();\n        if (entryFee == 0) return 0; // no fee\n        return _amount * entryFee / BASIS_POINTS;\n    }\n\n    function getBorrowShare(address _silo, address _user) public view returns (uint256) {\n        BridgeSiloStorage storage _state = state[_silo];\n        return _state.borrowShare[_user];\n    }\n\n    function calculateInterestShares(\n        uint256 _protocolFees,\n        uint256 _totalDeposits,\n        uint256 _totalInterestsForDeltaTime\n    ) public view returns (\n        uint256 newProtocolFees,\n        uint256 newTotalDeposits\n    ) {\n        uint256 protocolInterestShare = _totalInterestsForDeltaTime * factory.protocolShareFee() / BASIS_POINTS;\n        uint256 siloInterestShare = _totalInterestsForDeltaTime - protocolInterestShare;\n\n        newProtocolFees = _protocolFees + protocolInterestShare;\n        newTotalDeposits = _totalDeposits + siloInterestShare;\n    }\n\n    function _accrueInterest(BridgeSiloStorage storage _state, uint256 _blockTimestamp) internal {\n        uint256 borrowAmountLastUpdateTimestampCached = _state.borrowAmountLastUpdateTimestamp;\n\n        if (_blockTimestamp == borrowAmountLastUpdateTimestampCached) {\n            return;\n        }\n\n        uint256 totalDepositsCached = _state.totalDeposits;\n        address model = factory.getVirtualBalances(address(this));\n\n        IVirtualBalances.VirtualBalancesOutput memory output =  IVirtualBalances(model).getInterestData(\n            IVirtualBalances.VirtualBalancesInputData({\n                currentTimestamp: _blockTimestamp,\n                deposit: totalDepositsCached,\n                siloShareFee: BASIS_POINTS - factory.protocolShareFee(),\n                borrowAmount: _state.totalBorrowAmount,\n                borrowAmountLastUpdateTimestamp: borrowAmountLastUpdateTimestampCached,\n                interestRate: _state.interestRate,\n                interestRateLastUpdateTimestamp: _state.interestRateLastUpdateTimestamp\n            })\n        );\n\n        // update contract state\n        _state.totalBorrowAmount = output.newBorrowAmount;\n        _state.borrowAmountLastUpdateTimestamp = output.newBorrowAmountUpdateTimestamp;\n        _state.interestRate = output.newInterestRate;\n        _state.interestRateLastUpdateTimestamp = output.newInterestRateTimestamp;\n\n        // accrue interest\n        (\n            _state.protocolFees,\n            _state.totalDeposits\n        ) = calculateInterestShares(_state.protocolFees, totalDepositsCached, output.totalInterests);\n    }\n\n    function _deposit(address _silo, address _user, address _from, uint256 _amount)\n        internal\n        nonReentrant\n        interest(_silo)\n        validateMaxDeposits(_silo)\n    {\n        uint256 balanceBefore = liquidity();\n        ERC20(asset).safeTransferFrom(_from, address(this), _amount);\n        uint256 balanceAfter = liquidity();\n\n        BridgeSiloStorage storage _state = state[_silo];\n        _amount = balanceAfter - balanceBefore;\n        uint256 share = _amount.toShare(_state.totalDeposits, _state.token.totalSupply());\n        _state.totalDeposits += _amount;\n        _state.deposit += _amount;\n\n        _state.token.mint(_user, share);\n        emit Deposit(_silo, _user, _amount);\n    }\n\n    function _withdraw(address _silo, address _user, uint256 _amount)\n        internal\n        nonReentrant\n        siloPositionSolvent(_silo, _user)\n        interest(_silo)\n    {\n        BridgeSiloStorage storage _state = state[_silo];\n        uint256 share;\n        if (_amount == type(uint256).max) {\n            share = _state.token.balanceOf(_user);\n            _amount = share.toAmount(_state.totalDeposits, _state.token.totalSupply());\n        } else {\n            share = _amount.toShare(_state.totalDeposits, _state.token.totalSupply());\n        }\n        _state.totalDeposits -= _amount;\n        _state.deposit -= _amount;\n        _state.token.burn(_user, share);\n        emit Withdraw(_silo, _user, _amount);\n\n        ERC20(asset).safeTransfer(_user, _amount);\n    }\n\n    function _borrow(address _silo, address _user, address _to, uint256 _amount) internal nonReentrant {\n        BridgeSiloStorage storage _state = state[_silo];\n        require(_state.deposit >= _amount, \"SiloBridge: deposit shortage\");\n\n        uint256 fee = calcFee(_amount);\n        uint256 borrowerShare = (_amount + fee).toShare(_state.totalBorrowAmount, _state.totalBorrowShare);\n        _state.borrowShare[_user] += borrowerShare;\n        _state.totalBorrowShare += borrowerShare;\n        _state.totalBorrowAmount += _amount + fee;\n        _state.protocolFees += fee;\n        _state.deposit -= _amount;\n\n        emit Borrow(_silo, _user, _amount);\n\n        ERC20(asset).safeTransfer(_to, _amount);\n    }\n\n    function _repay(address _silo, address _user, address _from, uint256 _amount)\n        internal nonReentrant interest(_silo) returns (uint256)\n    {\n        BridgeSiloStorage storage _state = state[_silo];\n        uint256 repayShare;\n        if (_amount == type(uint256).max) {\n            repayShare = _state.borrowShare[_user];\n            _amount = repayShare.toAmount(_state.totalBorrowAmount, _state.totalBorrowShare);\n        } else {\n            repayShare = _amount.toShare(_state.totalBorrowAmount, _state.totalBorrowShare);\n        }\n\n        _state.borrowShare[_user] -= repayShare;\n        _state.totalBorrowShare -= repayShare;\n        _state.totalBorrowAmount -= _amount;\n        _state.deposit += _amount;\n\n        emit Repay(_silo, _user, _amount);\n\n        ERC20(asset).safeTransferFrom(_from, address(this), _amount);\n        return _amount;\n    }\n\n    function _liquidate(address _silo, address _user) internal nonReentrant returns (uint256 seizedCollateral) {\n        // gracefully fail if _user is solvent\n        if (isSolvent(_silo, _user)) return 0;\n\n        uint256 amountRepaid = _repay(_silo, _user, msg.sender, type(uint256).max);\n        seizedCollateral = ISilo(_silo).seizeCollateral(_user, msg.sender);\n\n        emit Liquidate(_silo, _user, amountRepaid, seizedCollateral);\n\n        require(isSolvent(_silo, _user), \"SiloBridgePool: user not solvent\");\n    }\n\n    function _executeInterestRateCalculations(BridgeSiloStorage storage _state)\n        internal\n        view\n        returns (IVirtualBalances.VirtualBalancesOutput memory output)\n    {\n        address model = factory.getVirtualBalances(address(this));\n\n        return IVirtualBalances(model).getInterestData(\n            IVirtualBalances.VirtualBalancesInputData({\n                currentTimestamp: block.timestamp,\n                deposit: _state.totalDeposits,\n                siloShareFee: BASIS_POINTS - factory.protocolShareFee(),\n                borrowAmount: _state.totalBorrowAmount,\n                borrowAmountLastUpdateTimestamp: _state.borrowAmountLastUpdateTimestamp,\n                interestRate: _state.interestRate,\n                interestRateLastUpdateTimestamp: _state.interestRateLastUpdateTimestamp\n            })\n        );\n    }\n}\n"
    },
    "@openzeppelin/contracts/security/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and make it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n"
    },
    "contracts/utils/BridgeERC20Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.7;\n\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\";\nimport \"./TwoStepOwnableUpgradeable.sol\";\nimport \"../interfaces/ISilo.sol\";\n\ncontract BridgeERC20Upgradeable is Initializable, ERC20Upgradeable, TwoStepOwnableUpgradeable {\n\n    ISilo public silo;\n\n    function mint(address _account, uint256 _amount) external onlyOwner {\n        _mint(_account, _amount);\n    }\n\n    function burn(address _account, uint256 _amount) external onlyOwner {\n        _burn(_account, _amount);\n    }\n\n    function forceTransfer(\n        address _sender,\n        address _recipient,\n        uint256 _amount\n    ) public onlyOwner returns (bool) {\n        _transfer(_sender, _recipient, _amount);\n        return true;\n    }\n\n    function initialize(\n        string memory _name,\n        string memory _symbol,\n        address _silo\n    ) public initializer {\n        require(_silo != address(0), \"BridgeERC20: _silo != address(0)\");\n        __Context_init_unchained();\n        __TwoStepOwnableUpgradeable_init_unchained();\n        __ERC20_init_unchained(_name, _symbol);\n        silo = ISilo(_silo);\n    }\n\n    function _transfer(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) internal virtual override {\n        super._transfer(sender, recipient, amount);\n        require(silo.isSolvent(sender), \"BridgeERC20: not solvent in silo position\");\n    }\n}\n"
    },
    "contracts/SiloRouter.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity 0.8.7;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\n\nimport \"./interfaces/IWrappedToken.sol\";\nimport \"./interfaces/ISiloBridgePool.sol\";\nimport \"./interfaces/ISilo.sol\";\nimport \"./interfaces/ISiloFactory.sol\";\n\ncontract SiloRouter {\n    using SafeERC20 for IERC20;\n\n    struct Position {\n        // what do you use for collateral\n        address collateral;\n        // what do you want to borrow\n        address borrow;\n        // amount of collateral\n        uint256 depositAmount;\n        // amount to borrow\n        uint256 borrowAmount;\n    }\n\n    IWrappedToken public immutable wrappedToken;\n    ISiloBridgePool public immutable bridgePool;\n    ISiloFactory public immutable factory;\n\n    constructor (address _factory) {\n        wrappedToken = IWrappedToken(ISiloFactory(_factory).bridgeAsset());\n        bridgePool = ISiloBridgePool(ISiloFactory(_factory).bridgePool());\n        factory = ISiloFactory(_factory);\n    }\n\n    receive() external payable {}\n\n    function borrow(Position[] memory positions) external payable {\n        _transferCollateral(positions[0].collateral, positions[0].depositAmount);\n\n        uint256 len = positions.length;\n        require(len <= 2, \"SiloRouter: supports only 2 positons at once\");\n        for (uint256 i  = 0; i < len; i++) {\n            Position memory pos = positions[i];\n            require(pos.collateral != pos.borrow, \"SiloRouter: cannot depisit & borrow the same asset\");\n            if (pos.collateral == address(wrappedToken)) {\n                address borrowSilo = factory.silo(pos.borrow);\n                IERC20(pos.collateral).safeApprove(address(bridgePool), pos.depositAmount);\n                bridgePool.depositFor(borrowSilo, msg.sender, pos.depositAmount);\n                ISilo(borrowSilo).borrowFor(msg.sender, address(this), pos.borrowAmount);\n            } else {\n                address collateralSilo = factory.silo(pos.collateral);\n                IERC20(pos.collateral).safeApprove(collateralSilo, pos.depositAmount);\n                ISilo(collateralSilo).depositFor(msg.sender, pos.depositAmount);\n                bridgePool.borrowFor(collateralSilo, msg.sender, address(this), pos.borrowAmount);\n            }\n        }\n\n        Position memory lastPosition = positions[len - 1];\n        _transferBorrow(lastPosition.borrow, lastPosition.borrowAmount);\n    }\n\n    function _transferCollateral(address _collateral, uint256 _amount) internal {\n        if (_collateral == address(wrappedToken) && msg.value > 0) {\n            require(msg.value == _amount, \"SiloRouter: incorrect ETH value\");\n            wrappedToken.deposit{value: msg.value}();\n        } else {\n            IERC20(_collateral).safeTransferFrom(msg.sender, address(this), _amount);\n        }\n    }\n\n    function _transferBorrow(address _borrow, uint256 _amount) internal {\n        if (_borrow == address(wrappedToken)) {\n\n            wrappedToken.withdraw(_amount);\n            // solhint-disable-next-line avoid-low-level-calls\n            (bool success, ) = msg.sender.call{value: _amount}(\"\");\n            require(success, \"SiloRouter: ETH Transfer failed.\");\n        } else {\n            IERC20(_borrow).safeTransfer(msg.sender, _amount);\n        }\n    }\n}\n"
    },
    "contracts/interfaces/IWrappedToken.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.7;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\ninterface IWrappedToken is IERC20 {\n    function deposit() external payable;\n    function withdraw(uint256 amount) external;\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/ERC20Pausable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../ERC20.sol\";\nimport \"../../../security/Pausable.sol\";\n\n/**\n * @dev ERC20 token with pausable token transfers, minting and burning.\n *\n * Useful for scenarios such as preventing trades until the end of an evaluation\n * period, or having an emergency switch for freezing all token transfers in the\n * event of a large bug.\n */\nabstract contract ERC20Pausable is ERC20, Pausable {\n    /**\n     * @dev See {ERC20-_beforeTokenTransfer}.\n     *\n     * Requirements:\n     *\n     * - the contract must not be paused.\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual override {\n        super._beforeTokenTransfer(from, to, amount);\n\n        require(!paused(), \"ERC20Pausable: token transfer while paused\");\n    }\n}\n"
    },
    "@openzeppelin/contracts/security/Pausable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n *\n * This module is used through inheritance. It will make available the\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n * the functions of your contract. Note that they will not be pausable by\n * simply including this module, only once the modifiers are put in place.\n */\nabstract contract Pausable is Context {\n    /**\n     * @dev Emitted when the pause is triggered by `account`.\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by `account`.\n     */\n    event Unpaused(address account);\n\n    bool private _paused;\n\n    /**\n     * @dev Initializes the contract in unpaused state.\n     */\n    constructor() {\n        _paused = false;\n    }\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view virtual returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    modifier whenNotPaused() {\n        require(!paused(), \"Pausable: paused\");\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    modifier whenPaused() {\n        require(paused(), \"Pausable: not paused\");\n        _;\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    function _pause() internal virtual whenNotPaused {\n        _paused = true;\n        emit Paused(_msgSender());\n    }\n\n    /**\n     * @dev Returns to normal state.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    function _unpause() internal virtual whenPaused {\n        _paused = false;\n        emit Unpaused(_msgSender());\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/AccessControl.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./IAccessControl.sol\";\nimport \"../utils/Context.sol\";\nimport \"../utils/Strings.sol\";\nimport \"../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Contract module that allows children to implement role-based access\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\n * members except through off-chain means by accessing the contract event logs. Some\n * applications may benefit from on-chain enumerability, for those cases see\n * {AccessControlEnumerable}.\n *\n * Roles are referred to by their `bytes32` identifier. These should be exposed\n * in the external API and be unique. The best way to achieve this is by\n * using `public constant` hash digests:\n *\n * ```\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n * ```\n *\n * Roles can be used to represent a set of permissions. To restrict access to a\n * function call, use {hasRole}:\n *\n * ```\n * function foo() public {\n *     require(hasRole(MY_ROLE, msg.sender));\n *     ...\n * }\n * ```\n *\n * Roles can be granted and revoked dynamically via the {grantRole} and\n * {revokeRole} functions. Each role has an associated admin role, and only\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n *\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n * that only accounts with this role will be able to grant or revoke other\n * roles. More complex role relationships can be created by using\n * {_setRoleAdmin}.\n *\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n * grant and revoke this role. Extra precautions should be taken to secure\n * accounts that have been granted it.\n */\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\n    struct RoleData {\n        mapping(address => bool) members;\n        bytes32 adminRole;\n    }\n\n    mapping(bytes32 => RoleData) private _roles;\n\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n\n    /**\n     * @dev Modifier that checks that an account has a specific role. Reverts\n     * with a standardized message including the required role.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     *\n     * _Available since v4.1._\n     */\n    modifier onlyRole(bytes32 role) {\n        _checkRole(role, _msgSender());\n        _;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) public view override returns (bool) {\n        return _roles[role].members[account];\n    }\n\n    /**\n     * @dev Revert with a standard message if `account` is missing `role`.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     */\n    function _checkRole(bytes32 role, address account) internal view {\n        if (!hasRole(role, account)) {\n            revert(\n                string(\n                    abi.encodePacked(\n                        \"AccessControl: account \",\n                        Strings.toHexString(uint160(account), 20),\n                        \" is missing role \",\n                        Strings.toHexString(uint256(role), 32)\n                    )\n                )\n            );\n        }\n    }\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) public view override returns (bytes32) {\n        return _roles[role].adminRole;\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     */\n    function renounceRole(bytes32 role, address account) public virtual override {\n        require(account == _msgSender(), \"AccessControl: can only renounce roles for self\");\n\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event. Note that unlike {grantRole}, this function doesn't perform any\n     * checks on the calling account.\n     *\n     * [WARNING]\n     * ====\n     * This function should only be called from the constructor when setting\n     * up the initial roles for the system.\n     *\n     * Using this function in any other way is effectively circumventing the admin\n     * system imposed by {AccessControl}.\n     * ====\n     */\n    function _setupRole(bytes32 role, address account) internal virtual {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Sets `adminRole` as ``role``'s admin role.\n     *\n     * Emits a {RoleAdminChanged} event.\n     */\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n        bytes32 previousAdminRole = getRoleAdmin(role);\n        _roles[role].adminRole = adminRole;\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\n    }\n\n    function _grantRole(bytes32 role, address account) private {\n        if (!hasRole(role, account)) {\n            _roles[role].members[account] = true;\n            emit RoleGranted(role, account, _msgSender());\n        }\n    }\n\n    function _revokeRole(bytes32 role, address account) private {\n        if (hasRole(role, account)) {\n            _roles[role].members[account] = false;\n            emit RoleRevoked(role, account, _msgSender());\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/IAccessControl.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev External interface of AccessControl declared to support ERC165 detection.\n */\ninterface IAccessControl {\n    /**\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n     *\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n     * {RoleAdminChanged} not being emitted signaling this.\n     *\n     * _Available since v3.1._\n     */\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\n\n    /**\n     * @dev Emitted when `account` is granted `role`.\n     *\n     * `sender` is the account that originated the contract call, an admin role\n     * bearer except when using {AccessControl-_setupRole}.\n     */\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Emitted when `account` is revoked `role`.\n     *\n     * `sender` is the account that originated the contract call:\n     *   - if using `revokeRole`, it is the admin role bearer\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n     */\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) external view returns (bool);\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     */\n    function renounceRole(bytes32 role, address account) external;\n}\n"
    },
    "@openzeppelin/contracts/utils/Strings.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp >>= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/ERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/access/IAccessControlEnumerable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./IAccessControl.sol\";\n\n/**\n * @dev External interface of AccessControlEnumerable declared to support ERC165 detection.\n */\ninterface IAccessControlEnumerable is IAccessControl {\n    /**\n     * @dev Returns one of the accounts that have `role`. `index` must be a\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\n     *\n     * Role bearers are not sorted in any particular way, and their ordering may\n     * change at any point.\n     *\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\n     * you perform all queries on the same block. See the following\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\n     * for more information.\n     */\n    function getRoleMember(bytes32 role, uint256 index) external view returns (address);\n\n    /**\n     * @dev Returns the number of accounts that have `role`. Can be used\n     * together with {getRoleMember} to enumerate all bearers of a role.\n     */\n    function getRoleMemberCount(bytes32 role) external view returns (uint256);\n}\n"
    },
    "@openzeppelin/contracts/access/AccessControlEnumerable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./IAccessControlEnumerable.sol\";\nimport \"./AccessControl.sol\";\nimport \"../utils/structs/EnumerableSet.sol\";\n\n/**\n * @dev Extension of {AccessControl} that allows enumerating the members of each role.\n */\nabstract contract AccessControlEnumerable is IAccessControlEnumerable, AccessControl {\n    using EnumerableSet for EnumerableSet.AddressSet;\n\n    mapping(bytes32 => EnumerableSet.AddressSet) private _roleMembers;\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControlEnumerable).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns one of the accounts that have `role`. `index` must be a\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\n     *\n     * Role bearers are not sorted in any particular way, and their ordering may\n     * change at any point.\n     *\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\n     * you perform all queries on the same block. See the following\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\n     * for more information.\n     */\n    function getRoleMember(bytes32 role, uint256 index) public view override returns (address) {\n        return _roleMembers[role].at(index);\n    }\n\n    /**\n     * @dev Returns the number of accounts that have `role`. Can be used\n     * together with {getRoleMember} to enumerate all bearers of a role.\n     */\n    function getRoleMemberCount(bytes32 role) public view override returns (uint256) {\n        return _roleMembers[role].length();\n    }\n\n    /**\n     * @dev Overload {grantRole} to track enumerable memberships\n     */\n    function grantRole(bytes32 role, address account) public virtual override(AccessControl, IAccessControl) {\n        super.grantRole(role, account);\n        _roleMembers[role].add(account);\n    }\n\n    /**\n     * @dev Overload {revokeRole} to track enumerable memberships\n     */\n    function revokeRole(bytes32 role, address account) public virtual override(AccessControl, IAccessControl) {\n        super.revokeRole(role, account);\n        _roleMembers[role].remove(account);\n    }\n\n    /**\n     * @dev Overload {renounceRole} to track enumerable memberships\n     */\n    function renounceRole(bytes32 role, address account) public virtual override(AccessControl, IAccessControl) {\n        super.renounceRole(role, account);\n        _roleMembers[role].remove(account);\n    }\n\n    /**\n     * @dev Overload {_setupRole} to track enumerable memberships\n     */\n    function _setupRole(bytes32 role, address account) internal virtual override {\n        super._setupRole(role, account);\n        _roleMembers[role].add(account);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/structs/EnumerableSet.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for managing\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\n * types.\n *\n * Sets have the following properties:\n *\n * - Elements are added, removed, and checked for existence in constant time\n * (O(1)).\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\n *\n * ```\n * contract Example {\n *     // Add the library methods\n *     using EnumerableSet for EnumerableSet.AddressSet;\n *\n *     // Declare a set state variable\n *     EnumerableSet.AddressSet private mySet;\n * }\n * ```\n *\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\n * and `uint256` (`UintSet`) are supported.\n */\nlibrary EnumerableSet {\n    // To implement this library for multiple types with as little code\n    // repetition as possible, we write it in terms of a generic Set type with\n    // bytes32 values.\n    // The Set implementation uses private functions, and user-facing\n    // implementations (such as AddressSet) are just wrappers around the\n    // underlying Set.\n    // This means that we can only create new EnumerableSets for types that fit\n    // in bytes32.\n\n    struct Set {\n        // Storage of set values\n        bytes32[] _values;\n        // Position of the value in the `values` array, plus 1 because index 0\n        // means a value is not in the set.\n        mapping(bytes32 => uint256) _indexes;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function _add(Set storage set, bytes32 value) private returns (bool) {\n        if (!_contains(set, value)) {\n            set._values.push(value);\n            // The value is stored at length-1, but we add 1 to all indexes\n            // and use 0 as a sentinel value\n            set._indexes[value] = set._values.length;\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\n        // We read and store the value's index to prevent multiple reads from the same storage slot\n        uint256 valueIndex = set._indexes[value];\n\n        if (valueIndex != 0) {\n            // Equivalent to contains(set, value)\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\n            // This modifies the order of the array, as noted in {at}.\n\n            uint256 toDeleteIndex = valueIndex - 1;\n            uint256 lastIndex = set._values.length - 1;\n\n            if (lastIndex != toDeleteIndex) {\n                bytes32 lastvalue = set._values[lastIndex];\n\n                // Move the last value to the index where the value to delete is\n                set._values[toDeleteIndex] = lastvalue;\n                // Update the index for the moved value\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\n            }\n\n            // Delete the slot where the moved value was stored\n            set._values.pop();\n\n            // Delete the index for the deleted slot\n            delete set._indexes[value];\n\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\n        return set._indexes[value] != 0;\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function _length(Set storage set) private view returns (uint256) {\n        return set._values.length;\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\n        return set._values[index];\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function _values(Set storage set) private view returns (bytes32[] memory) {\n        return set._values;\n    }\n\n    // Bytes32Set\n\n    struct Bytes32Set {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _add(set._inner, value);\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _remove(set._inner, value);\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\n        return _contains(set._inner, value);\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(Bytes32Set storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\n        return _at(set._inner, index);\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\n        return _values(set._inner);\n    }\n\n    // AddressSet\n\n    struct AddressSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(AddressSet storage set, address value) internal returns (bool) {\n        return _add(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(AddressSet storage set, address value) internal returns (bool) {\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(AddressSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\n        return address(uint160(uint256(_at(set._inner, index))));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(AddressSet storage set) internal view returns (address[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        address[] memory result;\n\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n\n    // UintSet\n\n    struct UintSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\n        return _add(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\n        return _remove(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function length(UintSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\n        return uint256(_at(set._inner, index));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        uint256[] memory result;\n\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/presets/ERC20PresetMinterPauser.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../ERC20.sol\";\nimport \"../extensions/ERC20Burnable.sol\";\nimport \"../extensions/ERC20Pausable.sol\";\nimport \"../../../access/AccessControlEnumerable.sol\";\nimport \"../../../utils/Context.sol\";\n\n/**\n * @dev {ERC20} token, including:\n *\n *  - ability for holders to burn (destroy) their tokens\n *  - a minter role that allows for token minting (creation)\n *  - a pauser role that allows to stop all token transfers\n *\n * This contract uses {AccessControl} to lock permissioned functions using the\n * different roles - head to its documentation for details.\n *\n * The account that deploys the contract will be granted the minter and pauser\n * roles, as well as the default admin role, which will let it grant both minter\n * and pauser roles to other accounts.\n */\ncontract ERC20PresetMinterPauser is Context, AccessControlEnumerable, ERC20Burnable, ERC20Pausable {\n    bytes32 public constant MINTER_ROLE = keccak256(\"MINTER_ROLE\");\n    bytes32 public constant PAUSER_ROLE = keccak256(\"PAUSER_ROLE\");\n\n    /**\n     * @dev Grants `DEFAULT_ADMIN_ROLE`, `MINTER_ROLE` and `PAUSER_ROLE` to the\n     * account that deploys the contract.\n     *\n     * See {ERC20-constructor}.\n     */\n    constructor(string memory name, string memory symbol) ERC20(name, symbol) {\n        _setupRole(DEFAULT_ADMIN_ROLE, _msgSender());\n\n        _setupRole(MINTER_ROLE, _msgSender());\n        _setupRole(PAUSER_ROLE, _msgSender());\n    }\n\n    /**\n     * @dev Creates `amount` new tokens for `to`.\n     *\n     * See {ERC20-_mint}.\n     *\n     * Requirements:\n     *\n     * - the caller must have the `MINTER_ROLE`.\n     */\n    function mint(address to, uint256 amount) public virtual {\n        require(hasRole(MINTER_ROLE, _msgSender()), \"ERC20PresetMinterPauser: must have minter role to mint\");\n        _mint(to, amount);\n    }\n\n    /**\n     * @dev Pauses all token transfers.\n     *\n     * See {ERC20Pausable} and {Pausable-_pause}.\n     *\n     * Requirements:\n     *\n     * - the caller must have the `PAUSER_ROLE`.\n     */\n    function pause() public virtual {\n        require(hasRole(PAUSER_ROLE, _msgSender()), \"ERC20PresetMinterPauser: must have pauser role to pause\");\n        _pause();\n    }\n\n    /**\n     * @dev Unpauses all token transfers.\n     *\n     * See {ERC20Pausable} and {Pausable-_unpause}.\n     *\n     * Requirements:\n     *\n     * - the caller must have the `PAUSER_ROLE`.\n     */\n    function unpause() public virtual {\n        require(hasRole(PAUSER_ROLE, _msgSender()), \"ERC20PresetMinterPauser: must have pauser role to unpause\");\n        _unpause();\n    }\n\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual override(ERC20, ERC20Pausable) {\n        super._beforeTokenTransfer(from, to, amount);\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../ERC20.sol\";\nimport \"../../../utils/Context.sol\";\n\n/**\n * @dev Extension of {ERC20} that allows token holders to destroy both their own\n * tokens and those that they have an allowance for, in a way that can be\n * recognized off-chain (via event analysis).\n */\nabstract contract ERC20Burnable is Context, ERC20 {\n    /**\n     * @dev Destroys `amount` tokens from the caller.\n     *\n     * See {ERC20-_burn}.\n     */\n    function burn(uint256 amount) public virtual {\n        _burn(_msgSender(), amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, deducting from the caller's\n     * allowance.\n     *\n     * See {ERC20-_burn} and {ERC20-allowance}.\n     *\n     * Requirements:\n     *\n     * - the caller must have allowance for ``accounts``'s tokens of at least\n     * `amount`.\n     */\n    function burnFrom(address account, uint256 amount) public virtual {\n        uint256 currentAllowance = allowance(account, _msgSender());\n        require(currentAllowance >= amount, \"ERC20: burn amount exceeds allowance\");\n        unchecked {\n            _approve(account, _msgSender(), currentAllowance - amount);\n        }\n        _burn(account, amount);\n    }\n}\n"
    },
    "contracts/mock/EDD.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity 0.8.7;\n\nimport \"@openzeppelin/contracts/token/ERC20/presets/ERC20PresetMinterPauser.sol\";\n\ncontract EDD is ERC20PresetMinterPauser(\"EDD\", \"EDD\") {}\n"
    },
    "contracts/SiloOracleRepository.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity 0.8.7;\n\nimport \"./interfaces/ISiloOracleRepository.sol\";\nimport \"./interfaces/IOracle.sol\";\nimport \"./utils/TwoStepOwnableUpgradeable.sol\";\n\ncontract SiloOracleRepository is ISiloOracleRepository, TwoStepOwnableUpgradeable {\n    uint256 public constant ONE = 10**18;\n\n    address public immutable factory;\n    address public immutable quoteToken;\n\n    mapping(address => bool) public registeredOracles;\n    mapping(address => address) public assetsOracles;\n\n    address[] public oracles;\n\n    event NewOracle(address newOracle, uint256 id);\n    event OracleRemoved(address oracle);\n    event OracleForAsset(address oracle, address asset);\n\n    modifier onlyFactory() {\n        require(msg.sender == address(factory), \"SiloOracleRepository: onlyFactory\");\n        _;\n    }\n\n    constructor(address _quoteToken, address _factory) {\n        __TwoStepOwnableUpgradeable_init();\n        factory = _factory;\n        quoteToken = _quoteToken;\n    }\n\n    function addOracle(address _oracle) external override onlyOwner {\n        require(!registeredOracles[_oracle], \"SiloOracleRepository: oracle already exists\");\n        require(IOracle(_oracle).isSiloOracle(), \"SiloOracleRepository: not an oracle\");\n        require(IOracle(_oracle).quoteToken() == quoteToken, \"SiloOracleRepository: invalid quoteToken in oracle\");\n\n        emit NewOracle(_oracle, oracles.length);\n\n        registeredOracles[_oracle] = true;\n        oracles.push(_oracle);\n    }\n\n    function removeOracle(uint256 _oracleId) external override onlyOwner {\n        address oracleToRemove = oracles[_oracleId];\n        require(registeredOracles[oracleToRemove], \"SiloOracleRepository: oracle does not exist\");\n\n        emit OracleRemoved(oracleToRemove);\n\n        registeredOracles[oracleToRemove] = false;\n        oracles[_oracleId] = oracles[oracles.length - 1];\n        oracles.pop();\n    }\n\n    /// @notice initialise oracle for asset\n    /// @dev this method does two things:\n    ///      - init new asset if oracle is provided\n    ///      - search for best oracle and updates if we found better\n    /// @param _asset address od token to be initialise\n    /// @param _oracle (optional) address of silo oracle that will be initialised with new asset\n    ///        we do not check, if this oracle is registered or not, because it can not be used if not registered anyway\n    /// @param _data (optional) custom data required for asset initialisation\n    function initOracleForAsset(address _asset, address _oracle, bytes calldata _data) external override {\n        if (_oracle != address(0)) {\n            IOracle(_oracle).initAsset(_asset, _data);\n        }\n\n        _findBestOracleForAsset(_asset);\n    }\n\n    function setBestOracleForAsset(address _asset) external override returns (address bestOracle) {\n        return _findBestOracleForAsset(_asset);\n    }\n\n    function changeBestOracleForAsset(address _asset, address _oracle) external virtual override {\n        require(registeredOracles[_oracle], \"SiloOracleRepository: oracle not registered\");\n\n        address assetOracles = assetsOracles[_asset];\n        require(assetOracles != address(0), \"SiloOracleRepository: use setBestOracleForAsset to init asset\");\n\n        uint256 currentLiquidity = IOracle(assetOracles).getQuoteLiquidity(_asset);\n        uint256 suggestedLiquidity = IOracle(_oracle).getQuoteLiquidity(_asset);\n        require(suggestedLiquidity >= currentLiquidity, \"SiloOracleRepository: chosen oracle is worse\");\n\n        _setOracleForAsset(_asset, _oracle);\n    }\n\n    function findBestOracle(address _asset) external view returns (address) {\n        return _findBestOracle(_asset);\n    }\n\n    function oraclesCount() external view returns (uint256) {\n        return oracles.length;\n    }\n\n    function oracleList() external view returns (address[] memory) {\n        return oracles;\n    }\n\n    function getPrice(address _base) public view override virtual returns (uint256) {\n        if (_base == quoteToken) return ONE;\n\n        return IOracle(assetsOracles[_base]).getPrice(_base);\n    }\n\n    /// @notice search for best oracle for asset\n    function _findBestOracleForAsset(address _asset) internal returns (address bestOracle) {\n        bestOracle = _findBestOracle(_asset);\n        require(bestOracle != address(0), \"SiloOracleRepository: can not find oracle for asset\");\n\n        _setOracleForAsset(_asset, bestOracle);\n    }\n\n    function _setOracleForAsset(address _asset, address _oracle) internal {\n        emit OracleForAsset(_asset, _oracle);\n        IOracle(_oracle).notifyAboutChoice(_asset);\n        assetsOracles[_asset] = _oracle;\n    }\n\n    function _findBestOracle(address _asset) internal view returns (address bestOracle) {\n        uint256 maxLiquidity;\n\n        for (uint256 i = 0; i < oracles.length; i++) {\n            address oracle = oracles[i];\n            uint256 quoteLiquidity = IOracle(oracle).getQuoteLiquidity(_asset);\n\n            if (quoteLiquidity > maxLiquidity) {\n                bestOracle = oracle;\n                maxLiquidity = quoteLiquidity;\n            }\n        }\n    }\n}\n"
    },
    "contracts/interfaces/IOracle.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity >=0.6.0 <0.9.0;\n\n/// @title Common interface for Silo oracles\ninterface IOracle {\n    /// @notice initAsset can be used to do custom setup for new asset\n    /// @dev Should be used for initialisation of asset for oracle (if initialisation is needed).\n    ///      It sets all necessary data that are require to call `getPrice` for the asset.\n    ///      Throws if initialisation fail.\n    ///      When called multiple times it does not override better settings and it might throws.\n    ///      e.g.: if with current settings we getting higher liquidity pool, initialisation should have no effect\n    /// @param _asset token address (base token) for which we initialising oracle\n    /// @param _data additional data (optional) that is required for initialisation process\n    function initAsset(address _asset, bytes calldata _data) external;\n\n    /// @notice when changing oracle, notify that we start using it for asset.\n    /// @dev It is used when we discover, that this oracle is better for asset.\n    ///      If we need to setup anything in additional, in order to use this oracle for asset, it should be done\n    ///      inside this method. At this point asset should be initialised (so we have all necessary data for it).\n    ///      Throws if this oracle can not be use for provided asset.\n    /// @param _asset token address (base token) for which this oracle will be used from now on.\n    function notifyAboutChoice(address _asset) external;\n\n    /// @notice calculates price for asset/quote\n    ///         It unifies all tokens decimal to 18, examples:\n    ///         - if asses == quote it returns 1e18\n    ///         - if asset is USDC and quote is ETH and ETH costs ~$3300 then it returns ~0.0003e18\n    /// @return price of asses with 18 decimals\n    function getPrice(address _asset) external view returns (uint256 price);\n\n    /// @notice Informs if oracle has all required settings for asset and can provide data for it\n    /// @dev It is not always a case, that asset must be initialized before it can be use by oracle.\n    ///      Some oracles implementations can work out of the box for any assets.\n    ///      If asset is not supported, it does not mean it can not be used,\n    ///      it might need initialization to become supported.\n    /// @param _asset token address\n    /// @return true is oracle is able to provide price for asset\n    function assetSupported(address _asset) external view returns (bool);\n\n    // TODO should we have minimalRequiredLiquidity?\n\n    /// @notice Search for highest possible liquidity for quote token.\n    ///         This method is used to establish, if pool is better (not less liquidity) or worse (less liquidity)\n    /// @dev For some oracles, asset must be initialized in order to be able to run this method\n    ///      or there might be some additional (dedicated to oracle) settings, that must be set up in order search works\n    ///      Implementation of this method must be dome in a way, that when asset is initialized and we have\n    ///      any additional required settings in place, it will highest existing liquidity pool for asset.\n    ///      It is possible, that it will throw on invalid data or uninitialized asset.\n    /// @return liquidity of quote token for specified asset\n    function getQuoteLiquidity(address _asset) external view returns (uint256 liquidity);\n\n    /// @return address of quote token that must be a copy of SiloBridgePool.asset\n    function quoteToken() external view returns (address);\n\n    /// @notice Helper method that allows easily detects, if contract is SiloOracle\n    /// @dev this can save us from simple human errors, in case we use invalid address\n    ///      but this should NOT be treated as security check\n    /// @return always true\n    function isSiloOracle() external pure returns (bool);\n}\n"
    },
    "contracts/mock/MockSiloOracleRepository.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity 0.8.7;\n\nimport \"../SiloOracleRepository.sol\";\nimport \"../interfaces/IOracle.sol\";\n\ncontract MockSiloOracleRepository is SiloOracleRepository {\n    mapping(address => uint256) public prices;\n\n    constructor(address _quoteToken, address _factory) SiloOracleRepository(_quoteToken, _factory) {\n    }\n\n    function changeBestOracleForAsset(address _asset, address _oracle) external override onlyFactory {\n        require(IOracle(_oracle).isSiloOracle(), \"SiloOracle: not an oracle\");\n        assetsOracles[_asset] = _oracle;\n    }\n\n    function setPrice(address _asset, uint256 _price) public {\n        prices[_asset] = _price;\n    }\n\n    function getPrice(address _asset) public view override returns (uint256) {\n        return prices[_asset];\n    }\n}\n"
    },
    "contracts/oracles/Oracle.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity >=0.6.0 <0.9.0;\n\nimport \"../interfaces/IOracle.sol\";\n\n/// @title Abstract oracle contract, parent of all Silo oracles\nabstract contract Oracle is IOracle {\n    /// @notice It must be a copy of SiloBridgePool.asset\n    address public immutable override quoteToken;\n\n    /// @notice Common event for any asses modifications (initialization, save)\n    /// @dev Must be emitted every time something change for asset eg:\n    ///      - on initialization\n    ///      - on changing pool or some dedicated settings for asses\n    event AssetOperation(address asset);\n\n    constructor(address _quoteToken) {\n        require(_quoteToken != address(0), \"Oracle: empty quoteToken\");\n\n        quoteToken = _quoteToken;\n    }\n\n    function initAsset(address, bytes calldata) external virtual override {}\n\n    function isSiloOracle() external pure override returns (bool) {\n        return true;\n    }\n}\n"
    },
    "@uniswap/v3-core/contracts/interfaces/IUniswapV3Factory.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title The interface for the Uniswap V3 Factory\n/// @notice The Uniswap V3 Factory facilitates creation of Uniswap V3 pools and control over the protocol fees\ninterface IUniswapV3Factory {\n    /// @notice Emitted when the owner of the factory is changed\n    /// @param oldOwner The owner before the owner was changed\n    /// @param newOwner The owner after the owner was changed\n    event OwnerChanged(address indexed oldOwner, address indexed newOwner);\n\n    /// @notice Emitted when a pool is created\n    /// @param token0 The first token of the pool by address sort order\n    /// @param token1 The second token of the pool by address sort order\n    /// @param fee The fee collected upon every swap in the pool, denominated in hundredths of a bip\n    /// @param tickSpacing The minimum number of ticks between initialized ticks\n    /// @param pool The address of the created pool\n    event PoolCreated(\n        address indexed token0,\n        address indexed token1,\n        uint24 indexed fee,\n        int24 tickSpacing,\n        address pool\n    );\n\n    /// @notice Emitted when a new fee amount is enabled for pool creation via the factory\n    /// @param fee The enabled fee, denominated in hundredths of a bip\n    /// @param tickSpacing The minimum number of ticks between initialized ticks for pools created with the given fee\n    event FeeAmountEnabled(uint24 indexed fee, int24 indexed tickSpacing);\n\n    /// @notice Returns the current owner of the factory\n    /// @dev Can be changed by the current owner via setOwner\n    /// @return The address of the factory owner\n    function owner() external view returns (address);\n\n    /// @notice Returns the tick spacing for a given fee amount, if enabled, or 0 if not enabled\n    /// @dev A fee amount can never be removed, so this value should be hard coded or cached in the calling context\n    /// @param fee The enabled fee, denominated in hundredths of a bip. Returns 0 in case of unenabled fee\n    /// @return The tick spacing\n    function feeAmountTickSpacing(uint24 fee) external view returns (int24);\n\n    /// @notice Returns the pool address for a given pair of tokens and a fee, or address 0 if it does not exist\n    /// @dev tokenA and tokenB may be passed in either token0/token1 or token1/token0 order\n    /// @param tokenA The contract address of either token0 or token1\n    /// @param tokenB The contract address of the other token\n    /// @param fee The fee collected upon every swap in the pool, denominated in hundredths of a bip\n    /// @return pool The pool address\n    function getPool(\n        address tokenA,\n        address tokenB,\n        uint24 fee\n    ) external view returns (address pool);\n\n    /// @notice Creates a pool for the given two tokens and fee\n    /// @param tokenA One of the two tokens in the desired pool\n    /// @param tokenB The other of the two tokens in the desired pool\n    /// @param fee The desired fee for the pool\n    /// @dev tokenA and tokenB may be passed in either order: token0/token1 or token1/token0. tickSpacing is retrieved\n    /// from the fee. The call will revert if the pool already exists, the fee is invalid, or the token arguments\n    /// are invalid.\n    /// @return pool The address of the newly created pool\n    function createPool(\n        address tokenA,\n        address tokenB,\n        uint24 fee\n    ) external returns (address pool);\n\n    /// @notice Updates the owner of the factory\n    /// @dev Must be called by the current owner\n    /// @param _owner The new owner of the factory\n    function setOwner(address _owner) external;\n\n    /// @notice Enables a fee amount with the given tickSpacing\n    /// @dev Fee amounts may never be removed once enabled\n    /// @param fee The fee amount to enable, denominated in hundredths of a bip (i.e. 1e-6)\n    /// @param tickSpacing The spacing between ticks to be enforced for all pools created with the given fee amount\n    function enableFeeAmount(uint24 fee, int24 tickSpacing) external;\n}\n"
    },
    "@uniswap/v3-core/contracts/libraries/LowGasSafeMath.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.7.0;\n\n/// @title Optimized overflow and underflow safe math operations\n/// @notice Contains methods for doing math operations that revert on overflow or underflow for minimal gas cost\nlibrary LowGasSafeMath {\n    /// @notice Returns x + y, reverts if sum overflows uint256\n    /// @param x The augend\n    /// @param y The addend\n    /// @return z The sum of x and y\n    function add(uint256 x, uint256 y) internal pure returns (uint256 z) {\n        require((z = x + y) >= x);\n    }\n\n    /// @notice Returns x - y, reverts if underflows\n    /// @param x The minuend\n    /// @param y The subtrahend\n    /// @return z The difference of x and y\n    function sub(uint256 x, uint256 y) internal pure returns (uint256 z) {\n        require((z = x - y) <= x);\n    }\n\n    /// @notice Returns x * y, reverts if overflows\n    /// @param x The multiplicand\n    /// @param y The multiplier\n    /// @return z The product of x and y\n    function mul(uint256 x, uint256 y) internal pure returns (uint256 z) {\n        require(x == 0 || (z = x * y) / x == y);\n    }\n\n    /// @notice Returns x + y, reverts if overflows or underflows\n    /// @param x The augend\n    /// @param y The addend\n    /// @return z The sum of x and y\n    function add(int256 x, int256 y) internal pure returns (int256 z) {\n        require((z = x + y) >= x == (y >= 0));\n    }\n\n    /// @notice Returns x - y, reverts if overflows or underflows\n    /// @param x The minuend\n    /// @param y The subtrahend\n    /// @return z The difference of x and y\n    function sub(int256 x, int256 y) internal pure returns (int256 z) {\n        require((z = x - y) <= x == (y >= 0));\n    }\n}\n"
    },
    "@uniswap/v3-core/contracts/interfaces/IUniswapV3Pool.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\nimport './pool/IUniswapV3PoolImmutables.sol';\nimport './pool/IUniswapV3PoolState.sol';\nimport './pool/IUniswapV3PoolDerivedState.sol';\nimport './pool/IUniswapV3PoolActions.sol';\nimport './pool/IUniswapV3PoolOwnerActions.sol';\nimport './pool/IUniswapV3PoolEvents.sol';\n\n/// @title The interface for a Uniswap V3 Pool\n/// @notice A Uniswap pool facilitates swapping and automated market making between any two assets that strictly conform\n/// to the ERC20 specification\n/// @dev The pool interface is broken up into many smaller pieces\ninterface IUniswapV3Pool is\n    IUniswapV3PoolImmutables,\n    IUniswapV3PoolState,\n    IUniswapV3PoolDerivedState,\n    IUniswapV3PoolActions,\n    IUniswapV3PoolOwnerActions,\n    IUniswapV3PoolEvents\n{\n\n}\n"
    },
    "@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolImmutables.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Pool state that never changes\n/// @notice These parameters are fixed for a pool forever, i.e., the methods will always return the same values\ninterface IUniswapV3PoolImmutables {\n    /// @notice The contract that deployed the pool, which must adhere to the IUniswapV3Factory interface\n    /// @return The contract address\n    function factory() external view returns (address);\n\n    /// @notice The first of the two tokens of the pool, sorted by address\n    /// @return The token contract address\n    function token0() external view returns (address);\n\n    /// @notice The second of the two tokens of the pool, sorted by address\n    /// @return The token contract address\n    function token1() external view returns (address);\n\n    /// @notice The pool's fee in hundredths of a bip, i.e. 1e-6\n    /// @return The fee\n    function fee() external view returns (uint24);\n\n    /// @notice The pool tick spacing\n    /// @dev Ticks can only be used at multiples of this value, minimum of 1 and always positive\n    /// e.g.: a tickSpacing of 3 means ticks can be initialized every 3rd tick, i.e., ..., -6, -3, 0, 3, 6, ...\n    /// This value is an int24 to avoid casting even though it is always positive.\n    /// @return The tick spacing\n    function tickSpacing() external view returns (int24);\n\n    /// @notice The maximum amount of position liquidity that can use any tick in the range\n    /// @dev This parameter is enforced per tick to prevent liquidity from overflowing a uint128 at any point, and\n    /// also prevents out-of-range liquidity from being used to prevent adding in-range liquidity to a pool\n    /// @return The max amount of liquidity per tick\n    function maxLiquidityPerTick() external view returns (uint128);\n}\n"
    },
    "@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolState.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Pool state that can change\n/// @notice These methods compose the pool's state, and can change with any frequency including multiple times\n/// per transaction\ninterface IUniswapV3PoolState {\n    /// @notice The 0th storage slot in the pool stores many values, and is exposed as a single method to save gas\n    /// when accessed externally.\n    /// @return sqrtPriceX96 The current price of the pool as a sqrt(token1/token0) Q64.96 value\n    /// tick The current tick of the pool, i.e. according to the last tick transition that was run.\n    /// This value may not always be equal to SqrtTickMath.getTickAtSqrtRatio(sqrtPriceX96) if the price is on a tick\n    /// boundary.\n    /// observationIndex The index of the last oracle observation that was written,\n    /// observationCardinality The current maximum number of observations stored in the pool,\n    /// observationCardinalityNext The next maximum number of observations, to be updated when the observation.\n    /// feeProtocol The protocol fee for both tokens of the pool.\n    /// Encoded as two 4 bit values, where the protocol fee of token1 is shifted 4 bits and the protocol fee of token0\n    /// is the lower 4 bits. Used as the denominator of a fraction of the swap fee, e.g. 4 means 1/4th of the swap fee.\n    /// unlocked Whether the pool is currently locked to reentrancy\n    function slot0()\n        external\n        view\n        returns (\n            uint160 sqrtPriceX96,\n            int24 tick,\n            uint16 observationIndex,\n            uint16 observationCardinality,\n            uint16 observationCardinalityNext,\n            uint8 feeProtocol,\n            bool unlocked\n        );\n\n    /// @notice The fee growth as a Q128.128 fees of token0 collected per unit of liquidity for the entire life of the pool\n    /// @dev This value can overflow the uint256\n    function feeGrowthGlobal0X128() external view returns (uint256);\n\n    /// @notice The fee growth as a Q128.128 fees of token1 collected per unit of liquidity for the entire life of the pool\n    /// @dev This value can overflow the uint256\n    function feeGrowthGlobal1X128() external view returns (uint256);\n\n    /// @notice The amounts of token0 and token1 that are owed to the protocol\n    /// @dev Protocol fees will never exceed uint128 max in either token\n    function protocolFees() external view returns (uint128 token0, uint128 token1);\n\n    /// @notice The currently in range liquidity available to the pool\n    /// @dev This value has no relationship to the total liquidity across all ticks\n    function liquidity() external view returns (uint128);\n\n    /// @notice Look up information about a specific tick in the pool\n    /// @param tick The tick to look up\n    /// @return liquidityGross the total amount of position liquidity that uses the pool either as tick lower or\n    /// tick upper,\n    /// liquidityNet how much liquidity changes when the pool price crosses the tick,\n    /// feeGrowthOutside0X128 the fee growth on the other side of the tick from the current tick in token0,\n    /// feeGrowthOutside1X128 the fee growth on the other side of the tick from the current tick in token1,\n    /// tickCumulativeOutside the cumulative tick value on the other side of the tick from the current tick\n    /// secondsPerLiquidityOutsideX128 the seconds spent per liquidity on the other side of the tick from the current tick,\n    /// secondsOutside the seconds spent on the other side of the tick from the current tick,\n    /// initialized Set to true if the tick is initialized, i.e. liquidityGross is greater than 0, otherwise equal to false.\n    /// Outside values can only be used if the tick is initialized, i.e. if liquidityGross is greater than 0.\n    /// In addition, these values are only relative and must be used only in comparison to previous snapshots for\n    /// a specific position.\n    function ticks(int24 tick)\n        external\n        view\n        returns (\n            uint128 liquidityGross,\n            int128 liquidityNet,\n            uint256 feeGrowthOutside0X128,\n            uint256 feeGrowthOutside1X128,\n            int56 tickCumulativeOutside,\n            uint160 secondsPerLiquidityOutsideX128,\n            uint32 secondsOutside,\n            bool initialized\n        );\n\n    /// @notice Returns 256 packed tick initialized boolean values. See TickBitmap for more information\n    function tickBitmap(int16 wordPosition) external view returns (uint256);\n\n    /// @notice Returns the information about a position by the position's key\n    /// @param key The position's key is a hash of a preimage composed by the owner, tickLower and tickUpper\n    /// @return _liquidity The amount of liquidity in the position,\n    /// Returns feeGrowthInside0LastX128 fee growth of token0 inside the tick range as of the last mint/burn/poke,\n    /// Returns feeGrowthInside1LastX128 fee growth of token1 inside the tick range as of the last mint/burn/poke,\n    /// Returns tokensOwed0 the computed amount of token0 owed to the position as of the last mint/burn/poke,\n    /// Returns tokensOwed1 the computed amount of token1 owed to the position as of the last mint/burn/poke\n    function positions(bytes32 key)\n        external\n        view\n        returns (\n            uint128 _liquidity,\n            uint256 feeGrowthInside0LastX128,\n            uint256 feeGrowthInside1LastX128,\n            uint128 tokensOwed0,\n            uint128 tokensOwed1\n        );\n\n    /// @notice Returns data about a specific observation index\n    /// @param index The element of the observations array to fetch\n    /// @dev You most likely want to use #observe() instead of this method to get an observation as of some amount of time\n    /// ago, rather than at a specific index in the array.\n    /// @return blockTimestamp The timestamp of the observation,\n    /// Returns tickCumulative the tick multiplied by seconds elapsed for the life of the pool as of the observation timestamp,\n    /// Returns secondsPerLiquidityCumulativeX128 the seconds per in range liquidity for the life of the pool as of the observation timestamp,\n    /// Returns initialized whether the observation has been initialized and the values are safe to use\n    function observations(uint256 index)\n        external\n        view\n        returns (\n            uint32 blockTimestamp,\n            int56 tickCumulative,\n            uint160 secondsPerLiquidityCumulativeX128,\n            bool initialized\n        );\n}\n"
    },
    "@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolDerivedState.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Pool state that is not stored\n/// @notice Contains view functions to provide information about the pool that is computed rather than stored on the\n/// blockchain. The functions here may have variable gas costs.\ninterface IUniswapV3PoolDerivedState {\n    /// @notice Returns the cumulative tick and liquidity as of each timestamp `secondsAgo` from the current block timestamp\n    /// @dev To get a time weighted average tick or liquidity-in-range, you must call this with two values, one representing\n    /// the beginning of the period and another for the end of the period. E.g., to get the last hour time-weighted average tick,\n    /// you must call it with secondsAgos = [3600, 0].\n    /// @dev The time weighted average tick represents the geometric time weighted average price of the pool, in\n    /// log base sqrt(1.0001) of token1 / token0. The TickMath library can be used to go from a tick value to a ratio.\n    /// @param secondsAgos From how long ago each cumulative tick and liquidity value should be returned\n    /// @return tickCumulatives Cumulative tick values as of each `secondsAgos` from the current block timestamp\n    /// @return secondsPerLiquidityCumulativeX128s Cumulative seconds per liquidity-in-range value as of each `secondsAgos` from the current block\n    /// timestamp\n    function observe(uint32[] calldata secondsAgos)\n        external\n        view\n        returns (int56[] memory tickCumulatives, uint160[] memory secondsPerLiquidityCumulativeX128s);\n\n    /// @notice Returns a snapshot of the tick cumulative, seconds per liquidity and seconds inside a tick range\n    /// @dev Snapshots must only be compared to other snapshots, taken over a period for which a position existed.\n    /// I.e., snapshots cannot be compared if a position is not held for the entire period between when the first\n    /// snapshot is taken and the second snapshot is taken.\n    /// @param tickLower The lower tick of the range\n    /// @param tickUpper The upper tick of the range\n    /// @return tickCumulativeInside The snapshot of the tick accumulator for the range\n    /// @return secondsPerLiquidityInsideX128 The snapshot of seconds per liquidity for the range\n    /// @return secondsInside The snapshot of seconds per liquidity for the range\n    function snapshotCumulativesInside(int24 tickLower, int24 tickUpper)\n        external\n        view\n        returns (\n            int56 tickCumulativeInside,\n            uint160 secondsPerLiquidityInsideX128,\n            uint32 secondsInside\n        );\n}\n"
    },
    "@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolActions.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Permissionless pool actions\n/// @notice Contains pool methods that can be called by anyone\ninterface IUniswapV3PoolActions {\n    /// @notice Sets the initial price for the pool\n    /// @dev Price is represented as a sqrt(amountToken1/amountToken0) Q64.96 value\n    /// @param sqrtPriceX96 the initial sqrt price of the pool as a Q64.96\n    function initialize(uint160 sqrtPriceX96) external;\n\n    /// @notice Adds liquidity for the given recipient/tickLower/tickUpper position\n    /// @dev The caller of this method receives a callback in the form of IUniswapV3MintCallback#uniswapV3MintCallback\n    /// in which they must pay any token0 or token1 owed for the liquidity. The amount of token0/token1 due depends\n    /// on tickLower, tickUpper, the amount of liquidity, and the current price.\n    /// @param recipient The address for which the liquidity will be created\n    /// @param tickLower The lower tick of the position in which to add liquidity\n    /// @param tickUpper The upper tick of the position in which to add liquidity\n    /// @param amount The amount of liquidity to mint\n    /// @param data Any data that should be passed through to the callback\n    /// @return amount0 The amount of token0 that was paid to mint the given amount of liquidity. Matches the value in the callback\n    /// @return amount1 The amount of token1 that was paid to mint the given amount of liquidity. Matches the value in the callback\n    function mint(\n        address recipient,\n        int24 tickLower,\n        int24 tickUpper,\n        uint128 amount,\n        bytes calldata data\n    ) external returns (uint256 amount0, uint256 amount1);\n\n    /// @notice Collects tokens owed to a position\n    /// @dev Does not recompute fees earned, which must be done either via mint or burn of any amount of liquidity.\n    /// Collect must be called by the position owner. To withdraw only token0 or only token1, amount0Requested or\n    /// amount1Requested may be set to zero. To withdraw all tokens owed, caller may pass any value greater than the\n    /// actual tokens owed, e.g. type(uint128).max. Tokens owed may be from accumulated swap fees or burned liquidity.\n    /// @param recipient The address which should receive the fees collected\n    /// @param tickLower The lower tick of the position for which to collect fees\n    /// @param tickUpper The upper tick of the position for which to collect fees\n    /// @param amount0Requested How much token0 should be withdrawn from the fees owed\n    /// @param amount1Requested How much token1 should be withdrawn from the fees owed\n    /// @return amount0 The amount of fees collected in token0\n    /// @return amount1 The amount of fees collected in token1\n    function collect(\n        address recipient,\n        int24 tickLower,\n        int24 tickUpper,\n        uint128 amount0Requested,\n        uint128 amount1Requested\n    ) external returns (uint128 amount0, uint128 amount1);\n\n    /// @notice Burn liquidity from the sender and account tokens owed for the liquidity to the position\n    /// @dev Can be used to trigger a recalculation of fees owed to a position by calling with an amount of 0\n    /// @dev Fees must be collected separately via a call to #collect\n    /// @param tickLower The lower tick of the position for which to burn liquidity\n    /// @param tickUpper The upper tick of the position for which to burn liquidity\n    /// @param amount How much liquidity to burn\n    /// @return amount0 The amount of token0 sent to the recipient\n    /// @return amount1 The amount of token1 sent to the recipient\n    function burn(\n        int24 tickLower,\n        int24 tickUpper,\n        uint128 amount\n    ) external returns (uint256 amount0, uint256 amount1);\n\n    /// @notice Swap token0 for token1, or token1 for token0\n    /// @dev The caller of this method receives a callback in the form of IUniswapV3SwapCallback#uniswapV3SwapCallback\n    /// @param recipient The address to receive the output of the swap\n    /// @param zeroForOne The direction of the swap, true for token0 to token1, false for token1 to token0\n    /// @param amountSpecified The amount of the swap, which implicitly configures the swap as exact input (positive), or exact output (negative)\n    /// @param sqrtPriceLimitX96 The Q64.96 sqrt price limit. If zero for one, the price cannot be less than this\n    /// value after the swap. If one for zero, the price cannot be greater than this value after the swap\n    /// @param data Any data to be passed through to the callback\n    /// @return amount0 The delta of the balance of token0 of the pool, exact when negative, minimum when positive\n    /// @return amount1 The delta of the balance of token1 of the pool, exact when negative, minimum when positive\n    function swap(\n        address recipient,\n        bool zeroForOne,\n        int256 amountSpecified,\n        uint160 sqrtPriceLimitX96,\n        bytes calldata data\n    ) external returns (int256 amount0, int256 amount1);\n\n    /// @notice Receive token0 and/or token1 and pay it back, plus a fee, in the callback\n    /// @dev The caller of this method receives a callback in the form of IUniswapV3FlashCallback#uniswapV3FlashCallback\n    /// @dev Can be used to donate underlying tokens pro-rata to currently in-range liquidity providers by calling\n    /// with 0 amount{0,1} and sending the donation amount(s) from the callback\n    /// @param recipient The address which will receive the token0 and token1 amounts\n    /// @param amount0 The amount of token0 to send\n    /// @param amount1 The amount of token1 to send\n    /// @param data Any data to be passed through to the callback\n    function flash(\n        address recipient,\n        uint256 amount0,\n        uint256 amount1,\n        bytes calldata data\n    ) external;\n\n    /// @notice Increase the maximum number of price and liquidity observations that this pool will store\n    /// @dev This method is no-op if the pool already has an observationCardinalityNext greater than or equal to\n    /// the input observationCardinalityNext.\n    /// @param observationCardinalityNext The desired minimum number of observations for the pool to store\n    function increaseObservationCardinalityNext(uint16 observationCardinalityNext) external;\n}\n"
    },
    "@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolOwnerActions.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Permissioned pool actions\n/// @notice Contains pool methods that may only be called by the factory owner\ninterface IUniswapV3PoolOwnerActions {\n    /// @notice Set the denominator of the protocol's % share of the fees\n    /// @param feeProtocol0 new protocol fee for token0 of the pool\n    /// @param feeProtocol1 new protocol fee for token1 of the pool\n    function setFeeProtocol(uint8 feeProtocol0, uint8 feeProtocol1) external;\n\n    /// @notice Collect the protocol fee accrued to the pool\n    /// @param recipient The address to which collected protocol fees should be sent\n    /// @param amount0Requested The maximum amount of token0 to send, can be 0 to collect fees in only token1\n    /// @param amount1Requested The maximum amount of token1 to send, can be 0 to collect fees in only token0\n    /// @return amount0 The protocol fee collected in token0\n    /// @return amount1 The protocol fee collected in token1\n    function collectProtocol(\n        address recipient,\n        uint128 amount0Requested,\n        uint128 amount1Requested\n    ) external returns (uint128 amount0, uint128 amount1);\n}\n"
    },
    "@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolEvents.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Events emitted by a pool\n/// @notice Contains all events emitted by the pool\ninterface IUniswapV3PoolEvents {\n    /// @notice Emitted exactly once by a pool when #initialize is first called on the pool\n    /// @dev Mint/Burn/Swap cannot be emitted by the pool before Initialize\n    /// @param sqrtPriceX96 The initial sqrt price of the pool, as a Q64.96\n    /// @param tick The initial tick of the pool, i.e. log base 1.0001 of the starting price of the pool\n    event Initialize(uint160 sqrtPriceX96, int24 tick);\n\n    /// @notice Emitted when liquidity is minted for a given position\n    /// @param sender The address that minted the liquidity\n    /// @param owner The owner of the position and recipient of any minted liquidity\n    /// @param tickLower The lower tick of the position\n    /// @param tickUpper The upper tick of the position\n    /// @param amount The amount of liquidity minted to the position range\n    /// @param amount0 How much token0 was required for the minted liquidity\n    /// @param amount1 How much token1 was required for the minted liquidity\n    event Mint(\n        address sender,\n        address indexed owner,\n        int24 indexed tickLower,\n        int24 indexed tickUpper,\n        uint128 amount,\n        uint256 amount0,\n        uint256 amount1\n    );\n\n    /// @notice Emitted when fees are collected by the owner of a position\n    /// @dev Collect events may be emitted with zero amount0 and amount1 when the caller chooses not to collect fees\n    /// @param owner The owner of the position for which fees are collected\n    /// @param tickLower The lower tick of the position\n    /// @param tickUpper The upper tick of the position\n    /// @param amount0 The amount of token0 fees collected\n    /// @param amount1 The amount of token1 fees collected\n    event Collect(\n        address indexed owner,\n        address recipient,\n        int24 indexed tickLower,\n        int24 indexed tickUpper,\n        uint128 amount0,\n        uint128 amount1\n    );\n\n    /// @notice Emitted when a position's liquidity is removed\n    /// @dev Does not withdraw any fees earned by the liquidity position, which must be withdrawn via #collect\n    /// @param owner The owner of the position for which liquidity is removed\n    /// @param tickLower The lower tick of the position\n    /// @param tickUpper The upper tick of the position\n    /// @param amount The amount of liquidity to remove\n    /// @param amount0 The amount of token0 withdrawn\n    /// @param amount1 The amount of token1 withdrawn\n    event Burn(\n        address indexed owner,\n        int24 indexed tickLower,\n        int24 indexed tickUpper,\n        uint128 amount,\n        uint256 amount0,\n        uint256 amount1\n    );\n\n    /// @notice Emitted by the pool for any swaps between token0 and token1\n    /// @param sender The address that initiated the swap call, and that received the callback\n    /// @param recipient The address that received the output of the swap\n    /// @param amount0 The delta of the token0 balance of the pool\n    /// @param amount1 The delta of the token1 balance of the pool\n    /// @param sqrtPriceX96 The sqrt(price) of the pool after the swap, as a Q64.96\n    /// @param liquidity The liquidity of the pool after the swap\n    /// @param tick The log base 1.0001 of price of the pool after the swap\n    event Swap(\n        address indexed sender,\n        address indexed recipient,\n        int256 amount0,\n        int256 amount1,\n        uint160 sqrtPriceX96,\n        uint128 liquidity,\n        int24 tick\n    );\n\n    /// @notice Emitted by the pool for any flashes of token0/token1\n    /// @param sender The address that initiated the swap call, and that received the callback\n    /// @param recipient The address that received the tokens from flash\n    /// @param amount0 The amount of token0 that was flashed\n    /// @param amount1 The amount of token1 that was flashed\n    /// @param paid0 The amount of token0 paid for the flash, which can exceed the amount0 plus the fee\n    /// @param paid1 The amount of token1 paid for the flash, which can exceed the amount1 plus the fee\n    event Flash(\n        address indexed sender,\n        address indexed recipient,\n        uint256 amount0,\n        uint256 amount1,\n        uint256 paid0,\n        uint256 paid1\n    );\n\n    /// @notice Emitted by the pool for increases to the number of observations that can be stored\n    /// @dev observationCardinalityNext is not the observation cardinality until an observation is written at the index\n    /// just before a mint/swap/burn.\n    /// @param observationCardinalityNextOld The previous value of the next observation cardinality\n    /// @param observationCardinalityNextNew The updated value of the next observation cardinality\n    event IncreaseObservationCardinalityNext(\n        uint16 observationCardinalityNextOld,\n        uint16 observationCardinalityNextNew\n    );\n\n    /// @notice Emitted when the protocol fee is changed by the pool\n    /// @param feeProtocol0Old The previous value of the token0 protocol fee\n    /// @param feeProtocol1Old The previous value of the token1 protocol fee\n    /// @param feeProtocol0New The updated value of the token0 protocol fee\n    /// @param feeProtocol1New The updated value of the token1 protocol fee\n    event SetFeeProtocol(uint8 feeProtocol0Old, uint8 feeProtocol1Old, uint8 feeProtocol0New, uint8 feeProtocol1New);\n\n    /// @notice Emitted when the collected protocol fees are withdrawn by the factory owner\n    /// @param sender The address that collects the protocol fees\n    /// @param recipient The address that receives the collected protocol fees\n    /// @param amount0 The amount of token0 protocol fees that is withdrawn\n    /// @param amount0 The amount of token1 protocol fees that is withdrawn\n    event CollectProtocol(address indexed sender, address indexed recipient, uint128 amount0, uint128 amount1);\n}\n"
    },
    "contracts/mock/MockOracle.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity 0.8.7;\n\nimport \"../interfaces/IOracle.sol\";\nimport \"../oracles/Oracle.sol\";\n\ncontract MockOracle is Oracle {\n    mapping(address => uint256) public prices;\n    mapping(address => uint256) public liquidity;\n\n    event NotifiedAboutChoice(address asset);\n\n    constructor(address _quoteToken) Oracle(_quoteToken) {\n    }\n\n    function notifyAboutChoice(address _asset) external override {\n        emit NotifiedAboutChoice(_asset);\n    }\n\n    function getPrice(address _asset) external view override returns (uint256) {\n        return prices[_asset];\n    }\n\n    function assetSupported(address _asset) external view override returns (bool) {\n        return prices[_asset] > 0;\n    }\n\n    function getQuoteLiquidity(address _asset) external view override returns (uint256) {\n        return liquidity[_asset];\n    }\n\n    function setPrice(address _asset, uint256 _price) public {\n        prices[_asset] = _price;\n    }\n\n    function setLiquidity(address _asset, uint256 _liquidity) public {\n        liquidity[_asset] = _liquidity;\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}