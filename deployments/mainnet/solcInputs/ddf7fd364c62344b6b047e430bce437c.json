{
  "language": "Solidity",
  "sources": {
    "contracts/BaseSilo.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity 0.8.13;\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\n\nimport \"./utils/LiquidationReentrancyGuard.sol\";\n\nimport \"./interfaces/IBaseSilo.sol\";\nimport \"./interfaces/IGuardedLaunch.sol\";\nimport \"./interfaces/ISiloRepository.sol\";\nimport \"./interfaces/IPriceProvidersRepository.sol\";\nimport \"./interfaces/IInterestRateModel.sol\";\nimport \"./interfaces/IShareToken.sol\";\n\nimport \"./lib/Ping.sol\";\nimport \"./lib/EasyMath.sol\";\nimport \"./lib/TokenHelper.sol\";\nimport \"./lib/Solvency.sol\";\n\n/// @title BaseSilo\n/// @dev Base contract for Silo core logic.\n/// @custom:security-contact security@silo.finance\nabstract contract BaseSilo is IBaseSilo, ReentrancyGuard, LiquidationReentrancyGuard {\n    using SafeERC20 for ERC20;\n    using EasyMath for uint256;\n\n    ISiloRepository immutable public override siloRepository;\n\n    // asset address for which Silo was created\n    address public immutable siloAsset;\n\n    /// @dev version of silo\n    /// @notice It tells us which `SiloRepository.siloFactory(version)` created this Silo\n    uint128 public immutable VERSION; // solhint-disable-line var-name-mixedcase\n\n    // solhint-disable-next-line var-name-mixedcase\n    uint256 private immutable _ASSET_DECIMAL_POINTS;\n\n    /// @dev stores all *synced* assets (bridge assets + removed bridge assets + siloAsset)\n    address[] private _allSiloAssets;\n\n    /// @dev asset => AssetStorage\n    mapping(address => AssetStorage) private _assetStorage;\n\n    /// @dev asset => AssetInterestData\n    mapping(address => AssetInterestData) private _interestData;\n\n    error AssetDoesNotExist();\n    error BorrowNotPossible();\n    error DepositNotPossible();\n    error DepositsExceedLimit();\n    error InvalidRepository();\n    error InvalidSiloVersion();\n    error MaximumLTVReached();\n    error NotEnoughLiquidity();\n    error NotEnoughDeposits();\n    error NotSolvent();\n    error OnlyRouter();\n    error Paused();\n    error UnexpectedEmptyReturn();\n    error UserIsZero();\n\n    modifier onlyExistingAsset(address _asset) {\n        if (_interestData[_asset].status == AssetStatus.Undefined) {\n            revert AssetDoesNotExist();\n        }\n\n        _;\n    }\n\n    modifier onlyRouter() {\n        if (msg.sender != siloRepository.router()) revert OnlyRouter();\n\n        _;\n    }\n\n    modifier validateMaxDepositsAfter(address _asset) {\n        _;\n\n        IPriceProvidersRepository priceProviderRepo = siloRepository.priceProvidersRepository();\n\n        AssetStorage storage _assetState = _assetStorage[_asset];\n        uint256 allDeposits = _assetState.totalDeposits + _assetState.collateralOnlyDeposits;\n\n        if (\n            priceProviderRepo.getPrice(_asset) * allDeposits / (10 ** IERC20Metadata(_asset).decimals()) >\n            IGuardedLaunch(address(siloRepository)).getMaxSiloDepositsValue(address(this), _asset)\n        ) {\n            revert DepositsExceedLimit();\n        }\n    }\n\n    constructor (ISiloRepository _repository, address _siloAsset, uint128 _version) {\n        if (!Ping.pong(_repository.siloRepositoryPing)) revert InvalidRepository();\n        if (_version == 0) revert InvalidSiloVersion();\n\n        uint256 decimals = TokenHelper.assertAndGetDecimals(_siloAsset);\n\n        VERSION = _version;\n        siloRepository = _repository;\n        siloAsset = _siloAsset;\n        _ASSET_DECIMAL_POINTS = 10**decimals;\n    }\n\n    /// @dev this is exposed only for test purposes, but it is safe to leave it like that\n    function initAssetsTokens() external nonReentrant {\n        _initAssetsTokens();\n    }\n\n    /// @inheritdoc IBaseSilo\n    function syncBridgeAssets() external override nonReentrant {\n        // sync removed assets\n        address[] memory removedBridgeAssets = siloRepository.getRemovedBridgeAssets();\n\n        for (uint256 i = 0; i < removedBridgeAssets.length; i++) {\n            // If removed bridge asset is the silo asset for this silo, do not remove it\n            address removedBridgeAsset = removedBridgeAssets[i];\n            if (removedBridgeAsset != siloAsset) {\n                _interestData[removedBridgeAsset].status = AssetStatus.Removed;\n                emit AssetStatusUpdate(removedBridgeAsset, AssetStatus.Removed);\n            }\n        }\n\n        // must be called at the end, because we overriding `_assetStorage[removedBridgeAssets[i]].removed`\n        _initAssetsTokens();\n    }\n\n    /// @inheritdoc IBaseSilo\n    function assetStorage(address _asset) external view override returns (AssetStorage memory) {\n        return _assetStorage[_asset];\n    }\n\n    /// @inheritdoc IBaseSilo\n    function interestData(address _asset) external view override returns (AssetInterestData memory) {\n        return _interestData[_asset];\n    }\n\n    /// @inheritdoc IBaseSilo\n    function utilizationData(address _asset) external view override returns (UtilizationData memory data) {\n        AssetStorage storage _assetState = _assetStorage[_asset];\n\n        return UtilizationData(\n            _assetState.totalDeposits,\n            _assetState.totalBorrowAmount,\n            _interestData[_asset].interestRateTimestamp\n        );\n    }\n\n    /// @inheritdoc IBaseSilo\n    function getAssets() public view override returns (address[] memory assets) {\n        return _allSiloAssets;\n    }\n\n    /// @inheritdoc IBaseSilo\n    function getAssetsWithState() public view override returns (\n        address[] memory assets,\n        AssetStorage[] memory assetsStorage\n    ) {\n        assets = _allSiloAssets;\n        assetsStorage = new AssetStorage[](assets.length);\n\n        for (uint256 i = 0; i < assets.length; i++) {\n            assetsStorage[i] = _assetStorage[assets[i]];\n        }\n    }\n\n    /// @inheritdoc IBaseSilo\n    function isSolvent(address _user) public view override returns (bool) {\n        if (_user == address(0)) revert UserIsZero();\n\n        (address[] memory assets, AssetStorage[] memory assetsStates) = getAssetsWithState();\n\n        (uint256 userLTV, uint256 liquidationThreshold) = Solvency.calculateLTVs(\n            Solvency.SolvencyParams(\n                siloRepository,\n                ISilo(address(this)),\n                assets,\n                assetsStates,\n                _user\n            ),\n            Solvency.TypeofLTV.LiquidationThreshold\n        );\n\n        return userLTV <= liquidationThreshold;\n    }\n\n    /// @inheritdoc IBaseSilo\n    function depositPossible(address _asset, address _depositor) public view override returns (bool) {\n        return _assetStorage[_asset].debtToken.balanceOf(_depositor) == 0\n            && _interestData[_asset].status == AssetStatus.Active;\n    }\n\n    /// @inheritdoc IBaseSilo\n    function borrowPossible(address _asset, address _borrower) public view override returns (bool) {\n        AssetStorage storage _assetState = _assetStorage[_asset];\n\n        return _assetState.collateralToken.balanceOf(_borrower) == 0\n            && _assetState.collateralOnlyToken.balanceOf(_borrower) == 0\n            && _interestData[_asset].status == AssetStatus.Active;\n    }\n\n    /// @inheritdoc IBaseSilo\n    function liquidity(address _asset) public view returns (uint256) {\n        return ERC20(_asset).balanceOf(address(this)) - _assetStorage[_asset].collateralOnlyDeposits;\n    }\n\n    /// @dev Initiate asset by deploying accounting EC20 tokens for collateral and debt\n    /// @param _tokensFactory factory contract that deploys collateral and debt tokens\n    /// @param _asset which asset to initialize\n    /// @param _isBridgeAsset true if initialized asset is a bridge asset\n    function _initAsset(ITokensFactory _tokensFactory, address _asset, bool _isBridgeAsset) internal {\n        AssetSharesMetadata memory metadata = _generateSharesNames(_asset, _isBridgeAsset);\n\n        AssetStorage storage _assetState = _assetStorage[_asset];\n\n        _assetState.collateralToken = _tokensFactory.createShareCollateralToken(\n            metadata.collateralName, metadata.collateralSymbol, _asset\n        );\n\n        _assetState.collateralOnlyToken = _tokensFactory.createShareCollateralToken(\n            metadata.protectedName, metadata.protectedSymbol, _asset\n        );\n\n        _assetState.debtToken = _tokensFactory.createShareDebtToken(\n            metadata.debtName, metadata.debtSymbol, _asset\n        );\n\n        // keep synced asset in storage array\n        _allSiloAssets.push(_asset);\n        _interestData[_asset].status = AssetStatus.Active;\n        emit AssetStatusUpdate(_asset, AssetStatus.Active);\n    }\n\n    /// @dev Initializes all assets (bridge assets + unique asset) for Silo but only if asset has not been\n    /// initialized already. It's safe to call it multiple times. It's safe for anyone to call it at any time.\n    function _initAssetsTokens() internal {\n        ITokensFactory tokensFactory = siloRepository.tokensFactory();\n\n        // init silo asset if needed\n        if (address(_assetStorage[siloAsset].collateralToken) == address(0)) {\n            _initAsset(tokensFactory, siloAsset, false);\n        }\n\n        // sync active assets\n        address[] memory bridgeAssets = siloRepository.getBridgeAssets();\n\n        for (uint256 i = 0; i < bridgeAssets.length; i++) {\n            address bridgeAsset = bridgeAssets[i];\n            // In case a bridge asset is added that already has a Silo,\n            // do not initiate that asset in its Silo\n            if (address(_assetStorage[bridgeAsset].collateralToken) == address(0)) {\n                _initAsset(tokensFactory, bridgeAsset, true);\n            } else {\n                _interestData[bridgeAsset].status = AssetStatus.Active;\n                emit AssetStatusUpdate(bridgeAsset, AssetStatus.Active);\n            }\n        }\n    }\n\n    /// @dev Generate asset shares tokens names and symbols\n    /// @param _asset asset for which shares tokens will be initializaed\n    /// @param _isBridgeAsset true if initialized asset is a bridge asset\n    function _generateSharesNames(address _asset, bool _isBridgeAsset)\n        internal\n        view\n        returns (AssetSharesMetadata memory metadata)\n    {\n        // Naming convention in UNI example:\n        // - for siloAsset: sUNI, dUNI, spUNI\n        // - for bridgeAsset: sWETH-UNI, dWETH-UNI, spWETH-UNI\n        string memory assetSymbol = TokenHelper.symbol(_asset);\n\n        metadata = AssetSharesMetadata({\n            collateralName: string.concat(\"Silo Finance Borrowable \", assetSymbol, \" Deposit\"),\n            collateralSymbol: string.concat(\"s\", assetSymbol),\n            protectedName: string.concat(\"Silo Finance Protected \", assetSymbol, \" Deposit\"),\n            protectedSymbol: string.concat(\"sp\", assetSymbol),\n            debtName: string.concat(\"Silo Finance \", assetSymbol, \" Debt\"),\n            debtSymbol: string.concat(\"d\", assetSymbol)\n        });\n\n        if (_isBridgeAsset) {\n            string memory baseSymbol = TokenHelper.symbol(siloAsset);\n\n            metadata.collateralName = string.concat(metadata.collateralName, \" in \", baseSymbol, \" Silo\");\n            metadata.collateralSymbol = string.concat(metadata.collateralSymbol, \"-\", baseSymbol);\n\n            metadata.protectedName = string.concat(metadata.protectedName, \" in \", baseSymbol, \" Silo\");\n            metadata.protectedSymbol = string.concat(metadata.protectedSymbol, \"-\", baseSymbol);\n\n            metadata.debtName = string.concat(metadata.debtName, \" in \", baseSymbol, \" Silo\");\n            metadata.debtSymbol = string.concat(metadata.debtSymbol, \"-\", baseSymbol);\n        }\n    }\n\n    /// @dev Main deposit function that handles all deposit logic and validation\n    /// @param _asset asset address that is being deposited\n    /// @param _from wallet address form which to pull asset tokens\n    /// @param _depositor wallet address that will be granted ownership of deposited tokens. Keep in mind\n    /// that deposit can be made by Router contract but the owner of the deposit should be user.\n    /// @param _amount deposit amount\n    /// @param _collateralOnly true if deposit should be used for collateral only. Otherwise false.\n    /// Collateral only deposit cannot be borrowed by anyone and does not earn any interest. However,\n    /// it can be used as collateral and can be subject to liquidation.\n    /// @return collateralAmount deposited amount\n    /// @return collateralShare `_depositor` collateral shares based on deposited amount\n    function _deposit(\n        address _asset,\n        address _from,\n        address _depositor,\n        uint256 _amount,\n        bool _collateralOnly\n    )\n        internal\n        nonReentrant\n        validateMaxDepositsAfter(_asset)\n        returns (uint256 collateralAmount, uint256 collateralShare)\n    {\n        // MUST BE CALLED AS FIRST METHOD!\n        _accrueInterest(_asset);\n\n        if (!depositPossible(_asset, _depositor)) revert DepositNotPossible();\n\n        AssetStorage storage _state = _assetStorage[_asset];\n\n        collateralAmount = _amount;\n\n        uint256 totalDepositsCached = _collateralOnly ? _state.collateralOnlyDeposits : _state.totalDeposits;\n\n        if (_collateralOnly) {\n            collateralShare = _amount.toShare(totalDepositsCached, _state.collateralOnlyToken.totalSupply());\n            _state.collateralOnlyDeposits = totalDepositsCached + _amount;\n            _state.collateralOnlyToken.mint(_depositor, collateralShare);\n        } else {\n            collateralShare = _amount.toShare(totalDepositsCached, _state.collateralToken.totalSupply());\n            _state.totalDeposits = totalDepositsCached + _amount;\n            _state.collateralToken.mint(_depositor, collateralShare);\n        }\n\n        ERC20(_asset).safeTransferFrom(_from, address(this), _amount);\n\n        emit Deposit(_asset, _depositor, _amount, _collateralOnly);\n    }\n\n    /// @dev Main withdraw function that handles all withdraw logic and validation\n    /// @param _asset asset address that is being withdrawn\n    /// @param _depositor wallet address that is an owner of the deposited tokens\n    /// @param _receiver wallet address that will receive withdrawn tokens. It's possible that Router\n    /// contract is the owner of deposited tokens but we want user to get these tokens directly.\n    /// @param _amount amount to withdraw. If amount is equal to maximum value stored by uint256 type\n    /// (type(uint256).max), it will be assumed that user wants to withdraw all tokens and final account\n    /// will be dynamically calculated including interest.\n    /// @param _collateralOnly true if collateral only tokens are to be withdrawn. Otherwise false.\n    /// User can deposit the same asset as collateral only and as regular deposit. During withdraw,\n    /// it must be specified which tokens are to be withdrawn.\n    /// @return withdrawnAmount withdrawn amount that was transferred to user\n    /// @return withdrawnShare burned share based on `withdrawnAmount`\n    function _withdraw(address _asset, address _depositor, address _receiver, uint256 _amount, bool _collateralOnly)\n        internal\n        nonReentrant // because we transferring tokens\n        onlyExistingAsset(_asset)\n        returns (uint256 withdrawnAmount, uint256 withdrawnShare)\n    {\n        // MUST BE CALLED AS FIRST METHOD!\n        _accrueInterest(_asset);\n\n        (withdrawnAmount, withdrawnShare) = _withdrawAsset(\n            _asset,\n            _amount,\n            _depositor,\n            _receiver,\n            _collateralOnly,\n            0 // do not apply any fees on regular withdraw\n        );\n\n        if (withdrawnAmount == 0) revert UnexpectedEmptyReturn();\n\n        if (!isSolvent(_depositor)) revert NotSolvent();\n\n        emit Withdraw(_asset, _depositor, _receiver, withdrawnAmount, _collateralOnly);\n    }\n\n    /// @dev Main borrow function that handles all borrow logic and validation\n    /// @param _asset asset address that is being borrowed\n    /// @param _borrower wallet address that will own debt\n    /// @param _receiver wallet address that will receive borrowed tokens. It's possible that Router\n    /// contract is executing borrowing for user and should be the one receiving tokens, however,\n    /// the owner of the debt should be user himself.\n    /// @param _amount amount of asset to borrow\n    /// @return debtAmount borrowed amount\n    /// @return debtShare user debt share based on borrowed amount\n    function _borrow(address _asset, address _borrower, address _receiver, uint256 _amount)\n        internal\n        nonReentrant\n        returns (uint256 debtAmount, uint256 debtShare)\n    {\n        // MUST BE CALLED AS FIRST METHOD!\n        _accrueInterest(_asset);\n\n        if (!borrowPossible(_asset, _borrower)) revert BorrowNotPossible();\n\n        if (liquidity(_asset) < _amount) revert NotEnoughLiquidity();\n\n        AssetStorage storage _state = _assetStorage[_asset];\n\n        uint256 totalBorrowAmount = _state.totalBorrowAmount;\n        uint256 entryFee = siloRepository.entryFee();\n        uint256 fee = entryFee == 0 ? 0 : _amount * entryFee / Solvency._PRECISION_DECIMALS;\n        debtShare = (_amount + fee).toShareRoundUp(totalBorrowAmount, _state.debtToken.totalSupply());\n        debtAmount = _amount;\n\n        _state.totalBorrowAmount = totalBorrowAmount + _amount + fee;\n        _interestData[_asset].protocolFees += fee;\n\n        _state.debtToken.mint(_borrower, debtShare);\n\n        emit Borrow(_asset, _borrower, _amount);\n        ERC20(_asset).safeTransfer(_receiver, _amount);\n\n        // IMPORTANT - keep `validateBorrowAfter` at the end\n        _validateBorrowAfter(_borrower);\n    }\n\n    /// @dev Main repay function that handles all repay logic and validation\n    /// @param _asset asset address that is being repaid\n    /// @param _borrower wallet address for which debt is being repaid\n    /// @param _repayer wallet address that will pay the debt. It's possible that Router\n    /// contract is executing repay for user and should be the one paying the debt.\n    /// @param _amount amount of asset to repay\n    /// @return repaidAmount amount repaid\n    /// @return repaidShare burned debt share\n    function _repay(address _asset, address _borrower, address _repayer, uint256 _amount)\n        internal\n        onlyExistingAsset(_asset)\n        nonReentrant\n        returns (uint256 repaidAmount, uint256 repaidShare)\n    {\n        // MUST BE CALLED AS FIRST METHOD!\n        _accrueInterest(_asset);\n\n        AssetStorage storage _state = _assetStorage[_asset];\n        (repaidAmount, repaidShare) = _calculateDebtAmountAndShare(_state, _borrower, _amount);\n\n        if (repaidShare == 0) revert UnexpectedEmptyReturn();\n\n        emit Repay(_asset, _borrower, repaidAmount);\n\n        ERC20(_asset).safeTransferFrom(_repayer, address(this), repaidAmount);\n\n        // change debt state before, because share token state is changes the same way (notification is after burn)\n        _state.totalBorrowAmount -= repaidAmount;\n        _state.debtToken.burn(_borrower, repaidShare);\n    }\n\n    /// @param _assets all current assets, this is an optimization, so we don't have to read it from storage few times\n    /// @param _user user to liquidate\n    /// @param _flashReceiver address which will get all collaterals and will be notified once collaterals will be send\n    /// @param _flashReceiverData custom data to forward to receiver\n    /// @return receivedCollaterals amounts of collaterals transferred to `_flashReceiver`\n    /// @return shareAmountsToRepay expected amounts to repay\n    function _userLiquidation(\n        address[] memory _assets,\n        address _user,\n        IFlashLiquidationReceiver _flashReceiver,\n        bytes memory _flashReceiverData\n    )\n        internal\n        // we can not use `nonReentrant` because we are using it in `_repay`,\n        // and `_repay` needs to be reentered as part of a liquidation\n        liquidationNonReentrant\n        returns (uint256[] memory receivedCollaterals, uint256[] memory shareAmountsToRepay)\n    {\n        // gracefully fail if _user is solvent\n        if (isSolvent(_user)) {\n            uint256[] memory empty = new uint256[](_assets.length);\n            return (empty, empty);\n        }\n\n        (receivedCollaterals, shareAmountsToRepay) = _flashUserLiquidation(_assets, _user, address(_flashReceiver));\n\n        // _flashReceiver needs to repayFor user\n        _flashReceiver.siloLiquidationCallback(\n            _user,\n            _assets,\n            receivedCollaterals,\n            shareAmountsToRepay,\n            _flashReceiverData\n        );\n\n        for (uint256 i = 0; i < _assets.length; i++) {\n            if (receivedCollaterals[i] != 0 || shareAmountsToRepay[i] != 0) {\n                emit Liquidate(_assets[i], _user, shareAmountsToRepay[i], receivedCollaterals[i]);\n            }\n        }\n\n        if (!isSolvent(_user)) revert NotSolvent();\n    }\n\n    function _flashUserLiquidation(address[] memory _assets, address _borrower, address _liquidator)\n        internal\n        returns (uint256[] memory receivedCollaterals, uint256[] memory amountsToRepay)\n    {\n        uint256 assetsLength = _assets.length;\n        receivedCollaterals = new uint256[](assetsLength);\n        amountsToRepay = new uint256[](assetsLength);\n\n        uint256 protocolLiquidationFee = siloRepository.protocolLiquidationFee();\n\n        for (uint256 i = 0; i < assetsLength; i++) {\n            _accrueInterest(_assets[i]);\n\n            AssetStorage storage _state = _assetStorage[_assets[i]];\n\n            // we do not allow for partial repayment on liquidation, that's why max\n            (amountsToRepay[i],) = _calculateDebtAmountAndShare(_state, _borrower, type(uint256).max);\n\n            (uint256 withdrawnOnlyAmount,) = _withdrawAsset(\n                _assets[i],\n                type(uint256).max,\n                _borrower,\n                _liquidator,\n                true, // collateral only\n                protocolLiquidationFee\n            );\n\n            (uint256 withdrawnAmount,) = _withdrawAsset(\n                _assets[i],\n                type(uint256).max,\n                _borrower,\n                _liquidator,\n                false, // collateral only\n                protocolLiquidationFee\n            );\n\n            receivedCollaterals[i] = withdrawnOnlyAmount + withdrawnAmount;\n        }\n    }\n\n    /// @dev Utility function for withdrawing an asset\n    /// @param _asset asset to withdraw\n    /// @param _assetAmount amount of asset to withdraw\n    /// @param _depositor wallet address that is an owner of the deposit\n    /// @param _receiver wallet address that is receiving the token\n    /// @param _collateralOnly true if withdraw collateral only.\n    /// @param _protocolLiquidationFee if provided (!=0) liquidation fees will be applied and returned\n    /// `withdrawnAmount` will be decreased\n    /// @return withdrawnAmount amount of asset that has been sent to receiver\n    /// @return burnedShare burned share based on `withdrawnAmount`\n    function _withdrawAsset(\n        address _asset,\n        uint256 _assetAmount,\n        address _depositor,\n        address _receiver,\n        bool _collateralOnly,\n        uint256 _protocolLiquidationFee\n    )\n        internal\n        returns (uint256 withdrawnAmount, uint256 burnedShare)\n    {\n        (uint256 assetTotalDeposits, IShareToken shareToken, uint256 availableLiquidity) =\n            _getWithdrawAssetData(_asset, _collateralOnly);\n\n        if (_assetAmount == type(uint256).max) {\n            burnedShare = shareToken.balanceOf(_depositor);\n            withdrawnAmount = burnedShare.toAmount(assetTotalDeposits, shareToken.totalSupply());\n        } else {\n            burnedShare = _assetAmount.toShareRoundUp(assetTotalDeposits, shareToken.totalSupply());\n            withdrawnAmount = _assetAmount;\n        }\n\n        if (withdrawnAmount == 0) {\n            // we can not revert here, because liquidation will fail when one of collaterals will be empty\n            return (0, 0);\n        }\n\n        if (assetTotalDeposits < withdrawnAmount) revert NotEnoughDeposits();\n\n        unchecked {\n            // can be unchecked because of the `if` above\n            assetTotalDeposits -=  withdrawnAmount;\n        }\n\n        uint256 amountToTransfer = _applyLiquidationFee(_asset, withdrawnAmount, _protocolLiquidationFee);\n\n        if (availableLiquidity < amountToTransfer) revert NotEnoughLiquidity();\n\n        AssetStorage storage _state = _assetStorage[_asset];\n\n        if (_collateralOnly) {\n            _state.collateralOnlyDeposits = assetTotalDeposits;\n        } else {\n            _state.totalDeposits = assetTotalDeposits;\n        }\n\n        shareToken.burn(_depositor, burnedShare);\n        // in case token sent in fee-on-transfer type of token we do not care when withdrawing\n        ERC20(_asset).safeTransfer(_receiver, amountToTransfer);\n    }\n\n    /// @notice Calculates liquidations fee and returns amount of asset transferred to liquidator\n    /// @param _asset asset address\n    /// @param _amount amount on which we will apply fee\n    /// @param _protocolLiquidationFee liquidation fee in Solvency._PRECISION_DECIMALS\n    /// @return change amount left after subtracting liquidation fee\n    function _applyLiquidationFee(address _asset, uint256 _amount, uint256 _protocolLiquidationFee)\n        internal\n        returns (uint256 change)\n    {\n        if (_protocolLiquidationFee == 0) {\n            return _amount;\n        }\n\n        uint256 liquidationFeeAmount;\n\n        (\n            liquidationFeeAmount,\n            _interestData[_asset].protocolFees\n        ) = Solvency.calculateLiquidationFee(_interestData[_asset].protocolFees, _amount, _protocolLiquidationFee);\n\n        unchecked {\n            // if fees will not be higher than 100% this will not underflow, this is responsibility of siloRepository\n            // in case we do underflow, we can expect liquidator reject tx because of too little change\n            change = _amount - liquidationFeeAmount;\n        }\n    }\n\n    /// @dev harvest protocol fees from particular asset\n    /// @param _asset asset we want to harvest fees from\n    /// @param _receiver address of fees receiver\n    /// @return harvestedFees harvested fee\n    function _harvestProtocolFees(address _asset, address _receiver)\n        internal\n        nonReentrant\n        returns (uint256 harvestedFees)\n    {\n        AssetInterestData storage data = _interestData[_asset];\n\n        harvestedFees = data.protocolFees - data.harvestedProtocolFees;\n\n        uint256 currentLiquidity = liquidity(_asset);\n\n        if (harvestedFees > currentLiquidity) {\n            harvestedFees = currentLiquidity;\n        }\n\n        if (harvestedFees == 0) {\n            return 0;\n        }\n\n        unchecked {\n            // This can't overflow because this addition is less than or equal to data.protocolFees\n            data.harvestedProtocolFees += harvestedFees;\n        }\n\n        ERC20(_asset).safeTransfer(_receiver, harvestedFees);\n    }\n\n    /// @notice Accrue interest for asset\n    /// @dev Silo Interest Rate Model implements dynamic interest rate that changes every second. Returned\n    /// interest rate by the model is compounded rate so it can be used in math calculations as if it was\n    /// static. Rate is calculated for the time range between last update and current timestamp.\n    /// @param _asset address of the asset for which interest should be accrued\n    /// @return accruedInterest total accrued interest\n    function _accrueInterest(address _asset) internal returns (uint256 accruedInterest) {\n        /// @dev `_accrueInterest` is called on every user action, including liquidation. It's enough to check\n        /// if Silo is paused in this function.\n        if (IGuardedLaunch(address(siloRepository)).isSiloPaused(address(this), _asset)) {\n            revert Paused();\n        }\n\n        AssetStorage storage _state = _assetStorage[_asset];\n        AssetInterestData storage _assetInterestData = _interestData[_asset];\n        uint256 lastTimestamp = _assetInterestData.interestRateTimestamp;\n\n        // This is the first time, so we can return early and save some gas\n        if (lastTimestamp == 0) {\n            _assetInterestData.interestRateTimestamp = uint64(block.timestamp);\n            return 0;\n        }\n\n        // Interest has already been accrued this block\n        if (lastTimestamp == block.timestamp) {\n            return 0;\n        }\n\n        uint256 rcomp = _getModel(_asset).getCompoundInterestRateAndUpdate(_asset, block.timestamp);\n        uint256 protocolShareFee = siloRepository.protocolShareFee();\n\n        uint256 totalBorrowAmountCached = _state.totalBorrowAmount;\n        uint256 protocolFeesCached = _assetInterestData.protocolFees;\n        uint256 newProtocolFees;\n        uint256 protocolShare;\n        uint256 depositorsShare;\n\n        accruedInterest = totalBorrowAmountCached * rcomp / Solvency._PRECISION_DECIMALS;\n\n        unchecked {\n            // If we overflow on multiplication it should not revert tx, we will get lower fees\n            protocolShare = accruedInterest * protocolShareFee / Solvency._PRECISION_DECIMALS;\n            newProtocolFees = protocolFeesCached + protocolShare;\n\n            if (newProtocolFees < protocolFeesCached) {\n                protocolShare = type(uint256).max - protocolFeesCached;\n                newProtocolFees = type(uint256).max;\n            }\n    \n            depositorsShare = accruedInterest - protocolShare;\n        }\n\n        // update contract state\n        _state.totalBorrowAmount = totalBorrowAmountCached + accruedInterest;\n        _state.totalDeposits = _state.totalDeposits + depositorsShare;\n        _assetInterestData.protocolFees = newProtocolFees;\n        _assetInterestData.interestRateTimestamp = uint64(block.timestamp);\n    }\n\n    /// @dev gets interest rates model object\n    /// @param _asset asset for which to calculate interest rate\n    /// @return IInterestRateModel interest rates model object\n    function _getModel(address _asset) internal view returns (IInterestRateModel) {\n        return IInterestRateModel(siloRepository.getInterestRateModel(address(this), _asset));\n    }\n\n    /// @dev calculates amount to repay based on user shares, we do not apply virtual balances here,\n    /// if needed, they need to be apply beforehand\n    /// @param _state asset storage struct\n    /// @param _borrower borrower address\n    /// @param _amount proposed amount of asset to repay. Based on that,`repayShare` is calculated.\n    /// @return amount amount of asset to repay\n    /// @return repayShare amount of debt token representing debt ownership\n    function _calculateDebtAmountAndShare(AssetStorage storage _state, address _borrower, uint256 _amount)\n        internal\n        view\n        returns (uint256 amount, uint256 repayShare)\n    {\n        uint256 borrowerDebtShare = _state.debtToken.balanceOf(_borrower);\n        uint256 debtTokenTotalSupply = _state.debtToken.totalSupply();\n        uint256 totalBorrowed = _state.totalBorrowAmount;\n        uint256 maxAmount = borrowerDebtShare.toAmountRoundUp(totalBorrowed, debtTokenTotalSupply);\n\n        if (_amount >= maxAmount) {\n            amount = maxAmount;\n            repayShare = borrowerDebtShare;\n        } else {\n            amount = _amount;\n            repayShare = _amount.toShare(totalBorrowed, debtTokenTotalSupply);\n        }\n    }\n\n    /// @dev verifies if user did not borrow more than allowed maximum\n    function _validateBorrowAfter(address _user) private view {\n        (address[] memory assets, AssetStorage[] memory assetsStates) = getAssetsWithState();\n\n        (uint256 userLTV, uint256 maximumAllowedLTV) = Solvency.calculateLTVs(\n            Solvency.SolvencyParams(\n                siloRepository,\n                ISilo(address(this)),\n                assets,\n                assetsStates,\n                _user\n            ),\n            Solvency.TypeofLTV.MaximumLTV\n        );\n\n        if (userLTV > maximumAllowedLTV) revert MaximumLTVReached();\n    }\n\n    function _getWithdrawAssetData(address _asset, bool _collateralOnly)\n        private\n        view\n        returns(uint256 assetTotalDeposits, IShareToken shareToken, uint256 availableLiquidity)\n    {\n        AssetStorage storage _state = _assetStorage[_asset];\n\n        if (_collateralOnly) {\n            assetTotalDeposits = _state.collateralOnlyDeposits;\n            shareToken = _state.collateralOnlyToken;\n            availableLiquidity = assetTotalDeposits;\n        } else {\n            assetTotalDeposits = _state.totalDeposits;\n            shareToken = _state.collateralToken;\n            availableLiquidity = liquidity(_asset);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"./extensions/IERC20Metadata.sol\";\nimport \"../../utils/Context.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20, IERC20Metadata {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * The default value of {decimals} is 18. To select a different value for\n     * {decimals} you should overload it.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n     * overridden;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `recipient` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * Requirements:\n     *\n     * - `sender` and `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``sender``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        _transfer(sender, recipient, amount);\n\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\n        require(currentAllowance >= amount, \"ERC20: transfer amount exceeds allowance\");\n        unchecked {\n            _approve(sender, _msgSender(), currentAllowance - amount);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `sender` cannot be the zero address.\n     * - `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     */\n    function _transfer(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) internal virtual {\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(sender, recipient, amount);\n\n        uint256 senderBalance = _balances[sender];\n        require(senderBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[sender] = senderBalance - amount;\n        }\n        _balances[recipient] += amount;\n\n        emit Transfer(sender, recipient, amount);\n\n        _afterTokenTransfer(sender, recipient, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        _balances[account] += amount;\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n        }\n        _totalSupply -= amount;\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\nimport \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    function safeTransfer(\n        IERC20 token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20 token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) {\n            // Return data is optional\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/security/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n"
    },
    "contracts/utils/LiquidationReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity 0.8.13;\n\n/// @dev This is cloned solution of @openzeppelin/contracts/security/ReentrancyGuard.sol\nabstract contract LiquidationReentrancyGuard {\n    error LiquidationReentrancyCall();\n\n    uint256 private constant _LIQUIDATION_NOT_ENTERED = 1;\n    uint256 private constant _LIQUIDATION_ENTERED = 2;\n\n    uint256 private _liquidationStatus;\n\n    modifier liquidationNonReentrant() {\n        if (_liquidationStatus == _LIQUIDATION_ENTERED) {\n            revert LiquidationReentrancyCall();\n        }\n\n        _liquidationStatus = _LIQUIDATION_ENTERED;\n\n        _;\n\n        _liquidationStatus = _LIQUIDATION_NOT_ENTERED;\n    }\n\n    constructor() {\n        _liquidationStatus = _LIQUIDATION_NOT_ENTERED;\n    }\n}\n"
    },
    "contracts/interfaces/IBaseSilo.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity 0.8.13;\n\nimport \"./IShareToken.sol\";\nimport \"./IFlashLiquidationReceiver.sol\";\nimport \"./ISiloRepository.sol\";\n\ninterface IBaseSilo {\n    enum AssetStatus { Undefined, Active, Removed }\n\n    /// @dev Storage struct that holds all required data for a single token market\n    struct AssetStorage {\n        /// @dev Token that represents a share in totalDeposits of Silo\n        IShareToken collateralToken;\n        /// @dev Token that represents a share in collateralOnlyDeposits of Silo\n        IShareToken collateralOnlyToken;\n        /// @dev Token that represents a share in totalBorrowAmount of Silo\n        IShareToken debtToken;\n        /// @dev COLLATERAL: Amount of asset token that has been deposited to Silo with interest earned by depositors.\n        /// It also includes token amount that has been borrowed.\n        uint256 totalDeposits;\n        /// @dev COLLATERAL ONLY: Amount of asset token that has been deposited to Silo that can be ONLY used\n        /// as collateral. These deposits do NOT earn interest and CANNOT be borrowed.\n        uint256 collateralOnlyDeposits;\n        /// @dev DEBT: Amount of asset token that has been borrowed with accrued interest.\n        uint256 totalBorrowAmount;\n    }\n\n    /// @dev Storage struct that holds data related to fees and interest\n    struct AssetInterestData {\n        /// @dev Total amount of already harvested protocol fees\n        uint256 harvestedProtocolFees;\n        /// @dev Total amount (ever growing) of asset token that has been earned by the protocol from\n        /// generated interest.\n        uint256 protocolFees;\n        /// @dev Timestamp of the last time `interestRate` has been updated in storage.\n        uint64 interestRateTimestamp;\n        /// @dev True if asset was removed from the protocol. If so, deposit and borrow functions are disabled\n        /// for that asset\n        AssetStatus status;\n    }\n\n    /// @notice data that InterestModel needs for calculations\n    struct UtilizationData {\n        uint256 totalDeposits;\n        uint256 totalBorrowAmount;\n        /// @dev timestamp of last interest accrual\n        uint64 interestRateTimestamp;\n    }\n\n    /// @dev Shares names and symbols that are generated while asset initialization\n    struct AssetSharesMetadata {\n        /// @dev Name for the collateral shares token\n        string collateralName;\n        /// @dev Symbol for the collateral shares token\n        string collateralSymbol;\n        /// @dev Name for the collateral only (protected collateral) shares token\n        string protectedName;\n        /// @dev Symbol for the collateral only (protected collateral) shares token\n        string protectedSymbol;\n        /// @dev Name for the debt shares token\n        string debtName;\n        /// @dev Symbol for the debt shares token\n        string debtSymbol;\n    }\n\n    /// @notice Emitted when deposit is made\n    /// @param asset asset address that was deposited\n    /// @param depositor wallet address that deposited asset\n    /// @param amount amount of asset that was deposited\n    /// @param collateralOnly type of deposit, true if collateralOnly deposit was used\n    event Deposit(address indexed asset, address indexed depositor, uint256 amount, bool collateralOnly);\n\n    /// @notice Emitted when withdraw is made\n    /// @param asset asset address that was withdrawn\n    /// @param depositor wallet address that deposited asset\n    /// @param receiver wallet address that received asset\n    /// @param amount amount of asset that was withdrew\n    /// @param collateralOnly type of withdraw, true if collateralOnly deposit was used\n    event Withdraw(\n        address indexed asset,\n        address indexed depositor,\n        address indexed receiver,\n        uint256 amount,\n        bool collateralOnly\n    );\n\n    /// @notice Emitted on asset borrow\n    /// @param asset asset address that was borrowed\n    /// @param user wallet address that borrowed asset\n    /// @param amount amount of asset that was borrowed\n    event Borrow(address indexed asset, address indexed user, uint256 amount);\n\n    /// @notice Emitted on asset repay\n    /// @param asset asset address that was repaid\n    /// @param user wallet address that repaid asset\n    /// @param amount amount of asset that was repaid\n    event Repay(address indexed asset, address indexed user, uint256 amount);\n\n    /// @notice Emitted on user liquidation\n    /// @param asset asset address that was liquidated\n    /// @param user wallet address that was liquidated\n    /// @param shareAmountRepaid amount of collateral-share token that was repaid. This is collateral token representing\n    /// ownership of underlying deposit.\n    /// @param seizedCollateral amount of underlying token that was seized by liquidator\n    event Liquidate(address indexed asset, address indexed user, uint256 shareAmountRepaid, uint256 seizedCollateral);\n\n    /// @notice Emitted when the status for an asset is updated\n    /// @param asset asset address that was updated\n    /// @param status new asset status\n    event AssetStatusUpdate(address indexed asset, AssetStatus indexed status);\n\n    /// @return version of the silo contract\n    function VERSION() external returns (uint128); // solhint-disable-line func-name-mixedcase\n\n    /// @notice Synchronize current bridge assets with Silo\n    /// @dev This function needs to be called on Silo deployment to setup all assets for Silo. It needs to be\n    /// called every time a bridged asset is added or removed. When bridge asset is removed, depositing and borrowing\n    /// should be disabled during asset sync.\n    function syncBridgeAssets() external;\n\n    /// @notice Get Silo Repository contract address\n    /// @return Silo Repository contract address\n    function siloRepository() external view returns (ISiloRepository);\n\n    /// @notice Get asset storage data\n    /// @param _asset asset address\n    /// @return AssetStorage struct\n    function assetStorage(address _asset) external view returns (AssetStorage memory);\n\n    /// @notice Get asset interest data\n    /// @param _asset asset address\n    /// @return AssetInterestData struct\n    function interestData(address _asset) external view returns (AssetInterestData memory);\n\n    /// @dev helper method for InterestRateModel calculations\n    function utilizationData(address _asset) external view returns (UtilizationData memory data);\n\n    /// @notice Calculates solvency of an account\n    /// @param _user wallet address for which solvency is calculated\n    /// @return true if solvent, false otherwise\n    function isSolvent(address _user) external view returns (bool);\n\n    /// @notice Returns all initialized (synced) assets of Silo including current and removed bridge assets\n    /// @return assets array of initialized assets of Silo\n    function getAssets() external view returns (address[] memory assets);\n\n    /// @notice Returns all initialized (synced) assets of Silo including current and removed bridge assets\n    /// with corresponding state\n    /// @return assets array of initialized assets of Silo\n    /// @return assetsStorage array of assets state corresponding to `assets` array\n    function getAssetsWithState() external view returns (address[] memory assets, AssetStorage[] memory assetsStorage);\n\n    /// @notice Check if depositing an asset for given account is possible\n    /// @dev Depositing an asset that has been already borrowed (and vice versa) is disallowed\n    /// @param _asset asset we want to deposit\n    /// @param _depositor depositor address\n    /// @return true if asset can be deposited by depositor\n    function depositPossible(address _asset, address _depositor) external view returns (bool);\n\n    /// @notice Check if borrowing an asset for given account is possible\n    /// @dev Borrowing an asset that has been already deposited (and vice versa) is disallowed\n    /// @param _asset asset we want to deposit\n    /// @param _borrower borrower address\n    /// @return true if asset can be borrowed by borrower\n    function borrowPossible(address _asset, address _borrower) external view returns (bool);\n\n    /// @dev Amount of token that is available for borrowing\n    /// @param _asset asset to get liquidity for\n    /// @return Silo liquidity\n    function liquidity(address _asset) external view returns (uint256);\n}\n"
    },
    "contracts/interfaces/IGuardedLaunch.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity 0.8.13;\n\ninterface IGuardedLaunch {\n    /// @dev Stores info about maximum allowed liquidity in a Silo. This limit applies to deposit only.\n    struct MaxLiquidityLimit {\n        /// @dev flag to turn on/off all limits for all Silos\n        bool globalLimit;\n        /// @dev default value represents maximum allowed liquidity in Silo\n        uint256 defaultMaxLiquidity;\n        /// @notice siloMaxLiquidity maps silo => asset => maximum allowed deposit liquidity.\n        /// @dev Deposit liquidity limit is denominated in quote token. For example, if set to 1e18, it means that any\n        /// given Silo is allowed for deposits up to 1 quote token of value. Value is calculated using prices from the\n        /// Oracle.\n        mapping(address => mapping(address => uint256)) siloMaxLiquidity;\n    }\n\n    /// @dev Stores info about paused Silos\n    /// if `globalPause` == `true`, all Silo are paused\n    /// if `globalPause` == `false` and `siloPause[silo][0x0]` == `true`, all assets in a `silo` are paused\n    /// if `globalPause` == `false` and `siloPause[silo][asset]` == `true`, only `asset` in a `silo` is paused\n    struct Paused {\n        bool globalPause;\n        /// @dev maps silo address to asset address to bool\n        mapping(address => mapping(address => bool)) siloPause;\n    }\n\n    /// @notice Emitted when all Silos are paused or unpaused\n    /// @param globalPause current value of `globalPause`\n    event GlobalPause(bool globalPause);\n\n    /// @notice Emitted when a single Silo or single asset in a Silo is paused or unpaused\n    /// @param silo address of Silo which is paused\n    /// @param asset address of an asset which is paused\n    /// @param pauseValue true when paused, otherwise false\n    event SiloPause(address silo, address asset, bool pauseValue);\n\n    /// @notice Emitted when max liquidity toggle is switched\n    /// @param newLimitedMaxLiquidityState new value for max liquidity toggle\n    event LimitedMaxLiquidityToggled(bool newLimitedMaxLiquidityState);\n\n    /// @notice Emitted when deposit liquidity limit is changed for Silo and asset\n    /// @param silo Silo address for which to set limit\n    /// @param asset Silo asset for which to set limit\n    /// @param newMaxDeposits deposit limit amount in quote token\n    event SiloMaxDepositsLimitsUpdate(address indexed silo, address indexed asset, uint256 newMaxDeposits);\n\n    /// @notice Emitted when default max liquidity limit is changed\n    /// @param newMaxDeposits new deposit limit in quote token\n    event DefaultSiloMaxDepositsLimitUpdate(uint256 newMaxDeposits);\n\n    /// @notice Sets limited liquidity to provided value\n    function setLimitedMaxLiquidity(bool _globalLimit) external;\n\n    /// @notice Sets default deposit limit for all Silos\n    /// @param _maxDeposits deposit limit amount in quote token\n    function setDefaultSiloMaxDepositsLimit(uint256 _maxDeposits) external;\n\n    /// @notice Sets deposit limit for Silo\n    /// @param _silo Silo address for which to set limit\n    /// @param _asset Silo asset for which to set limit\n    /// @param _maxDeposits deposit limit amount in quote token\n    function setSiloMaxDepositsLimit(\n        address _silo,\n        address _asset,\n        uint256 _maxDeposits\n    ) external;\n\n    /// @notice Pause all Silos\n    /// @dev Callable only by owner.\n    /// @param _globalPause true to pause all Silos, otherwise false\n    function setGlobalPause(bool _globalPause) external;\n\n    /// @notice Pause single asset in a single Silo\n    /// @dev Callable only by owner.\n    /// @param _silo address of Silo in which `_asset` is being paused\n    /// @param _asset address of an asset that is being paused\n    /// @param _pauseValue true to pause, false to unpause\n    function setSiloPause(address _silo, address _asset, bool _pauseValue) external;\n\n    /// @notice Check given asset in a Silo is paused\n    /// @param _silo address of Silo\n    /// @param _asset address of an asset\n    /// @return true if given asset in a Silo is paused, otherwise false\n    function isSiloPaused(address _silo, address _asset) external view returns (bool);\n\n    /// @notice Gets deposit limit for Silo\n    /// @param _silo Silo address for which to set limit\n    /// @param _asset Silo asset for which to set limit\n    /// @return deposit limit for Silo\n    function getMaxSiloDepositsValue(address _silo, address _asset) external view returns (uint256);\n}\n"
    },
    "contracts/interfaces/ISiloRepository.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity 0.8.13;\n\nimport \"./ISiloFactory.sol\";\nimport \"./ITokensFactory.sol\";\nimport \"./IPriceProvidersRepository.sol\";\nimport \"./INotificationReceiver.sol\";\nimport \"./IInterestRateModel.sol\";\n\ninterface ISiloRepository {\n    /// @dev protocol fees in precision points (Solvency._PRECISION_DECIMALS), we do allow for fee == 0\n    struct Fees {\n        /// @dev One time protocol fee for opening a borrow position in precision points (Solvency._PRECISION_DECIMALS)\n        uint64 entryFee;\n        /// @dev Protocol revenue share in interest paid in precision points (Solvency._PRECISION_DECIMALS)\n        uint64 protocolShareFee;\n        /// @dev Protocol share in liquidation profit in precision points (Solvency._PRECISION_DECIMALS).\n        /// It's calculated from total collateral amount to be transferred to liquidator.\n        uint64 protocolLiquidationFee;\n    }\n\n    struct SiloVersion {\n        /// @dev Default version of Silo. If set to 0, it means it is not set. By default it is set to 1\n        uint128 byDefault;\n\n        /// @dev Latest added version of Silo. If set to 0, it means it is not set. By default it is set to 1\n        uint128 latest;\n    }\n\n    /// @dev AssetConfig struct represents configurable parameters for each Silo\n    struct AssetConfig {\n        /// @dev Loan-to-Value ratio represents the maximum borrowing power of a specific collateral.\n        ///      For example, if the collateral asset has an LTV of 75%, the user can borrow up to 0.75 worth\n        ///      of quote token in the principal currency for every quote token worth of collateral.\n        ///      value uses 18 decimals eg. 100% == 1e18\n        ///      max valid value is 1e18 so it needs storage of 60 bits\n        uint64 maxLoanToValue;\n\n        /// @dev Liquidation Threshold represents the threshold at which a borrow position will be considered\n        ///      undercollateralized and subject to liquidation for each collateral. For example,\n        ///      if a collateral has a liquidation threshold of 80%, it means that the loan will be\n        ///      liquidated when the borrowAmount value is worth 80% of the collateral value.\n        ///      value uses 18 decimals eg. 100% == 1e18\n        uint64 liquidationThreshold;\n\n        /// @dev interest rate model address\n        IInterestRateModel interestRateModel;\n    }\n\n    event NewDefaultMaximumLTV(uint64 defaultMaximumLTV);\n\n    event NewDefaultLiquidationThreshold(uint64 defaultLiquidationThreshold);\n\n    /// @notice Emitted on new Silo creation\n    /// @param silo deployed Silo address\n    /// @param asset unique asset for deployed Silo\n    /// @param siloVersion version of deployed Silo\n    event NewSilo(address indexed silo, address indexed asset, uint128 siloVersion);\n\n    /// @notice Emitted when new Silo (or existing one) becomes a bridge pool (pool with only bridge tokens).\n    /// @param pool address of the bridge pool, It can be zero address when bridge asset is removed and pool no longer\n    /// is treated as bridge pool\n    event BridgePool(address indexed pool);\n\n    /// @notice Emitted on new bridge asset\n    /// @param newBridgeAsset address of added bridge asset\n    event BridgeAssetAdded(address indexed newBridgeAsset);\n\n    /// @notice Emitted on removed bridge asset\n    /// @param bridgeAssetRemoved address of removed bridge asset\n    event BridgeAssetRemoved(address indexed bridgeAssetRemoved);\n\n    /// @notice Emitted when default interest rate model is changed\n    /// @param newModel address of new interest rate model\n    event InterestRateModel(IInterestRateModel indexed newModel);\n\n    /// @notice Emitted on price provider repository address update\n    /// @param newProvider address of new oracle repository\n    event PriceProvidersRepositoryUpdate(\n        IPriceProvidersRepository indexed newProvider\n    );\n\n    /// @notice Emitted on token factory address update\n    /// @param newTokensFactory address of new token factory\n    event TokensFactoryUpdate(address indexed newTokensFactory);\n\n    /// @notice Emitted on router address update\n    /// @param newRouter address of new router\n    event RouterUpdate(address indexed newRouter);\n\n    /// @notice Emitted on INotificationReceiver address update\n    /// @param newIncentiveContract address of new INotificationReceiver\n    event NotificationReceiverUpdate(INotificationReceiver indexed newIncentiveContract);\n\n    /// @notice Emitted when new Silo version is registered\n    /// @param factory factory address that deploys registered Silo version\n    /// @param siloLatestVersion Silo version of registered Silo\n    /// @param siloDefaultVersion current default Silo version\n    event RegisterSiloVersion(address indexed factory, uint128 siloLatestVersion, uint128 siloDefaultVersion);\n\n    /// @notice Emitted when Silo version is unregistered\n    /// @param factory factory address that deploys unregistered Silo version\n    /// @param siloVersion version that was unregistered\n    event UnregisterSiloVersion(address indexed factory, uint128 siloVersion);\n\n    /// @notice Emitted when default Silo version is updated\n    /// @param newDefaultVersion new default version\n    event SiloDefaultVersion(uint128 newDefaultVersion);\n\n    /// @notice Emitted when default fee is updated\n    /// @param newEntryFee new entry fee\n    /// @param newProtocolShareFee new protocol share fee\n    /// @param newProtocolLiquidationFee new protocol liquidation fee\n    event FeeUpdate(\n        uint64 newEntryFee,\n        uint64 newProtocolShareFee,\n        uint64 newProtocolLiquidationFee\n    );\n\n    /// @notice Emitted when asset config is updated for a silo\n    /// @param silo silo for which asset config is being set\n    /// @param asset asset for which asset config is being set\n    /// @param assetConfig new asset config\n    event AssetConfigUpdate(address indexed silo, address indexed asset, AssetConfig assetConfig);\n\n    /// @notice Emitted when silo (silo factory) version is set for asset\n    /// @param asset asset for which asset config is being set\n    /// @param version Silo version\n    event VersionForAsset(address indexed asset, uint128 version);\n\n    /// @param _siloAsset silo asset\n    /// @return version of Silo that is assigned for provided asset, if not assigned it returns zero (default)\n    function getVersionForAsset(address _siloAsset) external returns (uint128);\n\n    /// @notice setter for `getVersionForAsset` mapping\n    /// @param _siloAsset silo asset\n    /// @param _version version of Silo that will be assigned for `_siloAsset`, zero (default) is acceptable\n    function setVersionForAsset(address _siloAsset, uint128 _version) external;\n\n    /// @notice use this method only when off-chain verification is OFF\n    /// @dev Silo does NOT support rebase and deflationary tokens\n    /// @param _siloAsset silo asset\n    /// @param _siloData (optional) data that may be needed during silo creation\n    /// @return createdSilo address of created silo\n    function newSilo(address _siloAsset, bytes memory _siloData) external returns (address createdSilo);\n\n    /// @notice use this method to deploy new version of Silo for an asset that already has Silo deployed.\n    /// Only owner (DAO) can replace.\n    /// @dev Silo does NOT support rebase and deflationary tokens\n    /// @param _siloAsset silo asset\n    /// @param _siloVersion version of silo implementation. Use 0 for default version which is fine\n    /// for 99% of cases.\n    /// @param _siloData (optional) data that may be needed during silo creation\n    /// @return createdSilo address of created silo\n    function replaceSilo(\n        address _siloAsset,\n        uint128 _siloVersion,\n        bytes memory _siloData\n    ) external returns (address createdSilo);\n\n    /// @notice Set factory contract for debt and collateral tokens for each Silo asset\n    /// @dev Callable only by owner\n    /// @param _tokensFactory address of TokensFactory contract that deploys debt and collateral tokens\n    function setTokensFactory(address _tokensFactory) external;\n\n    /// @notice Set default fees\n    /// @dev Callable only by owner\n    /// @param _fees:\n    /// - _entryFee one time protocol fee for opening a borrow position in precision points\n    /// (Solvency._PRECISION_DECIMALS)\n    /// - _protocolShareFee protocol revenue share in interest paid in precision points\n    /// (Solvency._PRECISION_DECIMALS)\n    /// - _protocolLiquidationFee protocol share in liquidation profit in precision points\n    /// (Solvency._PRECISION_DECIMALS). It's calculated from total collateral amount to be transferred\n    /// to liquidator.\n    function setFees(Fees calldata _fees) external;\n\n    /// @notice Set configuration for given asset in given Silo\n    /// @dev Callable only by owner\n    /// @param _silo Silo address for which config applies\n    /// @param _asset asset address for which config applies\n    /// @param _assetConfig:\n    ///    - _maxLoanToValue maximum Loan-to-Value, for details see `Repository.AssetConfig.maxLoanToValue`\n    ///    - _liquidationThreshold liquidation threshold, for details see `Repository.AssetConfig.maxLoanToValue`\n    ///    - _interestRateModel interest rate model address, for details see `Repository.AssetConfig.interestRateModel`\n    function setAssetConfig(\n        address _silo,\n        address _asset,\n        AssetConfig calldata _assetConfig\n    ) external;\n\n    /// @notice Set default interest rate model\n    /// @dev Callable only by owner\n    /// @param _defaultInterestRateModel default interest rate model\n    function setDefaultInterestRateModel(IInterestRateModel _defaultInterestRateModel) external;\n\n    /// @notice Set default maximum LTV\n    /// @dev Callable only by owner\n    /// @param _defaultMaxLTV default maximum LTV in precision points (Solvency._PRECISION_DECIMALS)\n    function setDefaultMaximumLTV(uint64 _defaultMaxLTV) external;\n\n    /// @notice Set default liquidation threshold\n    /// @dev Callable only by owner\n    /// @param _defaultLiquidationThreshold default liquidation threshold in precision points\n    /// (Solvency._PRECISION_DECIMALS)\n    function setDefaultLiquidationThreshold(uint64 _defaultLiquidationThreshold) external;\n\n    /// @notice Set price provider repository\n    /// @dev Callable only by owner\n    /// @param _repository price provider repository address\n    function setPriceProvidersRepository(IPriceProvidersRepository _repository) external;\n\n    /// @notice Set router contract\n    /// @dev Callable only by owner\n    /// @param _router router address\n    function setRouter(address _router) external;\n\n    /// @notice Set NotificationReceiver contract\n    /// @dev Callable only by owner\n    /// @param _silo silo address for which to set `_notificationReceiver`\n    /// @param _notificationReceiver NotificationReceiver address\n    function setNotificationReceiver(address _silo, INotificationReceiver _notificationReceiver) external;\n\n    /// @notice Adds new bridge asset\n    /// @dev New bridge asset must be unique. Duplicates in bridge assets are not allowed. It's possible to add\n    /// bridge asset that has been removed in the past. Note that all Silos must be synced manually. Callable\n    /// only by owner.\n    /// @param _newBridgeAsset bridge asset address\n    function addBridgeAsset(address _newBridgeAsset) external;\n\n    /// @notice Removes bridge asset\n    /// @dev Note that all Silos must be synced manually. Callable only by owner.\n    /// @param _bridgeAssetToRemove bridge asset address to be removed\n    function removeBridgeAsset(address _bridgeAssetToRemove) external;\n\n    /// @notice Registers new Silo version\n    /// @dev User can choose which Silo version he wants to deploy. It's possible to have multiple versions of Silo.\n    /// Callable only by owner.\n    /// @param _factory factory contract that deploys new version of Silo\n    /// @param _isDefault true if this version should be used as default\n    function registerSiloVersion(ISiloFactory _factory, bool _isDefault) external;\n\n    /// @notice Unregisters Silo version\n    /// @dev Callable only by owner.\n    /// @param _siloVersion Silo version to be unregistered\n    function unregisterSiloVersion(uint128 _siloVersion) external;\n\n    /// @notice Sets default Silo version\n    /// @dev Callable only by owner.\n    /// @param _defaultVersion Silo version to be set as default\n    function setDefaultSiloVersion(uint128 _defaultVersion) external;\n\n    /// @notice Check if contract address is a Silo deployment\n    /// @param _silo address of expected Silo\n    /// @return true if address is Silo deployment, otherwise false\n    function isSilo(address _silo) external view returns (bool);\n\n    /// @notice Get Silo address of asset\n    /// @param _asset address of asset\n    /// @return address of corresponding Silo deployment\n    function getSilo(address _asset) external view returns (address);\n\n    /// @notice Get Silo Factory for given version\n    /// @param _siloVersion version of Silo implementation\n    /// @return ISiloFactory contract that deploys Silos of given version\n    function siloFactory(uint256 _siloVersion) external view returns (ISiloFactory);\n\n    /// @notice Get debt and collateral Token Factory\n    /// @return ITokensFactory contract that deploys debt and collateral tokens\n    function tokensFactory() external view returns (ITokensFactory);\n\n    /// @notice Get Router contract\n    /// @return address of router contract\n    function router() external view returns (address);\n\n    /// @notice Get current bridge assets\n    /// @dev Keep in mind that not all Silos may be synced with current bridge assets so it's possible that some\n    /// assets in that list are not part of given Silo.\n    /// @return address array of bridge assets\n    function getBridgeAssets() external view returns (address[] memory);\n\n    /// @notice Get removed bridge assets\n    /// @dev Keep in mind that not all Silos may be synced with bridge assets so it's possible that some\n    /// assets in that list are still part of given Silo.\n    /// @return address array of bridge assets\n    function getRemovedBridgeAssets() external view returns (address[] memory);\n\n    /// @notice Get maximum LTV for asset in given Silo\n    /// @dev If dedicated config is not set, method returns default config\n    /// @param _silo address of Silo\n    /// @param _asset address of an asset\n    /// @return maximum LTV in precision points (Solvency._PRECISION_DECIMALS)\n    function getMaximumLTV(address _silo, address _asset) external view returns (uint256);\n\n    /// @notice Get Interest Rate Model address for asset in given Silo\n    /// @dev If dedicated config is not set, method returns default config\n    /// @param _silo address of Silo\n    /// @param _asset address of an asset\n    /// @return address of interest rate model\n    function getInterestRateModel(address _silo, address _asset) external view returns (IInterestRateModel);\n\n    /// @notice Get liquidation threshold for asset in given Silo\n    /// @dev If dedicated config is not set, method returns default config\n    /// @param _silo address of Silo\n    /// @param _asset address of an asset\n    /// @return liquidation threshold in precision points (Solvency._PRECISION_DECIMALS)\n    function getLiquidationThreshold(address _silo, address _asset) external view returns (uint256);\n\n    /// @notice Get incentive contract address. Incentive contracts are responsible for distributing rewards\n    /// to debt and/or collateral token holders of given Silo\n    /// @param _silo address of Silo\n    /// @return incentive contract address\n    function getNotificationReceiver(address _silo) external view returns (INotificationReceiver);\n\n    /// @notice Get owner role address of Repository\n    /// @return owner role address\n    function owner() external view returns (address);\n\n    /// @notice get PriceProvidersRepository contract that manages price providers implementations\n    /// @return IPriceProvidersRepository address\n    function priceProvidersRepository() external view returns (IPriceProvidersRepository);\n\n    /// @dev Get protocol fee for opening a borrow position\n    /// @return fee in precision points (Solvency._PRECISION_DECIMALS == 100%)\n    function entryFee() external view returns (uint256);\n\n    /// @dev Get protocol share fee\n    /// @return protocol share fee in precision points (Solvency._PRECISION_DECIMALS == 100%)\n    function protocolShareFee() external view returns (uint256);\n\n    /// @dev Get protocol liquidation fee\n    /// @return protocol liquidation fee in precision points (Solvency._PRECISION_DECIMALS == 100%)\n    function protocolLiquidationFee() external view returns (uint256);\n\n    /// @dev Checks all conditions for new silo creation and throws when not possible to create\n    /// @param _asset address of asset for which you want to create silo\n    /// @param _assetIsABridge bool TRUE when `_asset` is bridge asset, FALSE when it is not\n    function ensureCanCreateSiloFor(address _asset, bool _assetIsABridge) external view;\n\n    function siloRepositoryPing() external pure returns (bytes4);\n}\n"
    },
    "contracts/interfaces/IPriceProvidersRepository.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity >=0.7.6 <0.9.0;\n\nimport \"./IPriceProvider.sol\";\n\ninterface IPriceProvidersRepository {\n    /// @notice Emitted when price provider is added\n    /// @param newPriceProvider new price provider address\n    event NewPriceProvider(IPriceProvider indexed newPriceProvider);\n\n    /// @notice Emitted when price provider is removed\n    /// @param priceProvider removed price provider address\n    event PriceProviderRemoved(IPriceProvider indexed priceProvider);\n\n    /// @notice Emitted when asset is assigned to price provider\n    /// @param asset assigned asset   address\n    /// @param priceProvider price provider address\n    event PriceProviderForAsset(address indexed asset, IPriceProvider indexed priceProvider);\n\n    /// @notice Register new price provider\n    /// @param _priceProvider address of price provider\n    function addPriceProvider(IPriceProvider _priceProvider) external;\n\n    /// @notice Unregister price provider\n    /// @param _priceProvider address of price provider to be removed\n    function removePriceProvider(IPriceProvider _priceProvider) external;\n\n    /// @notice Sets price provider for asset\n    /// @dev Request for asset price is forwarded to the price provider assigned to that asset\n    /// @param _asset address of an asset for which price provider will be used\n    /// @param _priceProvider address of price provider\n    function setPriceProviderForAsset(address _asset, IPriceProvider _priceProvider) external;\n\n    /// @notice Returns \"Time-Weighted Average Price\" for an asset\n    /// @param _asset address of an asset for which to read price\n    /// @return price TWAP price of a token with 18 decimals\n    function getPrice(address _asset) external view returns (uint256 price);\n\n    /// @notice Gets price provider assigned to an asset\n    /// @param _asset address of an asset for which to get price provider\n    /// @return priceProvider address of price provider\n    function priceProviders(address _asset) external view returns (IPriceProvider priceProvider);\n\n    /// @notice Gets token address in which prices are quoted\n    /// @return quoteToken address\n    function quoteToken() external view returns (address);\n\n    /// @notice Gets manager role address\n    /// @return manager role address\n    function manager() external view returns (address);\n\n    /// @notice Checks if providers are available for an asset\n    /// @param _asset asset address to check\n    /// @return returns TRUE if price feed is ready, otherwise false\n    function providersReadyForAsset(address _asset) external view returns (bool);\n\n    /// @notice Returns true if address is a registered price provider\n    /// @param _provider address of price provider to be removed\n    /// @return true if address is a registered price provider, otherwise false\n    function isPriceProvider(IPriceProvider _provider) external view returns (bool);\n\n    /// @notice Gets number of price providers registered\n    /// @return number of price providers registered\n    function providersCount() external view returns (uint256);\n\n    /// @notice Gets an array of price providers\n    /// @return array of price providers\n    function providerList() external view returns (address[] memory);\n\n    /// @notice Sanity check function\n    /// @return returns always TRUE\n    function priceProvidersRepositoryPing() external pure returns (bytes4);\n}\n"
    },
    "contracts/interfaces/IInterestRateModel.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity 0.8.13;\n\ninterface IInterestRateModel {\n    /* solhint-disable */\n    struct Config {\n        // uopt ∈ (0, 1) – optimal utilization;\n        int256 uopt;\n        // ucrit ∈ (uopt, 1) – threshold of large utilization;\n        int256 ucrit;\n        // ulow ∈ (0, uopt) – threshold of low utilization\n        int256 ulow;\n        // ki > 0 – integrator gain\n        int256 ki;\n        // kcrit > 0 – proportional gain for large utilization\n        int256 kcrit;\n        // klow ≥ 0 – proportional gain for low utilization\n        int256 klow;\n        // klin ≥ 0 – coefficient of the lower linear bound\n        int256 klin;\n        // beta ≥ 0 - a scaling factor\n        int256 beta;\n        // ri ≥ 0 – initial value of the integrator\n        int256 ri;\n        // Tcrit ≥ 0 - the time during which the utilization exceeds the critical value\n        int256 Tcrit;\n    }\n    /* solhint-enable */\n\n    /// @dev Set dedicated config for given asset in a Silo. Config is per asset per Silo so different assets\n    /// in different Silo can have different configs.\n    /// It will try to call `_silo.accrueInterest(_asset)` before updating config, but it is not guaranteed,\n    /// that this call will be successful, if it fail config will be set anyway.\n    /// @param _silo Silo address for which config should be set\n    /// @param _asset asset address for which config should be set\n    function setConfig(address _silo, address _asset, Config calldata _config) external;\n\n    /// @dev get compound interest rate and update model storage\n    /// @param _asset address of an asset in Silo for which interest rate should be calculated\n    /// @param _blockTimestamp current block timestamp\n    /// @return rcomp compounded interest rate from last update until now (1e18 == 100%)\n    function getCompoundInterestRateAndUpdate(\n        address _asset,\n        uint256 _blockTimestamp\n    ) external returns (uint256 rcomp);\n\n    /// @dev Get config for given asset in a Silo. If dedicated config is not set, default one will be returned.\n    /// @param _silo Silo address for which config should be set\n    /// @param _asset asset address for which config should be set\n    /// @return Config struct for asset in Silo\n    function getConfig(address _silo, address _asset) external view returns (Config memory);\n\n    /// @dev get compound interest rate\n    /// @param _silo address of Silo\n    /// @param _asset address of an asset in Silo for which interest rate should be calculated\n    /// @param _blockTimestamp current block timestamp\n    /// @return rcomp compounded interest rate from last update until now (1e18 == 100%)\n    function getCompoundInterestRate(\n        address _silo,\n        address _asset,\n        uint256 _blockTimestamp\n    ) external view returns (uint256 rcomp);\n\n    /// @dev get current annual interest rate\n    /// @param _silo address of Silo\n    /// @param _asset address of an asset in Silo for which interest rate should be calculated\n    /// @param _blockTimestamp current block timestamp\n    /// @return rcur current annual interest rate (1e18 == 100%)\n    function getCurrentInterestRate(\n        address _silo,\n        address _asset,\n        uint256 _blockTimestamp\n    ) external view returns (uint256 rcur);\n\n    /// @notice get the flag to detect rcomp restriction (zero current interest) due to overflow\n    /// overflow boolean flag to detect rcomp restriction\n    function overflowDetected(\n        address _silo,\n        address _asset,\n        uint256 _blockTimestamp\n    ) external view returns (bool overflow);\n\n    /// @dev pure function that calculates current annual interest rate\n    /// @param _c configuration object, InterestRateModel.Config\n    /// @param _totalBorrowAmount current total borrows for asset\n    /// @param _totalDeposits current total deposits for asset\n    /// @param _interestRateTimestamp timestamp of last interest rate update\n    /// @param _blockTimestamp current block timestamp\n    /// @return rcur current annual interest rate (1e18 == 100%)\n    function calculateCurrentInterestRate(\n        Config memory _c,\n        uint256 _totalDeposits,\n        uint256 _totalBorrowAmount,\n        uint256 _interestRateTimestamp,\n        uint256 _blockTimestamp\n    ) external pure returns (uint256 rcur);\n\n    /// @dev pure function that calculates interest rate based on raw input data\n    /// @param _c configuration object, InterestRateModel.Config\n    /// @param _totalBorrowAmount current total borrows for asset\n    /// @param _totalDeposits current total deposits for asset\n    /// @param _interestRateTimestamp timestamp of last interest rate update\n    /// @param _blockTimestamp current block timestamp\n    /// @return rcomp compounded interest rate from last update until now (1e18 == 100%)\n    /// @return ri current integral part of the rate\n    /// @return Tcrit time during which the utilization exceeds the critical value\n    /// @return overflow boolean flag to detect rcomp restriction\n    function calculateCompoundInterestRateWithOverflowDetection(\n        Config memory _c,\n        uint256 _totalDeposits,\n        uint256 _totalBorrowAmount,\n        uint256 _interestRateTimestamp,\n        uint256 _blockTimestamp\n    ) external pure returns (\n        uint256 rcomp,\n        int256 ri,\n        int256 Tcrit, // solhint-disable-line var-name-mixedcase\n        bool overflow\n    );\n\n    /// @dev pure function that calculates interest rate based on raw input data\n    /// @param _c configuration object, InterestRateModel.Config\n    /// @param _totalBorrowAmount current total borrows for asset\n    /// @param _totalDeposits current total deposits for asset\n    /// @param _interestRateTimestamp timestamp of last interest rate update\n    /// @param _blockTimestamp current block timestamp\n    /// @return rcomp compounded interest rate from last update until now (1e18 == 100%)\n    /// @return ri current integral part of the rate\n    /// @return Tcrit time during which the utilization exceeds the critical value\n    function calculateCompoundInterestRate(\n        Config memory _c,\n        uint256 _totalDeposits,\n        uint256 _totalBorrowAmount,\n        uint256 _interestRateTimestamp,\n        uint256 _blockTimestamp\n    ) external pure returns (\n        uint256 rcomp,\n        int256 ri,\n        int256 Tcrit // solhint-disable-line var-name-mixedcase\n    );\n\n    /// @dev returns decimal points used by model\n    function DP() external pure returns (uint256); // solhint-disable-line func-name-mixedcase\n\n    /// @dev just a helper method to see if address is a InterestRateModel\n    /// @return always true\n    function interestRateModelPing() external pure returns (bytes4);\n}\n"
    },
    "contracts/interfaces/IShareToken.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity 0.8.13;\n\nimport \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\";\n\nimport \"./INotificationReceiver.sol\";\n\ninterface IShareToken is IERC20Metadata {\n    /// @notice Emitted every time receiver is notified about token transfer\n    /// @param notificationReceiver receiver address\n    /// @param success false if TX reverted on `notificationReceiver` side, otherwise true\n    event NotificationSent(\n        INotificationReceiver indexed notificationReceiver,\n        bool success\n    );\n\n    /// @notice Mint method for Silo to create debt position\n    /// @param _account wallet for which to mint token\n    /// @param _amount amount of token to be minted\n    function mint(address _account, uint256 _amount) external;\n\n    /// @notice Burn method for Silo to close debt position\n    /// @param _account wallet for which to burn token\n    /// @param _amount amount of token to be burned\n    function burn(address _account, uint256 _amount) external;\n}\n"
    },
    "contracts/lib/Ping.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity >=0.7.6 <0.9.0;\n\n\nlibrary Ping {\n    function pong(function() external pure returns(bytes4) pingFunction) internal pure returns (bool) {\n        return pingFunction.address != address(0) && pingFunction.selector == pingFunction();\n    }\n}\n"
    },
    "contracts/lib/EasyMath.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity 0.8.13;\n\nlibrary EasyMath {\n    error ZeroAssets();\n    error ZeroShares();\n\n    function toShare(uint256 amount, uint256 totalAmount, uint256 totalShares) internal pure returns (uint256) {\n        if (totalShares == 0 || totalAmount == 0) {\n            return amount;\n        }\n\n        uint256 result = amount * totalShares / totalAmount;\n\n        // Prevent rounding error\n        if (result == 0 && amount != 0) {\n            revert ZeroShares();\n        }\n\n        return result;\n    }\n\n    function toShareRoundUp(uint256 amount, uint256 totalAmount, uint256 totalShares) internal pure returns (uint256) {\n        if (totalShares == 0 || totalAmount == 0) {\n            return amount;\n        }\n\n        uint256 numerator = amount * totalShares;\n        uint256 result = numerator / totalAmount;\n        \n        // Round up\n        if (numerator % totalAmount != 0) {\n            result += 1;\n        }\n\n        return result;\n    }\n\n    function toAmount(uint256 share, uint256 totalAmount, uint256 totalShares) internal pure returns (uint256) {\n        if (totalShares == 0 || totalAmount == 0) {\n            return 0;\n        }\n\n        uint256 result = share * totalAmount / totalShares;\n\n        // Prevent rounding error\n        if (result == 0 && share != 0) {\n            revert ZeroAssets();\n        }\n\n        return result;\n    }\n\n    function toAmountRoundUp(uint256 share, uint256 totalAmount, uint256 totalShares) internal pure returns (uint256) {\n        if (totalShares == 0 || totalAmount == 0) {\n            return 0;\n        }\n\n        uint256 numerator = share * totalAmount;\n        uint256 result = numerator / totalShares;\n        \n        // Round up\n        if (numerator % totalShares != 0) {\n            result += 1;\n        }\n\n        return result;\n    }\n\n    function toValue(uint256 _assetAmount, uint256 _assetPrice, uint256 _assetDecimals)\n        internal\n        pure\n        returns (uint256)\n    {\n        return _assetAmount * _assetPrice / 10 ** _assetDecimals;\n    }\n\n    function sum(uint256[] memory _numbers) internal pure returns (uint256 s) {\n        for(uint256 i; i < _numbers.length; i++) {\n            s += _numbers[i];\n        }\n    }\n\n    /// @notice Calculates fraction between borrowed and deposited amount of tokens denominated in percentage\n    /// @dev It assumes `_dp` = 100%.\n    /// @param _dp decimal points used by model\n    /// @param _totalDeposits current total deposits for assets\n    /// @param _totalBorrowAmount current total borrows for assets\n    /// @return utilization value\n    function calculateUtilization(uint256 _dp, uint256 _totalDeposits, uint256 _totalBorrowAmount)\n        internal\n        pure\n        returns (uint256)\n    {\n        if (_totalDeposits == 0 || _totalBorrowAmount == 0) return 0;\n\n        return _totalBorrowAmount * _dp / _totalDeposits;\n    }\n}\n"
    },
    "contracts/lib/TokenHelper.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity 0.8.13;\n\nimport \"@openzeppelin/contracts/utils/Address.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\";\n\n\nlibrary TokenHelper {\n    uint256 private constant _BYTES32_SIZE = 32;\n\n    error TokenIsNotAContract();\n\n    function assertAndGetDecimals(address _token) internal view returns (uint256) {\n        (bool hasMetadata, bytes memory data) = _tokenMetadataCall(_token, abi.encodeCall(IERC20Metadata.decimals,()));\n\n        // decimals() is optional in the ERC20 standard, so if metadata is not accessible\n        // we assume there are no decimals and use 0.\n        if (!hasMetadata) {\n            return 0;\n        }\n\n        return abi.decode(data, (uint8));\n    }\n\n    /// @dev Returns the symbol for the provided ERC20 token.\n    /// An empty string is returned if the call to the token didn't succeed.\n    /// @param _token address of the token to get the symbol for\n    /// @return assetSymbol the token symbol\n    function symbol(address _token) internal view returns (string memory assetSymbol) {\n        (bool hasMetadata, bytes memory data) = _tokenMetadataCall(_token, abi.encodeCall(IERC20Metadata.symbol,()));\n\n        if (!hasMetadata || data.length == 0) {\n            return \"?\";\n        } else if (data.length == _BYTES32_SIZE) {\n            return string(removeZeros(data));\n        } else {\n            return abi.decode(data, (string));\n        }\n    }\n\n    /// @dev Removes bytes with value equal to 0 from the provided byte array.\n    /// @param _data byte array from which to remove zeroes\n    /// @return result byte array with zeroes removed \n    function removeZeros(bytes memory _data) internal pure returns (bytes memory result) {\n        uint256 n = _data.length;\n\n        unchecked {\n            for (uint256 i; i < n; i++) {\n                if (_data[i] == 0) continue;\n\n                result = abi.encodePacked(result, _data[i]);\n            }\n        }\n    }\n\n    /// @dev Performs a staticcall to the token to get its metadata (symbol, decimals, name)\n    function _tokenMetadataCall(address _token, bytes memory _data) private view returns(bool, bytes memory) {\n        // We need to do this before the call, otherwise the call will succeed even for EOAs\n        if (!Address.isContract(_token)) revert TokenIsNotAContract();\n\n        (bool success, bytes memory result) = _token.staticcall(_data);\n\n        // If the call reverted we assume the token doesn't follow the metadata extension\n        if (!success) {\n            return (false, \"\");\n        }\n\n        return (true, result);\n    }\n}\n"
    },
    "contracts/lib/Solvency.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity 0.8.13;\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\n\nimport \"../interfaces/IPriceProvidersRepository.sol\";\nimport \"../interfaces/ISilo.sol\";\nimport \"../interfaces/IInterestRateModel.sol\";\nimport \"../interfaces/ISiloRepository.sol\";\nimport \"./EasyMath.sol\";\n\nlibrary Solvency {\n    using EasyMath for uint256;\n\n    /// @notice\n    /// MaximumLTV - Maximum Loan-to-Value ratio represents the maximum borrowing power of all user's collateral\n    /// positions in a Silo\n    /// LiquidationThreshold - Liquidation Threshold represents the threshold at which all user's borrow positions\n    /// in a Silo will be considered under collateralized and subject to liquidation\n    enum TypeofLTV { MaximumLTV, LiquidationThreshold }\n\n    error DifferentArrayLength();\n    error UnsupportedLTVType();\n\n    struct SolvencyParams {\n        /// @param siloRepository SiloRepository address\n        ISiloRepository siloRepository;\n        /// @param silo Silo address\n        ISilo silo;\n        /// @param assets array with assets\n        address[] assets;\n        /// @param assetStates array of states for each asset, where index match the `assets` index\n        ISilo.AssetStorage[] assetStates;\n        /// @param user wallet address for which to read debt\n        address user;\n    }\n\n    /// @dev is value that used for integer calculations and decimal points for utilization ratios, LTV, protocol fees\n    uint256 internal constant _PRECISION_DECIMALS = 1e18;\n    uint256 internal constant _INFINITY = type(uint256).max;\n\n    /// @notice Returns current user LTV and second LTV chosen in params\n    /// @dev This function is optimized for protocol use. In some cases there is no need to keep the calculation\n    /// going and predefined results can be returned.\n    /// @param _params `Solvency.SolvencyParams` struct with needed params for calculation\n    /// @param _secondLtvType type of LTV to be returned as second value\n    /// @return currentUserLTV Loan-to-Value ratio represents current user's proportion of debt to collateral\n    /// @return secondLTV second type of LTV which depends on _secondLtvType, zero is returned if the value of the loan\n    /// or the collateral are zero\n    function calculateLTVs(SolvencyParams memory _params, TypeofLTV _secondLtvType)\n        internal\n        view\n        returns (uint256 currentUserLTV, uint256 secondLTV)\n    {\n        uint256[] memory totalBorrowAmounts = getBorrowAmounts(_params);\n\n        // this return avoids eg. additional checks on withdraw, when user did not borrow any asset\n        if (EasyMath.sum(totalBorrowAmounts) == 0) return (0, 0);\n\n        IPriceProvidersRepository priceProvidersRepository = _params.siloRepository.priceProvidersRepository();\n\n        uint256[] memory borrowValues = convertAmountsToValues(\n            priceProvidersRepository,\n            _params.assets,\n            totalBorrowAmounts\n        );\n\n        // value of user's total debt\n        uint256 borrowTotalValue = EasyMath.sum(borrowValues);\n\n        if (borrowTotalValue == 0) return (0, 0);\n\n        uint256[] memory collateralValues = getUserCollateralValues(priceProvidersRepository, _params);\n\n        // value of user's collateral\n        uint256 collateralTotalValue = EasyMath.sum(collateralValues);\n\n        if (collateralTotalValue == 0) return (_INFINITY, 0);\n\n        // value of theoretical debt user can have depending on TypeofLTV\n        uint256 borrowAvailableTotalValue = _getTotalAvailableToBorrowValue(\n            _params.siloRepository,\n            address(_params.silo),\n            _params.assets,\n            _secondLtvType,\n            collateralValues\n        );\n\n        currentUserLTV = borrowTotalValue * _PRECISION_DECIMALS / collateralTotalValue;\n\n        // one of Solvency.TypeofLTV\n        secondLTV = borrowAvailableTotalValue * _PRECISION_DECIMALS / collateralTotalValue;\n    }\n\n    /// @notice Calculates chosen LTV limit\n    /// @dev This function should be used by external actors like SiloLens and UI/subgraph. `calculateLTVs` is\n    /// optimized for protocol use and may not return second LVT calculation when they are not needed.\n    /// @param _params `Solvency.SolvencyParams` struct with needed params for calculation\n    /// @param _ltvType acceptable values are only TypeofLTV.MaximumLTV or TypeofLTV.LiquidationThreshold\n    /// @return limit theoretical LTV limit of `_ltvType`\n    function calculateLTVLimit(SolvencyParams memory _params, TypeofLTV _ltvType)\n        internal\n        view\n        returns (uint256 limit)\n    {\n        IPriceProvidersRepository priceProvidersRepository = _params.siloRepository.priceProvidersRepository();\n\n        uint256[] memory collateralValues = getUserCollateralValues(priceProvidersRepository, _params);\n\n        // value of user's collateral\n        uint256 collateralTotalValue = EasyMath.sum(collateralValues);\n\n        if (collateralTotalValue == 0) return 0;\n\n        // value of theoretical debt user can have depending on TypeofLTV\n        uint256 borrowAvailableTotalValue = _getTotalAvailableToBorrowValue(\n            _params.siloRepository,\n            address(_params.silo),\n            _params.assets,\n            _ltvType,\n            collateralValues\n        );\n\n        limit = borrowAvailableTotalValue * _PRECISION_DECIMALS / collateralTotalValue;\n    }\n\n    /// @notice Returns worth (in quote token) of each collateral deposit of a user\n    /// @param _priceProvidersRepository address of IPriceProvidersRepository where prices are read\n    /// @param _params `Solvency.SolvencyParams` struct with needed params for calculation\n    /// @return collateralValues worth of each collateral deposit of a user as an array\n    function getUserCollateralValues(IPriceProvidersRepository _priceProvidersRepository, SolvencyParams memory _params)\n        internal\n        view\n        returns(uint256[] memory collateralValues)\n    {\n        uint256[] memory collateralAmounts = getCollateralAmounts(_params);\n        collateralValues = convertAmountsToValues(_priceProvidersRepository, _params.assets, collateralAmounts);\n    }\n\n    /// @notice Convert assets amounts to values in quote token (amount * price)\n    /// @param _priceProviderRepo address of IPriceProvidersRepository where prices are read\n    /// @param _assets array with assets for which prices are read\n    /// @param _amounts array of amounts\n    /// @return values array of values for corresponding assets\n    function convertAmountsToValues(\n        IPriceProvidersRepository _priceProviderRepo,\n        address[] memory _assets,\n        uint256[] memory _amounts\n    ) internal view returns (uint256[] memory values) {\n        if (_assets.length != _amounts.length) revert DifferentArrayLength();\n\n        values = new uint256[](_assets.length);\n\n        for (uint256 i = 0; i < _assets.length; i++) {\n            if (_amounts[i] == 0) continue;\n\n            uint256 assetPrice = _priceProviderRepo.getPrice(_assets[i]);\n            uint8 assetDecimals = ERC20(_assets[i]).decimals();\n\n            values[i] = _amounts[i].toValue(assetPrice, assetDecimals);\n        }\n    }\n\n    /// @notice Get amount of collateral for each asset\n    /// @param _params `Solvency.SolvencyParams` struct with needed params for calculation\n    /// @return collateralAmounts array of amounts for each token in Silo. May contain zero values if user\n    /// did not deposit given collateral token.\n    function getCollateralAmounts(SolvencyParams memory _params)\n        internal\n        view\n        returns (uint256[] memory collateralAmounts)\n    {\n        if (_params.assets.length != _params.assetStates.length) {\n            revert DifferentArrayLength();\n        }\n\n        collateralAmounts = new uint256[](_params.assets.length);\n\n        for (uint256 i = 0; i < _params.assets.length; i++) {\n            uint256 userCollateralTokenBalance = _params.assetStates[i].collateralToken.balanceOf(_params.user);\n            uint256 userCollateralOnlyTokenBalance = _params.assetStates[i].collateralOnlyToken.balanceOf(_params.user);\n\n            if (userCollateralTokenBalance + userCollateralOnlyTokenBalance == 0) continue;\n\n            uint256 rcomp = getRcomp(_params.silo, _params.siloRepository, _params.assets[i], block.timestamp);\n\n            collateralAmounts[i] = getUserCollateralAmount(\n                _params.assetStates[i],\n                userCollateralTokenBalance,\n                userCollateralOnlyTokenBalance,\n                rcomp,\n                _params.siloRepository\n            );\n        }\n    }\n\n    /// @notice Get amount of debt for each asset\n    /// @param _params `Solvency.SolvencyParams` struct with needed params for calculation\n    /// @return totalBorrowAmounts array of amounts for each token in Silo. May contain zero values if user\n    /// did not borrow given token.\n    function getBorrowAmounts(SolvencyParams memory _params)\n        internal\n        view\n        returns (uint256[] memory totalBorrowAmounts)\n    {\n        if (_params.assets.length != _params.assetStates.length) {\n            revert DifferentArrayLength();\n        }\n\n        totalBorrowAmounts = new uint256[](_params.assets.length);\n\n        for (uint256 i = 0; i < _params.assets.length; i++) {\n            uint256 rcomp = getRcomp(_params.silo, _params.siloRepository, _params.assets[i], block.timestamp);\n            totalBorrowAmounts[i] = getUserBorrowAmount(_params.assetStates[i], _params.user, rcomp);\n        }\n    }\n\n    /// @notice Get amount of deposited token, including collateralOnly deposits\n    /// @param _assetStates state of deposited asset in Silo\n    /// @param _userCollateralTokenBalance balance of user's share collateral token\n    /// @param _userCollateralOnlyTokenBalance balance of user's share collateralOnly token\n    /// @param _rcomp compounded interest rate to account for during calculations, could be 0\n    /// @param _siloRepository SiloRepository address\n    /// @return amount of underlying token deposited, including collateralOnly deposit\n    function getUserCollateralAmount(\n        ISilo.AssetStorage memory _assetStates,\n        uint256 _userCollateralTokenBalance,\n        uint256 _userCollateralOnlyTokenBalance,\n        uint256 _rcomp,\n        ISiloRepository _siloRepository\n    ) internal view returns (uint256) {\n        uint256 assetAmount = _userCollateralTokenBalance == 0 ? 0 : _userCollateralTokenBalance.toAmount(\n            totalDepositsWithInterest(_assetStates.totalDeposits, _siloRepository.protocolShareFee(), _rcomp),\n            _assetStates.collateralToken.totalSupply()\n        );\n\n        uint256 assetCollateralOnlyAmount = _userCollateralOnlyTokenBalance == 0\n            ? 0\n            : _userCollateralOnlyTokenBalance.toAmount(\n                _assetStates.collateralOnlyDeposits,\n                _assetStates.collateralOnlyToken.totalSupply()\n            );\n\n        return assetAmount + assetCollateralOnlyAmount;\n    }\n\n    /// @notice Get amount of borrowed token\n    /// @param _assetStates state of borrowed asset in Silo\n    /// @param _user user wallet address for which to read debt\n    /// @param _rcomp compounded interest rate to account for during calculations, could be 0\n    /// @return amount of borrowed token\n    function getUserBorrowAmount(ISilo.AssetStorage memory _assetStates, address _user, uint256 _rcomp)\n        internal\n        view\n        returns (uint256)\n    {\n        uint256 balance = _assetStates.debtToken.balanceOf(_user);\n        if (balance == 0) return 0;\n\n        uint256 totalBorrowAmountCached = totalBorrowAmountWithInterest(_assetStates.totalBorrowAmount, _rcomp);\n        return balance.toAmountRoundUp(totalBorrowAmountCached, _assetStates.debtToken.totalSupply());\n    }\n\n    /// @notice Get compounded interest rate from the model\n    /// @param _silo Silo address\n    /// @param _siloRepository SiloRepository address\n    /// @param _asset address of asset for which to read interest rate\n    /// @param _timestamp used to determine amount of time from last rate update\n    /// @return rcomp compounded interest rate for an asset\n    function getRcomp(ISilo _silo, ISiloRepository _siloRepository, address _asset, uint256 _timestamp)\n        internal\n        view\n        returns (uint256 rcomp)\n    {\n        IInterestRateModel model = _siloRepository.getInterestRateModel(address(_silo), _asset);\n        rcomp = model.getCompoundInterestRate(address(_silo), _asset, _timestamp);\n    }\n\n    /// @notice Returns total deposits with interest dynamically calculated with the provided rComp\n    /// @param _assetTotalDeposits total deposits for asset\n    /// @param _protocolShareFee `siloRepository.protocolShareFee()`\n    /// @param _rcomp compounded interest rate\n    /// @return _totalDepositsWithInterests total deposits amount with interest\n    function totalDepositsWithInterest(uint256 _assetTotalDeposits, uint256 _protocolShareFee, uint256 _rcomp)\n        internal\n        pure\n        returns (uint256 _totalDepositsWithInterests)\n    {\n        uint256 depositorsShare = _PRECISION_DECIMALS - _protocolShareFee;\n\n        return _assetTotalDeposits + _assetTotalDeposits * _rcomp / _PRECISION_DECIMALS * depositorsShare /\n            _PRECISION_DECIMALS;\n    }\n\n    /// @notice Returns total borrow amount with interest dynamically calculated with the provided rComp\n    /// @param _totalBorrowAmount total borrow amount\n    /// @param _rcomp compounded interest rate\n    /// @return totalBorrowAmountWithInterests total borrow amount with interest\n    function totalBorrowAmountWithInterest(uint256 _totalBorrowAmount, uint256 _rcomp)\n        internal\n        pure\n        returns (uint256 totalBorrowAmountWithInterests)\n    {\n        totalBorrowAmountWithInterests = _totalBorrowAmount + _totalBorrowAmount * _rcomp / _PRECISION_DECIMALS;\n    }\n\n    /// @notice Calculates protocol liquidation fee and new protocol total fees collected\n    /// @param _protocolEarnedFees amount of total collected fees so far\n    /// @param _amount amount on which we will apply fee\n    /// @param _liquidationFee liquidation fee in Solvency._PRECISION_DECIMALS\n    /// @return liquidationFeeAmount calculated interest\n    /// @return newProtocolEarnedFees the new total amount of protocol fees\n    function calculateLiquidationFee(uint256 _protocolEarnedFees, uint256 _amount, uint256 _liquidationFee)\n        internal\n        pure\n        returns (uint256 liquidationFeeAmount, uint256 newProtocolEarnedFees)\n    {\n        unchecked {\n            // If we overflow on multiplication it should not revert tx, we will get lower fees\n            liquidationFeeAmount = _amount * _liquidationFee / Solvency._PRECISION_DECIMALS;\n\n            if (_protocolEarnedFees > type(uint256).max - liquidationFeeAmount) {\n                newProtocolEarnedFees = type(uint256).max;\n                liquidationFeeAmount = type(uint256).max - _protocolEarnedFees;\n            } else {\n                newProtocolEarnedFees = _protocolEarnedFees + liquidationFeeAmount;\n            }\n        }\n    }\n\n    /// @notice Calculates theoretical value (in quote token) that user could borrow based given collateral value\n    /// @param _siloRepository SiloRepository address\n    /// @param _silo Silo address\n    /// @param _asset address of collateral token\n    /// @param _type type of LTV limit to use for calculations\n    /// @param _collateralValue value of collateral deposit (in quote token)\n    /// @return availableToBorrow value (in quote token) that user can borrow against collateral value\n    function _getAvailableToBorrowValue(\n        ISiloRepository _siloRepository,\n        address _silo,\n        address _asset,\n        TypeofLTV _type,\n        uint256 _collateralValue\n    ) private view returns (uint256 availableToBorrow) {\n        uint256 assetLTV;\n\n        if (_type == TypeofLTV.MaximumLTV) {\n            assetLTV = _siloRepository.getMaximumLTV(_silo, _asset);\n        } else if (_type == TypeofLTV.LiquidationThreshold) {\n            assetLTV = _siloRepository.getLiquidationThreshold(_silo, _asset);\n        } else {\n            revert UnsupportedLTVType();\n        }\n\n        // value that can be borrowed against the deposit\n        // ie. for assetLTV = 50%, 1 ETH * 50% = 0.5 ETH of available to borrow\n        availableToBorrow = _collateralValue * assetLTV / _PRECISION_DECIMALS;\n    }\n\n    /// @notice Calculates theoretical value (in quote token) that user can borrow based on deposited collateral\n    /// @param _siloRepository SiloRepository address\n    /// @param _silo Silo address\n    /// @param _assets array with assets\n    /// @param _ltvType type of LTV limit to use for calculations\n    /// acceptable values are only TypeofLTV.MaximumLTV or TypeofLTV.LiquidationThreshold\n    /// @param _collateralValues value (worth in quote token) of each deposit made by user\n    /// @return totalAvailableToBorrowValue value (in quote token) that user can borrow against collaterals\n    function _getTotalAvailableToBorrowValue(\n        ISiloRepository _siloRepository,\n        address _silo,\n        address[] memory _assets,\n        TypeofLTV _ltvType,\n        uint256[] memory _collateralValues\n    ) private view returns (uint256 totalAvailableToBorrowValue) {\n        if (_assets.length != _collateralValues.length) revert DifferentArrayLength();\n\n        for (uint256 i = 0; i < _assets.length; i++) {\n            totalAvailableToBorrowValue += _getAvailableToBorrowValue(\n                _siloRepository,\n                _silo,\n                _assets[i],\n                _ltvType,\n                _collateralValues[i]\n            );\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        assembly {\n            size := extcodesize(account)\n        }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "contracts/interfaces/IFlashLiquidationReceiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.13;\n\n/// @dev when performing Silo flash liquidation, FlashReceiver contract will receive all collaterals\ninterface IFlashLiquidationReceiver {\n    /// @dev this method is called when doing Silo flash liquidation\n    ///         one can NOT assume, that if _seizedCollateral[i] != 0, then _shareAmountsToRepaid[i] must be 0\n    ///         one should assume, that any combination of amounts is possible\n    ///         on callback, one must call `Silo.repayFor` because at the end of transaction,\n    ///         Silo will check if borrower is solvent.\n    /// @param _user user address, that is liquidated\n    /// @param _assets array of collateral assets received during user liquidation\n    ///         this array contains all assets (collateral borrowed) without any order\n    /// @param _receivedCollaterals array of collateral amounts received during user liquidation\n    ///         indexes of amounts are related to `_assets`,\n    /// @param _shareAmountsToRepaid array of amounts to repay for each asset\n    ///         indexes of amounts are related to `_assets`,\n    /// @param _flashReceiverData data that are passed from sender that executes liquidation\n    function siloLiquidationCallback(\n        address _user,\n        address[] calldata _assets,\n        uint256[] calldata _receivedCollaterals,\n        uint256[] calldata _shareAmountsToRepaid,\n        bytes memory _flashReceiverData\n    ) external;\n}\n"
    },
    "contracts/interfaces/INotificationReceiver.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity 0.8.13;\n\n/// @title Common interface for Silo Incentive Contract\ninterface INotificationReceiver {\n    /// @dev Informs the contract about token transfer\n    /// @param _token address of the token that was transferred\n    /// @param _from sender\n    /// @param _to receiver\n    /// @param _amount amount that was transferred\n    function onAfterTransfer(address _token, address _from, address _to, uint256 _amount) external;\n\n    /// @dev Sanity check function\n    /// @return always true\n    function notificationReceiverPing() external pure returns (bytes4);\n}\n"
    },
    "contracts/interfaces/ISiloFactory.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity 0.8.13;\n\ninterface ISiloFactory {\n    /// @notice Emitted when Silo is deployed\n    /// @param silo address of deployed Silo\n    /// @param asset address of asset for which Silo was deployed\n    /// @param version version of silo implementation\n    event NewSiloCreated(address indexed silo, address indexed asset, uint128 version);\n\n    /// @notice Must be called by repository on constructor\n    /// @param _siloRepository the SiloRepository to set\n    function initRepository(address _siloRepository) external;\n\n    /// @notice Deploys Silo\n    /// @param _siloAsset unique asset for which Silo is deployed\n    /// @param _version version of silo implementation\n    /// @param _data (optional) data that may be needed during silo creation\n    /// @return silo deployed Silo address\n    function createSilo(address _siloAsset, uint128 _version, bytes memory _data) external returns (address silo);\n\n    /// @dev just a helper method to see if address is a factory\n    function siloFactoryPing() external pure returns (bytes4);\n}\n"
    },
    "contracts/interfaces/ITokensFactory.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity 0.8.13;\n\nimport \"./IShareToken.sol\";\n\ninterface ITokensFactory {\n    /// @notice Emitted when collateral token is deployed\n    /// @param token address of deployed collateral token\n    event NewShareCollateralTokenCreated(address indexed token);\n\n    /// @notice Emitted when collateral token is deployed\n    /// @param token address of deployed debt token\n    event NewShareDebtTokenCreated(address indexed token);\n\n    ///@notice Must be called by repository on constructor\n    /// @param _siloRepository the SiloRepository to set\n    function initRepository(address _siloRepository) external;\n\n    /// @notice Deploys collateral token\n    /// @param _name name of the token\n    /// @param _symbol symbol of the token\n    /// @param _asset underlying asset for which token is deployed\n    /// @return address of deployed collateral share token\n    function createShareCollateralToken(\n        string memory _name,\n        string memory _symbol,\n        address _asset\n    ) external returns (IShareToken);\n\n    /// @notice Deploys debt token\n    /// @param _name name of the token\n    /// @param _symbol symbol of the token\n    /// @param _asset underlying asset for which token is deployed\n    /// @return address of deployed debt share token\n    function createShareDebtToken(\n        string memory _name,\n        string memory _symbol,\n        address _asset\n    )\n        external\n        returns (IShareToken);\n\n    /// @dev just a helper method to see if address is a factory\n    /// @return always true\n    function tokensFactoryPing() external pure returns (bytes4);\n}\n"
    },
    "contracts/interfaces/IPriceProvider.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity >=0.7.6 <0.9.0;\n\n/// @title Common interface for Silo Price Providers\ninterface IPriceProvider {\n    /// @notice Returns \"Time-Weighted Average Price\" for an asset. Calculates TWAP price for quote/asset.\n    /// It unifies all tokens decimal to 18, examples:\n    /// - if asses == quote it returns 1e18\n    /// - if asset is USDC and quote is ETH and ETH costs ~$3300 then it returns ~0.0003e18 WETH per 1 USDC\n    /// @param _asset address of an asset for which to read price\n    /// @return price of asses with 18 decimals, throws when pool is not ready yet to provide price\n    function getPrice(address _asset) external view returns (uint256 price);\n\n    /// @dev Informs if PriceProvider is setup for asset. It does not means PriceProvider can provide price right away.\n    /// Some providers implementations need time to \"build\" buffer for TWAP price,\n    /// so price may not be available yet but this method will return true.\n    /// @param _asset asset in question\n    /// @return TRUE if asset has been setup, otherwise false\n    function assetSupported(address _asset) external view returns (bool);\n\n    /// @notice Gets token address in which prices are quoted\n    /// @return quoteToken address\n    function quoteToken() external view returns (address);\n\n    /// @notice Helper method that allows easily detects, if contract is PriceProvider\n    /// @dev this can save us from simple human errors, in case we use invalid address\n    /// but this should NOT be treated as security check\n    /// @return always true\n    function priceProviderPing() external pure returns (bytes4);\n}\n"
    },
    "contracts/interfaces/ISilo.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity 0.8.13;\n\nimport \"./IBaseSilo.sol\";\n\ninterface ISilo is IBaseSilo {\n    /// @notice Deposit `_amount` of `_asset` tokens from `msg.sender` to the Silo\n    /// @param _asset The address of the token to deposit\n    /// @param _amount The amount of the token to deposit\n    /// @param _collateralOnly True if depositing collateral only\n    /// @return collateralAmount deposited amount\n    /// @return collateralShare user collateral shares based on deposited amount\n    function deposit(address _asset, uint256 _amount, bool _collateralOnly)\n        external\n        returns (uint256 collateralAmount, uint256 collateralShare);\n\n    /// @notice Router function to deposit `_amount` of `_asset` tokens to the Silo for the `_depositor`\n    /// @param _asset The address of the token to deposit\n    /// @param _depositor The address of the recipient of collateral tokens\n    /// @param _amount The amount of the token to deposit\n    /// @param _collateralOnly True if depositing collateral only\n    /// @return collateralAmount deposited amount\n    /// @return collateralShare `_depositor` collateral shares based on deposited amount\n    function depositFor(address _asset, address _depositor, uint256 _amount, bool _collateralOnly)\n        external\n        returns (uint256 collateralAmount, uint256 collateralShare);\n\n    /// @notice Withdraw `_amount` of `_asset` tokens from the Silo to `msg.sender`\n    /// @param _asset The address of the token to withdraw\n    /// @param _amount The amount of the token to withdraw\n    /// @param _collateralOnly True if withdrawing collateral only deposit\n    /// @return withdrawnAmount withdrawn amount that was transferred to user\n    /// @return withdrawnShare burned share based on `withdrawnAmount`\n    function withdraw(address _asset, uint256 _amount, bool _collateralOnly)\n        external\n        returns (uint256 withdrawnAmount, uint256 withdrawnShare);\n\n    /// @notice Router function to withdraw `_amount` of `_asset` tokens from the Silo for the `_depositor`\n    /// @param _asset The address of the token to withdraw\n    /// @param _depositor The address that originally deposited the collateral tokens being withdrawn,\n    /// it should be the one initiating the withdrawal through the router\n    /// @param _receiver The address that will receive the withdrawn tokens\n    /// @param _amount The amount of the token to withdraw\n    /// @param _collateralOnly True if withdrawing collateral only deposit\n    /// @return withdrawnAmount withdrawn amount that was transferred to `_receiver`\n    /// @return withdrawnShare burned share based on `withdrawnAmount`\n    function withdrawFor(\n        address _asset,\n        address _depositor,\n        address _receiver,\n        uint256 _amount,\n        bool _collateralOnly\n    ) external returns (uint256 withdrawnAmount, uint256 withdrawnShare);\n\n    /// @notice Borrow `_amount` of `_asset` tokens from the Silo to `msg.sender`\n    /// @param _asset The address of the token to borrow\n    /// @param _amount The amount of the token to borrow\n    /// @return debtAmount borrowed amount\n    /// @return debtShare user debt share based on borrowed amount\n    function borrow(address _asset, uint256 _amount) external returns (uint256 debtAmount, uint256 debtShare);\n\n    /// @notice Router function to borrow `_amount` of `_asset` tokens from the Silo for the `_receiver`\n    /// @param _asset The address of the token to borrow\n    /// @param _borrower The address that will take the loan,\n    /// it should be the one initiating the borrowing through the router\n    /// @param _receiver The address of the asset receiver\n    /// @param _amount The amount of the token to borrow\n    /// @return debtAmount borrowed amount\n    /// @return debtShare `_receiver` debt share based on borrowed amount\n    function borrowFor(address _asset, address _borrower, address _receiver, uint256 _amount)\n        external\n        returns (uint256 debtAmount, uint256 debtShare);\n\n    /// @notice Repay `_amount` of `_asset` tokens from `msg.sender` to the Silo\n    /// @param _asset The address of the token to repay\n    /// @param _amount amount of asset to repay, includes interests\n    /// @return repaidAmount amount repaid\n    /// @return burnedShare burned debt share\n    function repay(address _asset, uint256 _amount) external returns (uint256 repaidAmount, uint256 burnedShare);\n\n    /// @notice Allows to repay in behalf of borrower to execute liquidation\n    /// @param _asset The address of the token to repay\n    /// @param _borrower The address of the user to have debt tokens burned\n    /// @param _amount amount of asset to repay, includes interests\n    /// @return repaidAmount amount repaid\n    /// @return burnedShare burned debt share\n    function repayFor(address _asset, address _borrower, uint256 _amount)\n        external\n        returns (uint256 repaidAmount, uint256 burnedShare);\n\n    /// @dev harvest protocol fees from an array of assets\n    /// @return harvestedAmounts amount harvested during tx execution for each of silo asset\n    function harvestProtocolFees() external returns (uint256[] memory harvestedAmounts);\n\n    /// @notice Function to update interests for `_asset` token since the last saved state\n    /// @param _asset The address of the token to be updated\n    /// @return interest accrued interest\n    function accrueInterest(address _asset) external returns (uint256 interest);\n\n    /// @notice this methods does not requires to have tokens in order to liquidate user\n    /// @dev during liquidation process, msg.sender will be notified once all collateral will be send to him\n    /// msg.sender needs to be `IFlashLiquidationReceiver`\n    /// @param _users array of users to liquidate\n    /// @param _flashReceiverData this data will be forward to msg.sender on notification\n    /// @return assets array of all processed assets (collateral + debt, including removed)\n    /// @return receivedCollaterals receivedCollaterals[userId][assetId] => amount\n    /// amounts of collaterals send to `_flashReceiver`\n    /// @return shareAmountsToRepaid shareAmountsToRepaid[userId][assetId] => amount\n    /// required amounts of debt to be repaid\n    function flashLiquidate(address[] memory _users, bytes memory _flashReceiverData)\n        external\n        returns (\n            address[] memory assets,\n            uint256[][] memory receivedCollaterals,\n            uint256[][] memory shareAmountsToRepaid\n        );\n}\n"
    },
    "contracts/Silo.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity 0.8.13;\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\n\nimport \"./interfaces/ISilo.sol\";\n\nimport \"./lib/EasyMath.sol\";\nimport \"./BaseSilo.sol\";\n\n/// @title Silo\n/// @notice Silo is the main component of the protocol. It implements lending logic, manages and isolates\n/// risk, acts as a vault for assets, and performs liquidations. Each Silo is composed of the unique asset\n/// for which it was created (ie. UNI) and bridge assets (ie. ETH and SiloDollar). There may be multiple\n/// bridge assets at any given time.\n/// @dev Main Silo contact that inherits from Base contract. It implements all user/UI facing methods.\n/// @custom:security-contact security@silo.finance\ncontract Silo is ISilo, BaseSilo {\n    using SafeERC20 for ERC20;\n    using EasyMath for uint256;\n\n    constructor (ISiloRepository _repository, address _siloAsset, uint128 _version)\n        BaseSilo(_repository, _siloAsset, _version)\n    {\n        // initial setup is done in BaseSilo, nothing to do here\n    }\n\n    /// @inheritdoc ISilo\n    function deposit(address _asset, uint256 _amount, bool _collateralOnly)\n        external\n        override\n        returns (uint256 collateralAmount, uint256 collateralShare)\n    {\n        return _deposit(_asset, msg.sender, msg.sender, _amount, _collateralOnly);\n    }\n\n    /// @inheritdoc ISilo\n    function depositFor(\n        address _asset,\n        address _depositor,\n        uint256 _amount,\n        bool _collateralOnly\n    )\n        external\n        override\n        returns (uint256 collateralAmount, uint256 collateralShare)\n    {\n        return _deposit(_asset, msg.sender, _depositor, _amount, _collateralOnly);\n    }\n\n    /// @inheritdoc ISilo\n    function withdraw(address _asset, uint256 _amount, bool _collateralOnly)\n        external\n        override\n        returns (uint256 withdrawnAmount, uint256 withdrawnShare)\n    {\n        return _withdraw(_asset, msg.sender, msg.sender, _amount, _collateralOnly);\n    }\n\n    /// @inheritdoc ISilo\n    function withdrawFor(address _asset, address _depositor, address _receiver, uint256 _amount, bool _collateralOnly)\n        external\n        override\n        onlyRouter\n        returns (uint256 withdrawnAmount, uint256 withdrawnShare)\n    {\n        return _withdraw(_asset, _depositor, _receiver, _amount, _collateralOnly);\n    }\n\n    /// @inheritdoc ISilo\n    function borrow(address _asset, uint256 _amount) external override returns (uint256 debtAmount, uint256 debtShare) {\n        return _borrow(_asset, msg.sender, msg.sender, _amount);\n    }\n\n    /// @inheritdoc ISilo\n    function borrowFor(address _asset, address _borrower, address _receiver, uint256 _amount)\n        external\n        override\n        onlyRouter\n        returns (uint256 debtAmount, uint256 debtShare)\n    {\n        return _borrow(_asset, _borrower, _receiver, _amount);\n    }\n\n    /// @inheritdoc ISilo\n    function repay(address _asset, uint256 _amount)\n        external\n        override\n        returns (uint256 repaidAmount, uint256 repaidShare)\n    {\n        return _repay(_asset, msg.sender, msg.sender, _amount);\n    }\n\n    /// @inheritdoc ISilo\n    function repayFor(address _asset, address _borrower, uint256 _amount)\n        external\n        override\n        returns (uint256 repaidAmount, uint256 repaidShare)\n    {\n        return _repay(_asset, _borrower, msg.sender, _amount);\n    }\n\n    /// @inheritdoc ISilo\n    function flashLiquidate(address[] memory _users, bytes memory _flashReceiverData)\n        external\n        override\n        returns (\n            address[] memory assets,\n            uint256[][] memory receivedCollaterals,\n            uint256[][] memory shareAmountsToRepay\n        )\n    {\n        assets = getAssets();\n        uint256 usersLength = _users.length;\n        receivedCollaterals = new uint256[][](usersLength);\n        shareAmountsToRepay = new uint256[][](usersLength);\n\n        for (uint256 i = 0; i < usersLength; i++) {\n            (\n                receivedCollaterals[i],\n                shareAmountsToRepay[i]\n            ) = _userLiquidation(assets, _users[i], IFlashLiquidationReceiver(msg.sender), _flashReceiverData);\n        }\n    }\n\n    /// @inheritdoc ISilo\n    function harvestProtocolFees() external override returns (uint256[] memory harvestedAmounts) {\n        address[] memory assets = getAssets();\n        harvestedAmounts = new uint256[](assets.length);\n\n        address repositoryOwner = siloRepository.owner();\n\n        for (uint256 i; i < assets.length;) {\n            unchecked {\n                // it will not overflow because fee is much lower than any other amounts\n                harvestedAmounts[i] = _harvestProtocolFees(assets[i], repositoryOwner);\n                // we run out of gas before we overflow i\n                i++;\n            }\n        }\n    }\n\n    /// @inheritdoc ISilo\n    function accrueInterest(address _asset) public override returns (uint256 interest) {\n        return _accrueInterest(_asset);\n    }\n}\n"
    },
    "contracts/SiloRepository.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity 0.8.13;\n\nimport \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport \"./SiloRouter.sol\";\nimport \"./interfaces/ISiloFactory.sol\";\nimport \"./interfaces/ISiloRepository.sol\";\nimport \"./interfaces/IPriceProvidersRepository.sol\";\nimport \"./interfaces/INotificationReceiver.sol\";\n\nimport \"./utils/GuardedLaunch.sol\";\nimport \"./Silo.sol\";\nimport \"./interfaces/ITokensFactory.sol\";\nimport \"./lib/Ping.sol\";\n\n/// @title SiloRepository\n/// @notice SiloRepository handles the creation and configuration of Silos.\n/// @dev Stores configuration for each asset in each silo.\n/// Each asset in each Silo starts with a default config that later on can be changed by the contract owner.\n/// Stores registry of Factory contracts that deploy different versions of Silos\n/// It is possible to have multiple versions/implementations of Silo and use different versions for different\n/// tokens. For example, one version can be used for UNI (ERC20) and the other can be used for UniV3LP tokens (ERC721).\n/// Manages bridge assets. Each Silo can have 1 or more bridge assets. New Silos are created with all currently active\n/// bridge assets. Silos that are already developed must synchronize bridge assets. Sync can be done by anyone,\n/// function has public access.\n/// Is a single source of truth for other contract addresses.\n/// @custom:security-contact security@silo.finance\n/* solhint-disable max-states-count */\ncontract SiloRepository is ISiloRepository, GuardedLaunch {\n    using EnumerableSet for EnumerableSet.AddressSet;\n\n    /// @dev Default values for AssetConfig. Used if values are not configured manually.\n    AssetConfig public defaultAssetConfig;\n\n    /// @dev Protocol fee configuration\n    Fees public fees;\n\n    /// @dev Factory contracts that deploys debt and collateral tokens for each asset in Silo\n    ITokensFactory public override tokensFactory;\n\n    /// @dev PriceProvidersRepository contract that manages PriceProviders implementations and is an entry point\n    /// for reading prices for Silos.\n    IPriceProvidersRepository public override priceProvidersRepository;\n\n    /// @dev SiloRouter utility contract that combines number of actions (Deposit, Withdraw, Borrow, Repay)\n    /// for batch execution in single transaction.\n    address public override router;\n\n    /// @dev Silo for bridge asset. We can have only one bridge pool\n    address public bridgePool;\n\n    /// @dev Silo version data\n    SiloVersion public siloVersion;\n\n    /// @dev Maps asset => silo version\n    mapping(address => uint128) public override getVersionForAsset;\n\n    /// @dev Maps Silo address to incentive contract that will distribute rewards for that Silo\n    mapping(address => INotificationReceiver) public override getNotificationReceiver;\n\n    /// @dev Maps version => ISiloFactory. Versions start at 1 and are incremented by 1.\n    mapping(uint256 => ISiloFactory) public override siloFactory;\n\n    /// @dev maps token address to silo address, asset => silo\n    mapping(address => address) public override getSilo;\n\n    /// @dev maps silo address to token address, silo => asset\n    mapping(address => address) public siloReverse;\n\n    /// @dev maps silo => asset => config\n    mapping(address => mapping(address => AssetConfig)) public assetConfigs;\n\n    /// @dev Value used to initialize the Silo's version data\n    uint128 private constant _INITIAL_SILO_VERSION = 1;\n\n    /// @dev representation of 100%\n    uint256 private constant _ONE_HUNDRED_PERCENT = 1e18;\n\n    /// @dev List of bridge assets supported by the protocol\n    EnumerableSet.AddressSet private _bridgeAssets;\n\n    /// @dev List of bridge assets removed by the protocol\n    EnumerableSet.AddressSet private _removedBridgeAssets;\n\n    error AssetAlreadyAdded();\n    error AssetIsNotABridge();\n    error AssetIsZero();\n    error BridgeAssetIsZero();\n    error ConfigDidNotChange();\n    error EmptyBridgeAssets();\n    error FeesDidNotChange();\n    error InterestRateModelDidNotChange();\n    error InvalidEntryFee();\n    error InvalidInterestRateModel();\n    error InvalidLiquidationThreshold();\n    error InvalidLTV();\n    error InvalidNotificationReceiver();\n    error InvalidPriceProvidersRepository();\n    error InvalidProtocolLiquidationFee();\n    error InvalidProtocolShareFee();\n    error InvalidSiloFactory();\n    error InvalidSiloRouter();\n    error InvalidSiloVersion();\n    error InvalidTokensFactory();\n    error LastBridgeAsset();\n    error LiquidationThresholdDidNotChange();\n    error MaximumLTVDidNotChange();\n    error VersionForAssetDidNotChange();\n    error NoPriceProviderForAsset();\n    error NotificationReceiverDidNotChange();\n    error PriceProviderRepositoryDidNotChange();\n    error RouterDidNotChange();\n    error SiloAlreadyExistsForAsset();\n    error SiloAlreadyExistsForBridgeAssets();\n    error SiloDoesNotExist();\n    error SiloIsZero();\n    error SiloNotAllowedForBridgeAsset();\n    error SiloVersionDoesNotExist();\n\n    modifier ensureValidLiquidationThreshold(uint256 _ltv, uint256 _liquidationThreshold) {\n        if (_liquidationThreshold >= _ONE_HUNDRED_PERCENT) {\n            revert InvalidLiquidationThreshold();\n        }\n\n        if (_ltv == 0 || _ltv >= _liquidationThreshold) {\n            revert InvalidLTV();\n        }\n\n        _;\n    }\n\n    /// @param _siloFactory address of SiloFactory contract that deploys Silos\n    /// @param _tokensFactory address of TokensFactory contract that deploys debt and collateral tokens\n    /// for each Silo asset\n    /// @param _defaultMaxLTV maximum Loan-to-Value for default configuration\n    /// @param _defaultLiquidationThreshold liquidation threshold for default configuration\n    /// @param _initialBridgeAssets bridge assets to start with\n    constructor(\n        address _siloFactory,\n        address _tokensFactory,\n        uint64 _defaultMaxLTV,\n        uint64 _defaultLiquidationThreshold,\n        address[] memory _initialBridgeAssets\n    )\n        ensureValidLiquidationThreshold(_defaultMaxLTV, _defaultLiquidationThreshold) GuardedLaunch()\n    {\n        if (!Ping.pong(ISiloFactory(_siloFactory).siloFactoryPing)) {\n            revert InvalidSiloFactory();\n        }\n\n        if (!Ping.pong(ITokensFactory(_tokensFactory).tokensFactoryPing)) {\n            revert InvalidTokensFactory();\n        }\n\n        if (_initialBridgeAssets.length == 0) revert EmptyBridgeAssets();\n\n        ISiloFactory(_siloFactory).initRepository(address(this));\n        ITokensFactory(_tokensFactory).initRepository(address(this));\n\n        for (uint256 i = 0; i < _initialBridgeAssets.length; i++) {\n            TokenHelper.assertAndGetDecimals(_initialBridgeAssets[i]);\n            _bridgeAssets.add(_initialBridgeAssets[i]);\n            emit BridgeAssetAdded(_initialBridgeAssets[i]);\n        }\n\n        siloVersion.byDefault = _INITIAL_SILO_VERSION;\n        siloVersion.latest = _INITIAL_SILO_VERSION;\n        siloFactory[_INITIAL_SILO_VERSION] = ISiloFactory(_siloFactory);\n        emit RegisterSiloVersion(_siloFactory, _INITIAL_SILO_VERSION, _INITIAL_SILO_VERSION);\n        emit SiloDefaultVersion(_INITIAL_SILO_VERSION);\n\n        tokensFactory = ITokensFactory(_tokensFactory);\n        emit TokensFactoryUpdate(_tokensFactory);\n\n        defaultAssetConfig.maxLoanToValue = _defaultMaxLTV;\n        defaultAssetConfig.liquidationThreshold = _defaultLiquidationThreshold;\n    }\n\n    /// @inheritdoc ISiloRepository\n    function setVersionForAsset(address _siloAsset, uint128 _version) external override onlyOwner {\n        if (getVersionForAsset[_siloAsset] == _version) revert VersionForAssetDidNotChange();\n\n        if (_version != 0 && address(siloFactory[_version]) == address(0)) {\n            revert InvalidSiloVersion();\n        }\n\n        emit VersionForAsset(_siloAsset, _version);\n        getVersionForAsset[_siloAsset] = _version;\n    }\n\n    /// @inheritdoc ISiloRepository\n    function setTokensFactory(address _tokensFactory) external override onlyOwner {\n        if (!Ping.pong(ITokensFactory(_tokensFactory).tokensFactoryPing)) {\n            revert InvalidTokensFactory();\n        }\n\n        emit TokensFactoryUpdate(_tokensFactory);\n        tokensFactory = ITokensFactory(_tokensFactory);\n    }\n\n    /// @inheritdoc ISiloRepository\n    function setFees(Fees calldata _fees) external override onlyOwner {\n        if (_fees.entryFee >= Solvency._PRECISION_DECIMALS) {\n            revert InvalidEntryFee();\n        }\n\n        if (_fees.protocolShareFee >= Solvency._PRECISION_DECIMALS) {\n            revert InvalidProtocolShareFee();\n        }\n\n        if (_fees.protocolLiquidationFee >= Solvency._PRECISION_DECIMALS) {\n            revert InvalidProtocolLiquidationFee();\n        }\n\n        Fees memory currentFees = fees;\n\n        if (\n            _fees.entryFee == currentFees.entryFee &&\n            _fees.protocolShareFee == currentFees.protocolShareFee &&\n            _fees.protocolLiquidationFee == currentFees.protocolLiquidationFee\n        ) {\n            revert FeesDidNotChange();\n        }\n\n        emit FeeUpdate(_fees.entryFee, _fees.protocolShareFee, _fees.protocolLiquidationFee);\n        fees = _fees;\n    }\n\n    /// @inheritdoc ISiloRepository\n    function setAssetConfig(address _silo, address _asset, AssetConfig calldata _assetConfig)\n        external\n        override\n        ensureValidLiquidationThreshold(_assetConfig.maxLoanToValue, _assetConfig.liquidationThreshold)\n        onlyOwner\n    {\n        if (_silo == address(0)) revert SiloIsZero();\n\n        if (_asset == address(0)) revert AssetIsZero();\n\n        if (\n            !Ping.pong(_assetConfig.interestRateModel.interestRateModelPing) ||\n            _assetConfig.interestRateModel.DP() == 0\n        ) {\n            revert InvalidInterestRateModel();\n        }\n\n        AssetConfig memory currentConfig = assetConfigs[_silo][_asset];\n\n        if (\n            currentConfig.maxLoanToValue == _assetConfig.maxLoanToValue &&\n            currentConfig.liquidationThreshold == _assetConfig.liquidationThreshold &&\n            currentConfig.interestRateModel == _assetConfig.interestRateModel\n        ) {\n            revert ConfigDidNotChange();\n        }\n\n        emit AssetConfigUpdate(_silo, _asset, _assetConfig);\n        assetConfigs[_silo][_asset] = _assetConfig;\n    }\n\n    /// @inheritdoc ISiloRepository\n    function setDefaultInterestRateModel(IInterestRateModel _defaultInterestRateModel) external override onlyOwner {\n        if (!Ping.pong(_defaultInterestRateModel.interestRateModelPing)) {\n            revert InvalidInterestRateModel();\n        }\n\n        if (defaultAssetConfig.interestRateModel == _defaultInterestRateModel) {\n            revert InterestRateModelDidNotChange();\n        }\n\n        emit InterestRateModel(_defaultInterestRateModel);\n        defaultAssetConfig.interestRateModel = _defaultInterestRateModel;\n    }\n\n    /// @inheritdoc ISiloRepository\n    function setDefaultMaximumLTV(uint64 _defaultMaxLTV)\n        external\n        override\n        ensureValidLiquidationThreshold(_defaultMaxLTV, defaultAssetConfig.liquidationThreshold)\n        onlyOwner\n    {\n        if (defaultAssetConfig.maxLoanToValue == _defaultMaxLTV) {\n            revert MaximumLTVDidNotChange();\n        }\n\n        defaultAssetConfig.maxLoanToValue = _defaultMaxLTV;\n        emit NewDefaultMaximumLTV(_defaultMaxLTV);\n    }\n\n    /// @inheritdoc ISiloRepository\n    function setDefaultLiquidationThreshold(uint64 _defaultLiquidationThreshold)\n        external\n        override\n        ensureValidLiquidationThreshold(defaultAssetConfig.maxLoanToValue, _defaultLiquidationThreshold)\n        onlyOwner\n    {\n        if (defaultAssetConfig.liquidationThreshold == _defaultLiquidationThreshold) {\n            revert LiquidationThresholdDidNotChange();\n        }\n\n        defaultAssetConfig.liquidationThreshold = _defaultLiquidationThreshold;\n        emit NewDefaultLiquidationThreshold(_defaultLiquidationThreshold);\n    }\n\n    /// @inheritdoc ISiloRepository\n    function setPriceProvidersRepository(IPriceProvidersRepository _repository) external override onlyOwner {\n        if (!Ping.pong(_repository.priceProvidersRepositoryPing)) {\n            revert InvalidPriceProvidersRepository();\n        }\n\n        if (priceProvidersRepository == _repository) {\n            revert PriceProviderRepositoryDidNotChange();\n        }\n\n        emit PriceProvidersRepositoryUpdate(_repository);\n        priceProvidersRepository = _repository;\n    }\n\n    /// @inheritdoc ISiloRepository\n    function setRouter(address _router) external override onlyOwner {\n        if (!Ping.pong(SiloRouter(payable(_router)).siloRouterPing)) {\n            revert InvalidSiloRouter();\n        }\n\n        if (router == _router) revert RouterDidNotChange();\n\n        emit RouterUpdate(_router);\n        router = _router;\n    }\n\n    /// @inheritdoc ISiloRepository\n    function setNotificationReceiver(\n        address _silo,\n        INotificationReceiver _newNotificationReceiver\n    ) external override onlyOwner {\n        if (!Ping.pong(_newNotificationReceiver.notificationReceiverPing)) {\n            revert InvalidNotificationReceiver();\n        }\n\n        if (getNotificationReceiver[_silo] == _newNotificationReceiver) {\n            revert NotificationReceiverDidNotChange();\n        }\n\n        emit NotificationReceiverUpdate(_newNotificationReceiver);\n        getNotificationReceiver[_silo] = _newNotificationReceiver;\n    }\n\n    /// @inheritdoc ISiloRepository\n    function addBridgeAsset(address _newBridgeAsset) external override onlyOwner {\n        if (!priceProvidersRepository.providersReadyForAsset(_newBridgeAsset)) {\n            revert NoPriceProviderForAsset();\n        }\n\n        TokenHelper.assertAndGetDecimals(_newBridgeAsset);\n\n        // We need to add first, so it can be synchronized after\n        if (!_bridgeAssets.add(_newBridgeAsset)) revert AssetAlreadyAdded();\n        // We don't care about the return value, because we are doing this even if the asset isn't in the list\n        _removedBridgeAssets.remove(_newBridgeAsset);\n\n        emit BridgeAssetAdded(_newBridgeAsset);\n\n        address silo = getSilo[_newBridgeAsset];\n        address bridge = bridgePool;\n\n        // Check if we already have silo for the new bridge asset.\n        // Note that if there are at least two bridge assets in the system, it is possible to prevent the addition\n        // of a specific new bridge asset by creating a Silo for it.\n        if (silo != address(0)) {\n            // Silo for new bridge asset exists, if we already have bridge, then revert\n            if (bridge != address(0)) revert SiloAlreadyExistsForBridgeAssets();\n\n            bridgePool = silo;\n            bridge = silo;\n            emit BridgePool(silo);\n        }\n\n        // syncBridgeAssets when:\n        // - we discovered bridge pool, we need to sync it with new bridge asset\n        // - silo for asset does not exist, but if we already have bridge, we need to sync\n        if (bridge != address(0)) ISilo(bridge).syncBridgeAssets();\n    }\n\n    /// @inheritdoc ISiloRepository\n    function removeBridgeAsset(address _bridgeAssetToRemove) external override onlyOwner {\n        if (_bridgeAssetToRemove == address(0)) revert BridgeAssetIsZero();\n\n        if (_bridgeAssets.length() == 1) revert LastBridgeAsset();\n\n        if (!_bridgeAssets.remove(_bridgeAssetToRemove)) revert AssetIsNotABridge();\n\n        _removedBridgeAssets.add(_bridgeAssetToRemove);\n        emit BridgeAssetRemoved(_bridgeAssetToRemove);\n\n        address silo = getSilo[_bridgeAssetToRemove];\n\n        // we have silo and it is for sure bridge pool\n        if (silo != address(0)) {\n            ISilo(silo).syncBridgeAssets();\n            bridgePool = address(0);\n            emit BridgePool(address(0));\n            return;\n        }\n\n        address pool = bridgePool;\n\n        // we have bridge pool but it is not directly for `_bridgeAssetToRemove`\n        if (pool != address(0)) {\n            ISilo(pool).syncBridgeAssets();\n        }\n    }\n\n    /// @inheritdoc ISiloRepository\n    function newSilo(address _siloAsset, bytes memory _siloData) external override returns (address) {\n        bool assetIsABridge = _bridgeAssets.contains(_siloAsset);\n        ensureCanCreateSiloFor(_siloAsset, assetIsABridge);\n        \n        return _createSilo(_siloAsset, getVersionForAsset[_siloAsset], assetIsABridge, _siloData);\n    }\n\n    /// @inheritdoc ISiloRepository\n    function replaceSilo(\n        address _siloAsset,\n        uint128 _siloVersion,\n        bytes memory _siloData\n    ) external override onlyOwner returns (address) {\n        address siloToReplace = getSilo[_siloAsset];\n\n        if (siloToReplace == address(0)) revert SiloDoesNotExist();\n\n        return _createSilo(_siloAsset, _siloVersion, _bridgeAssets.contains(_siloAsset), _siloData);\n    }\n\n    /// @inheritdoc ISiloRepository\n    function registerSiloVersion(ISiloFactory _factory, bool _isDefault) external override onlyOwner {\n        if (!Ping.pong(_factory.siloFactoryPing)) revert InvalidSiloFactory();\n\n        SiloVersion memory v = siloVersion;\n        v.latest += 1;\n\n        siloFactory[v.latest] = _factory;\n\n        emit RegisterSiloVersion(address(_factory), v.latest, v.byDefault);\n\n        if (_isDefault) {\n            v.byDefault = v.latest;\n            emit SiloDefaultVersion(v.latest);\n        }\n\n        siloVersion = v;\n    }\n\n    /// @inheritdoc ISiloRepository\n    function unregisterSiloVersion(uint128 _siloVersion) external override onlyOwner {\n        address factory = address(siloFactory[_siloVersion]);\n        // Can't unregister nonexistent or default silo version\n        if (factory == address(0) || _siloVersion == siloVersion.byDefault) {\n            revert InvalidSiloVersion();\n        }\n\n        emit UnregisterSiloVersion(factory, _siloVersion);\n        siloFactory[_siloVersion] = ISiloFactory(address(0));\n    }\n\n    /// @inheritdoc ISiloRepository\n    function setDefaultSiloVersion(uint128 _defaultVersion) external override onlyOwner {\n        if (address(siloFactory[_defaultVersion]) == address(0)) {\n            revert SiloVersionDoesNotExist();\n        }\n\n        emit SiloDefaultVersion(_defaultVersion);\n        siloVersion.byDefault = _defaultVersion;\n    }\n\n    /// @inheritdoc ISiloRepository\n    function entryFee() external view override returns (uint256) {\n        return fees.entryFee;\n    }\n\n    /// @inheritdoc ISiloRepository\n    function protocolShareFee() external view override returns (uint256) {\n        return fees.protocolShareFee;\n    }\n\n    /// @inheritdoc ISiloRepository\n    function protocolLiquidationFee() external view override returns (uint256) {\n        return fees.protocolLiquidationFee;\n    }\n\n    /// @inheritdoc ISiloRepository\n    function isSilo(address _silo) external view override returns (bool) {\n        return siloReverse[_silo] != address(0);\n    }\n\n    /// @inheritdoc ISiloRepository\n    function getBridgeAssets() external view override returns (address[] memory) {\n        return _bridgeAssets.values();\n    }\n\n    /// @inheritdoc ISiloRepository\n    function getRemovedBridgeAssets() external view override returns (address[] memory) {\n        return _removedBridgeAssets.values();\n    }\n\n    /// @inheritdoc ISiloRepository\n    function getMaximumLTV(address _silo, address _asset) external view override returns (uint256) {\n        uint256 maxLoanToValue = assetConfigs[_silo][_asset].maxLoanToValue;\n        if (maxLoanToValue != 0) {\n            return maxLoanToValue;\n        }\n        return defaultAssetConfig.maxLoanToValue;\n    }\n\n    /// @inheritdoc ISiloRepository\n    function getInterestRateModel(address _silo, address _asset)\n        external\n        view\n        override\n        returns (IInterestRateModel model)\n    {\n        model = assetConfigs[_silo][_asset].interestRateModel;\n\n        if (address(model) == address(0)) {\n            return defaultAssetConfig.interestRateModel;\n        }\n    }\n\n    /// @inheritdoc ISiloRepository\n    function getLiquidationThreshold(address _silo, address _asset) external view override returns (uint256) {\n        uint256 liquidationThreshold = assetConfigs[_silo][_asset].liquidationThreshold;\n\n        if (liquidationThreshold != 0) {\n            return liquidationThreshold;\n        }\n\n        return defaultAssetConfig.liquidationThreshold;\n    }\n\n    /// @inheritdoc ISiloRepository\n    function siloRepositoryPing() external pure override returns (bytes4) {\n        return this.siloRepositoryPing.selector;\n    }\n\n    /// @inheritdoc ISiloRepository\n    function ensureCanCreateSiloFor(address _asset, bool _assetIsABridge) public view override {\n        if (getSilo[_asset] != address(0)) revert SiloAlreadyExistsForAsset();\n\n        if (_assetIsABridge) {\n            if (bridgePool != address(0)) revert SiloAlreadyExistsForBridgeAssets();\n\n            if (_bridgeAssets.length() == 1) revert SiloNotAllowedForBridgeAsset();\n        }\n    }\n\n    /// @inheritdoc ISiloRepository\n    function owner() public view override(ISiloRepository, GuardedLaunch) returns (address) {\n        return GuardedLaunch.owner();\n    }\n\n    /// @dev Deploys Silo\n    /// @param _siloAsset silo asset\n    /// @param _siloVersion version of silo implementation\n    /// @param _assetIsABridge flag indicating if asset is a bridge asset\n    /// @param _siloData (optional) data that may be needed during silo creation\n    function _createSilo(\n        address _siloAsset,\n        uint128 _siloVersion,\n        bool _assetIsABridge,\n        bytes memory _siloData\n    ) internal returns (address createdSilo) {\n        // 0 means default version\n        if (_siloVersion == 0) {\n            _siloVersion = siloVersion.byDefault;\n        }\n\n        ISiloFactory factory = siloFactory[_siloVersion];\n\n        if (address(factory) == address(0)) revert InvalidSiloVersion();\n\n        createdSilo = factory.createSilo(_siloAsset, _siloVersion, _siloData);\n\n        // We do this before the asset sync so that functions like `isSilo` can be used by factories\n        getSilo[_siloAsset] = createdSilo;\n        siloReverse[createdSilo] = _siloAsset;\n\n        Silo(createdSilo).syncBridgeAssets();\n\n        emit NewSilo(createdSilo, _siloAsset, _siloVersion);\n\n        if (_assetIsABridge) {\n            bridgePool = createdSilo;\n            emit BridgePool(createdSilo);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/structs/EnumerableSet.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/structs/EnumerableSet.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for managing\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\n * types.\n *\n * Sets have the following properties:\n *\n * - Elements are added, removed, and checked for existence in constant time\n * (O(1)).\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\n *\n * ```\n * contract Example {\n *     // Add the library methods\n *     using EnumerableSet for EnumerableSet.AddressSet;\n *\n *     // Declare a set state variable\n *     EnumerableSet.AddressSet private mySet;\n * }\n * ```\n *\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\n * and `uint256` (`UintSet`) are supported.\n */\nlibrary EnumerableSet {\n    // To implement this library for multiple types with as little code\n    // repetition as possible, we write it in terms of a generic Set type with\n    // bytes32 values.\n    // The Set implementation uses private functions, and user-facing\n    // implementations (such as AddressSet) are just wrappers around the\n    // underlying Set.\n    // This means that we can only create new EnumerableSets for types that fit\n    // in bytes32.\n\n    struct Set {\n        // Storage of set values\n        bytes32[] _values;\n        // Position of the value in the `values` array, plus 1 because index 0\n        // means a value is not in the set.\n        mapping(bytes32 => uint256) _indexes;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function _add(Set storage set, bytes32 value) private returns (bool) {\n        if (!_contains(set, value)) {\n            set._values.push(value);\n            // The value is stored at length-1, but we add 1 to all indexes\n            // and use 0 as a sentinel value\n            set._indexes[value] = set._values.length;\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\n        // We read and store the value's index to prevent multiple reads from the same storage slot\n        uint256 valueIndex = set._indexes[value];\n\n        if (valueIndex != 0) {\n            // Equivalent to contains(set, value)\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\n            // This modifies the order of the array, as noted in {at}.\n\n            uint256 toDeleteIndex = valueIndex - 1;\n            uint256 lastIndex = set._values.length - 1;\n\n            if (lastIndex != toDeleteIndex) {\n                bytes32 lastvalue = set._values[lastIndex];\n\n                // Move the last value to the index where the value to delete is\n                set._values[toDeleteIndex] = lastvalue;\n                // Update the index for the moved value\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\n            }\n\n            // Delete the slot where the moved value was stored\n            set._values.pop();\n\n            // Delete the index for the deleted slot\n            delete set._indexes[value];\n\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\n        return set._indexes[value] != 0;\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function _length(Set storage set) private view returns (uint256) {\n        return set._values.length;\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\n        return set._values[index];\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function _values(Set storage set) private view returns (bytes32[] memory) {\n        return set._values;\n    }\n\n    // Bytes32Set\n\n    struct Bytes32Set {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _add(set._inner, value);\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _remove(set._inner, value);\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\n        return _contains(set._inner, value);\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(Bytes32Set storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\n        return _at(set._inner, index);\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\n        return _values(set._inner);\n    }\n\n    // AddressSet\n\n    struct AddressSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(AddressSet storage set, address value) internal returns (bool) {\n        return _add(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(AddressSet storage set, address value) internal returns (bool) {\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(AddressSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\n        return address(uint160(uint256(_at(set._inner, index))));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(AddressSet storage set) internal view returns (address[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        address[] memory result;\n\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n\n    // UintSet\n\n    struct UintSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\n        return _add(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\n        return _remove(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function length(UintSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\n        return uint256(_at(set._inner, index));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        uint256[] memory result;\n\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n}\n"
    },
    "contracts/SiloRouter.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity 0.8.13;\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\n\nimport \"./interfaces/IWrappedNativeToken.sol\";\nimport \"./interfaces/ISilo.sol\";\nimport \"./interfaces/ISiloRepository.sol\";\n\nimport \"./lib/Ping.sol\";\nimport \"./lib/TokenHelper.sol\";\nimport \"./lib/EasyMath.sol\";\n\n/// @title SiloRouter\n/// @notice Silo Router is a utility contract that aims to improve UX. It can batch any number or combination\n/// of actions (Deposit, Withdraw, Borrow, Repay) and execute them in a single transaction.\n/// @dev SiloRouter requires only first action asset to be approved\n/// @custom:security-contact security@silo.finance\ncontract SiloRouter is ReentrancyGuard {\n    using SafeERC20 for IERC20;\n    using EasyMath for uint256;\n\n    // @notice Action types that are supported\n    enum ActionType { Deposit, Withdraw, Borrow, Repay }\n\n    struct Action {\n        // what do you want to do?\n        ActionType actionType;\n        // which Silo are you interacting with?\n        ISilo silo;\n        // what asset do you want to use?\n        IERC20 asset;\n        // how much asset do you want to use?\n        uint256 amount;\n        // is it an action on collateral only?\n        bool collateralOnly;\n    }\n\n    // @dev native asset wrapped token. In case of Ether, it's WETH.\n    IWrappedNativeToken public immutable wrappedNativeToken;\n    ISiloRepository public immutable siloRepository;\n\n    error ApprovalFailed();\n    error ERC20TransferFailed();\n    error EthTransferFailed();\n    error InvalidSilo();\n    error InvalidSiloRepository();\n    error UnsupportedAction();\n\n    constructor (address _wrappedNativeToken, address _siloRepository) {\n        if (!Ping.pong(ISiloRepository(_siloRepository).siloRepositoryPing)) {\n            revert InvalidSiloRepository();\n        }\n\n        TokenHelper.assertAndGetDecimals(_wrappedNativeToken);\n\n        wrappedNativeToken = IWrappedNativeToken(_wrappedNativeToken);\n        siloRepository = ISiloRepository(_siloRepository);\n    }\n\n    /// @dev needed for unwrapping WETH\n    receive() external payable {\n        // `execute` method calls `IWrappedNativeToken.withdraw()`\n        // and we need to receive the withdrawn ETH unconditionally\n    }\n\n    /// @notice Execute actions\n    /// @dev User can bundle any combination and number of actions. It's possible to do multiple deposits,\n    /// withdraws etc. For that reason router may need to send multiple tokens back to the user. Combining\n    /// Ether and WETH deposits will make this function revert.\n    /// @param _actions array of actions to execute\n    function execute(Action[] calldata _actions) external payable nonReentrant {\n        uint256 len = _actions.length;\n\n        // execute actions\n        for (uint256 i = 0; i < len; i++) {\n            _executeAction(_actions[i]);\n        }\n\n        // send all assets to user\n        for (uint256 i = 0; i < len; i++) {\n            uint256 remainingBalance = _actions[i].asset.balanceOf(address(this));\n\n            if (remainingBalance != 0) {\n                _sendAsset(_actions[i].asset, remainingBalance);\n            }\n        }\n\n        // should never have leftover ETH, however\n        if (msg.value != 0 && address(this).balance != 0) {\n            // solhint-disable-next-line avoid-low-level-calls\n            (bool success, ) = msg.sender.call{value: address(this).balance}(\"\");\n            if (!success) revert EthTransferFailed();\n        }\n    }\n\n    function siloRouterPing() external pure returns (bytes4) {\n        return this.siloRouterPing.selector;\n    }\n\n    /// @dev Execute actions\n    /// @param _action action to execute, this can be one of many actions in the whole flow\n    // solhint-disable-next-line code-complexity\n    function _executeAction(Action calldata _action) internal {\n        if (!siloRepository.isSilo(address(_action.silo))) revert InvalidSilo();\n\n        if (_action.actionType == ActionType.Deposit) {\n            _pullAssetIfNeeded(_action.asset, _action.amount);\n            _approveIfNeeded(_action.asset, address(_action.silo), _action.amount);\n            _action.silo.depositFor(address(_action.asset), msg.sender, _action.amount, _action.collateralOnly);\n        } else if (_action.actionType == ActionType.Withdraw) {\n            _action.silo.withdrawFor(\n                address(_action.asset),\n                msg.sender,\n                address(this),\n                _action.amount,\n                _action.collateralOnly\n            );\n        } else if (_action.actionType == ActionType.Borrow) {\n            _action.silo.borrowFor(address(_action.asset), msg.sender, address(this), _action.amount);\n        } else if (_action.actionType == ActionType.Repay) {\n            uint256 repayAmount; \n\n            if (_action.amount == type(uint256).max) {\n                _action.silo.accrueInterest(address(_action.asset));\n                repayAmount = _getRepayAmount(_action.silo, _action.asset, msg.sender);\n            } else {\n                repayAmount = _action.amount;\n            }\n\n            _pullAssetIfNeeded(_action.asset, repayAmount);\n            _approveIfNeeded(_action.asset, address(_action.silo), repayAmount);\n            _action.silo.repayFor(address(_action.asset), msg.sender, repayAmount);\n        } else {\n            revert UnsupportedAction();\n        }\n    }\n\n    /// @dev Approve Silo to transfer token if current allowance is not enough\n    /// @param _asset token to be approved\n    /// @param _spender Silo address that spends the token\n    /// @param _amount amount of token to be spent\n    function _approveIfNeeded(\n        IERC20 _asset,\n        address _spender,\n        uint256 _amount\n    ) internal {\n        if (_asset.allowance(address(this), _spender) < _amount) {\n            // solhint-disable-next-line avoid-low-level-calls\n            (bool success, bytes memory data) = address(_asset).call(\n                abi.encodeCall(IERC20.approve, (_spender, type(uint256).max))\n            );\n\n            // Support non-standard tokens that don't return bool\n            if(!success || !(data.length == 0 || abi.decode(data, (bool)))) {\n                revert ApprovalFailed();\n            }\n        }\n    }\n\n    /// @dev Transfer funds from msg.sender to this contract if balance is not enough\n    /// @param _asset token to be approved\n    /// @param _amount amount of token to be spent\n    function _pullAssetIfNeeded(IERC20 _asset, uint256 _amount) internal {\n        uint256 remainingBalance = _asset.balanceOf(address(this));\n\n        if (remainingBalance < _amount) {\n            // There can't be an underflow in the subtraction because of the previous check\n            unchecked {\n                _pullAsset(_asset, _amount - remainingBalance);\n            }\n        }\n    }\n\n    /// @dev Transfer asset from user to router\n    /// @param _asset asset address to be transferred\n    /// @param _amount amount of asset to be transferred\n    function _pullAsset(IERC20 _asset, uint256 _amount) internal {\n        if (msg.value != 0 && _asset == wrappedNativeToken) {\n            wrappedNativeToken.deposit{value: _amount}();\n        } else {\n            _asset.safeTransferFrom(msg.sender, address(this), _amount);\n        }\n    }\n\n    /// @dev Transfer asset from router to user\n    /// @param _asset asset address to be transferred\n    /// @param _amount amount of asset to be transferred\n    function _sendAsset(IERC20 _asset, uint256 _amount) internal {\n        if (address(_asset) == address(wrappedNativeToken)) {\n            wrappedNativeToken.withdraw(_amount);\n            // solhint-disable-next-line avoid-low-level-calls\n            (bool success, ) = msg.sender.call{value: _amount}(\"\");\n            if (!success) revert ERC20TransferFailed();\n        } else {\n            _asset.safeTransfer(msg.sender, _amount);\n        }\n    }\n\n    /// @dev Helper that calculates the maximum amount to repay if type(uint256).max is passed\n    /// @param _silo silo for which the debt will be repaid\n    /// @param _asset asset being repaid\n    /// @param _borrower user for which the debt being repaid\n    function _getRepayAmount(ISilo _silo, IERC20 _asset, address _borrower)\n        internal\n        view\n        returns(uint256)\n    {\n        ISilo.AssetStorage memory _assetStorage = _silo.assetStorage(address(_asset));\n        uint256 repayShare = _assetStorage.debtToken.balanceOf(_borrower);\n        uint256 debtTokenTotalSupply = _assetStorage.debtToken.totalSupply();\n        uint256 totalBorrowed = _assetStorage.totalBorrowAmount;\n        return repayShare.toAmountRoundUp(totalBorrowed, debtTokenTotalSupply);\n    }\n}\n"
    },
    "contracts/utils/GuardedLaunch.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity 0.8.13;\n\nimport \"../interfaces/IGuardedLaunch.sol\";\nimport \"./TwoStepOwnable.sol\";\nimport \"./Manageable.sol\";\n\n/// @title GuardedLaunch\n/// @notice Implements security and risk averse functions for Silo\n/// @dev This contract is meant to limit Silo functionality for Beta Release in order to minimize any damage\n/// of potential critical vulnerability.\n/// @custom:security-contact security@silo.finance\ncontract GuardedLaunch is IGuardedLaunch, TwoStepOwnable, Manageable {\n    uint256 private constant _INFINITY = type(uint256).max;\n\n    /// @dev Initial value for defaultMaxLiquidity is 250 quote tokens\n    uint256 private constant _INITIAL_MAX_LIQUIDITY = 250 * 1e18;\n\n    /// @dev stores max liquidity config\n    MaxLiquidityLimit public maxLiquidity;\n\n    /// @dev stores pause config\n    Paused public isPaused;\n\n    error GlobalLimitDidNotChange();\n    error GlobalPauseDidNotChange();\n    error MaxLiquidityDidNotChange();\n    error SiloMaxLiquidityDidNotChange();\n    error SiloPauseDidNotChange();\n\n    constructor() Manageable(msg.sender) {\n        maxLiquidity.globalLimit = true;\n\n        maxLiquidity.defaultMaxLiquidity = _INITIAL_MAX_LIQUIDITY;\n    }\n\n    /// @inheritdoc IGuardedLaunch\n    function setLimitedMaxLiquidity(bool _globalLimit) external onlyManager override {\n        if (maxLiquidity.globalLimit == _globalLimit) revert GlobalLimitDidNotChange();\n\n        maxLiquidity.globalLimit = _globalLimit;\n        emit LimitedMaxLiquidityToggled(maxLiquidity.globalLimit);\n    }\n\n    /// @inheritdoc IGuardedLaunch\n    function setDefaultSiloMaxDepositsLimit(uint256 _maxDeposits) external onlyManager override {\n        if (maxLiquidity.defaultMaxLiquidity == _maxDeposits) {\n            revert MaxLiquidityDidNotChange();\n        }\n\n        maxLiquidity.defaultMaxLiquidity = _maxDeposits;\n        emit DefaultSiloMaxDepositsLimitUpdate(_maxDeposits);\n    }\n\n    /// @inheritdoc IGuardedLaunch\n    function setSiloMaxDepositsLimit(\n        address _silo,\n        address _asset,\n        uint256 _maxDeposits\n    ) external onlyManager override {\n        if (maxLiquidity.siloMaxLiquidity[_silo][_asset] == _maxDeposits) {\n            revert SiloMaxLiquidityDidNotChange();\n        }\n\n        maxLiquidity.siloMaxLiquidity[_silo][_asset] = _maxDeposits;\n        emit SiloMaxDepositsLimitsUpdate(_silo, _asset, _maxDeposits);\n    }\n\n    /// @inheritdoc IGuardedLaunch\n    function setGlobalPause(bool _globalPause) external onlyManager override {\n        if (isPaused.globalPause == _globalPause) revert GlobalPauseDidNotChange();\n\n        isPaused.globalPause = _globalPause;\n        emit GlobalPause(_globalPause);\n    }\n\n    /// @inheritdoc IGuardedLaunch\n    function setSiloPause(address _silo, address _asset, bool _pauseValue) external onlyManager override {\n        if (isPaused.siloPause[_silo][_asset] == _pauseValue) {\n            revert SiloPauseDidNotChange();\n        }\n\n        isPaused.siloPause[_silo][_asset] = _pauseValue;\n        emit SiloPause(_silo, _asset, _pauseValue);\n    }\n\n    /// @inheritdoc IGuardedLaunch\n    function isSiloPaused(address _silo, address _asset) external view override returns (bool) {\n        return isPaused.globalPause || isPaused.siloPause[_silo][address(0)] || isPaused.siloPause[_silo][_asset];\n    }\n\n    /// @inheritdoc IGuardedLaunch\n    function getMaxSiloDepositsValue(address _silo, address _asset) external view override returns (uint256) {\n        if (maxLiquidity.globalLimit) {\n            uint256 maxDeposits = maxLiquidity.siloMaxLiquidity[_silo][_asset];\n            if (maxDeposits != 0) {\n                return maxDeposits;\n            }\n            return maxLiquidity.defaultMaxLiquidity;\n        }\n        return _INFINITY;\n    }\n\n    /// @dev Returns the address of the current owner.\n    function owner() public view override(TwoStepOwnable, Manageable) virtual returns (address) {\n        return TwoStepOwnable.owner();\n    }\n}\n"
    },
    "contracts/interfaces/IWrappedNativeToken.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity 0.8.13;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\ninterface IWrappedNativeToken is IERC20 {\n    function deposit() external payable;\n    function withdraw(uint256 amount) external;\n}\n"
    },
    "contracts/utils/TwoStepOwnable.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity >=0.7.6 <0.9.0;\n\n/// @title TwoStepOwnable\n/// @notice Contract that implements the same functionality as popular Ownable contract from openzeppelin library.\n/// The only difference is that it adds a possibility to transfer ownership in two steps. Single step ownership\n/// transfer is still supported.\n/// @dev Two step ownership transfer is meant to be used by humans to avoid human error. Single step ownership\n/// transfer is meant to be used by smart contracts to avoid over-complicated two step integration. For that reason,\n/// both ways are supported.\nabstract contract TwoStepOwnable {\n    /// @dev current owner\n    address private _owner;\n    /// @dev candidate to an owner\n    address private _pendingOwner;\n\n    /// @notice Emitted when ownership is transferred on `transferOwnership` and `acceptOwnership`\n    /// @param newOwner new owner\n    event OwnershipTransferred(address indexed newOwner);\n    /// @notice Emitted when ownership transfer is proposed, aka pending owner is set\n    /// @param newPendingOwner new proposed/pending owner\n    event OwnershipPending(address indexed newPendingOwner);\n\n    /**\n     *  error OnlyOwner();\n     *  error OnlyPendingOwner();\n     *  error OwnerIsZero();\n     */\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        if (owner() != msg.sender) revert(\"OnlyOwner\");\n        _;\n    }\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _setOwner(msg.sender);\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _setOwner(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        if (newOwner == address(0)) revert(\"OwnerIsZero\");\n        _setOwner(newOwner);\n    }\n\n    /**\n     * @dev Transfers pending ownership of the contract to a new account (`newPendingOwner`) and clears any existing\n     * pending ownership.\n     * Can only be called by the current owner.\n     */\n    function transferPendingOwnership(address newPendingOwner) public virtual onlyOwner {\n        _setPendingOwner(newPendingOwner);\n    }\n\n    /**\n     * @dev Clears the pending ownership.\n     * Can only be called by the current owner.\n     */\n    function removePendingOwnership() public virtual onlyOwner {\n        _setPendingOwner(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a pending owner\n     * Can only be called by the pending owner.\n     */\n    function acceptOwnership() public virtual {\n        if (msg.sender != pendingOwner()) revert(\"OnlyPendingOwner\");\n        _setOwner(pendingOwner());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Returns the address of the pending owner.\n     */\n    function pendingOwner() public view virtual returns (address) {\n        return _pendingOwner;\n    }\n\n    /**\n     * @dev Sets the new owner and emits the corresponding event.\n     */\n    function _setOwner(address newOwner) private {\n        if (_owner == newOwner) revert(\"OwnerDidNotChange\");\n\n        _owner = newOwner;\n        emit OwnershipTransferred(newOwner);\n\n        if (_pendingOwner != address(0)) {\n            _setPendingOwner(address(0));\n        }\n    }\n\n    /**\n     * @dev Sets the new pending owner and emits the corresponding event.\n     */\n    function _setPendingOwner(address newPendingOwner) private {\n        if (_pendingOwner == newPendingOwner) revert(\"PendingOwnerDidNotChange\");\n\n        _pendingOwner = newPendingOwner;\n        emit OwnershipPending(newPendingOwner);\n    }\n}\n"
    },
    "contracts/utils/Manageable.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity 0.8.13;\n\n/// @title Manageable\n/// @notice Implements simple manager role that can be changed by a manger or external owner role\n/// @dev This contract is designed to work with Ownable from openzeppelin\n/// @custom:security-contact security@silo.finance\nabstract contract Manageable {\n    /// @notice wallet address of manager role\n    address private _managerRole;\n\n    /// @notice Emitted when manager is changed\n    /// @param manager new manager address\n    event ManagerChanged(address manager);\n\n    error ManagerIsZero();\n    error OnlyManager();\n    error OnlyOwnerOrManager();\n    error ManagerDidNotChange();\n\n    modifier onlyManager() {\n        if (_managerRole != msg.sender) revert OnlyManager();\n        _;\n    }\n\n    /// @param _manager new manager address\n    constructor(address _manager) {\n        if (_manager == address(0)) revert ManagerIsZero();\n\n        _managerRole = _manager;\n    }\n\n    /// @notice Change manager address\n    /// @dev Callable by manager or external owner role\n    /// @param _manager new manager address\n    function changeManager(address _manager) external {\n        if (msg.sender != owner() && msg.sender != _managerRole) {\n            revert OnlyOwnerOrManager();\n        }\n\n        if (_manager == address(0)) revert ManagerIsZero();\n        if (_manager == _managerRole) revert ManagerDidNotChange();\n\n        _managerRole = _manager;\n        emit ManagerChanged(_manager);\n    }\n\n    function manager() public view virtual returns (address) {\n        return _managerRole;\n    }\n\n    /// @notice Gets external owner role\n    /// @return owner address\n    function owner() public view virtual returns (address);\n}\n"
    },
    "contracts/utils/InterestRateDataResolver.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity 0.8.13;\n\nimport \"../interfaces/IInterestRateModel.sol\";\nimport \"../interfaces/ISilo.sol\";\nimport \"../lib/Ping.sol\";\nimport \"../SiloLens.sol\";\n\ncontract InterestRateDataResolver {\n    ISiloRepository immutable public siloRepository;\n    SiloLens public immutable siloLens;\n\n    error InvalidSiloLens();\n    error InvalidSiloRepository();\n    error EmptySilos();\n\n    struct AssetData {\n        address asset;\n        IInterestRateModel.Config modelConfig;\n        uint256 currentInterestRate;\n        uint256 siloUtilization;\n        uint256 totalDepositsWithInterest;\n        uint256 depositAPY;\n    }\n\n    struct SiloAssetsData {\n        ISilo silo;\n        AssetData[] assetData;\n    }\n\n    constructor (ISiloRepository _siloRepo, SiloLens _lens) {\n        if (!Ping.pong(_siloRepo.siloRepositoryPing)) revert InvalidSiloRepository();\n        if (!Ping.pong(_lens.lensPing)) revert InvalidSiloLens();\n\n        siloRepository = _siloRepo;\n        siloLens = _lens;\n    }\n\n    /// @dev batch method for `getData()`\n    function getDataBatch(ISilo[] calldata _silos)\n        external\n        view\n        returns (SiloAssetsData[] memory siloAssetsData, uint256 timestamp)\n    {\n        if (_silos.length == 0) revert EmptySilos();\n\n        siloAssetsData = new SiloAssetsData[](_silos.length);\n\n        unchecked {\n            for(uint256 i; i < _silos.length; i++) {\n                address[] memory assets = _silos[i].getAssets();\n\n                siloAssetsData[i].silo = _silos[i];\n                siloAssetsData[i].assetData = new AssetData[](assets.length);\n\n                for (uint256 j; j < assets.length; j++) {\n                    (siloAssetsData[i].assetData[j],) = getData(_silos[i], assets[j]);\n                }\n            }\n        }\n\n        timestamp = block.timestamp;\n    }\n\n    function getModel(ISilo _silo, address _asset) public view returns (IInterestRateModel) {\n        return IInterestRateModel(siloRepository.getInterestRateModel(address(_silo), _asset));\n    }\n\n    /// @dev pulls all data required for bot that collect interest rate model data for researchers\n    function getData(ISilo _silo, address _asset)\n        public\n        view\n        returns (AssetData memory assetData, uint256 timestamp)\n    {\n        IInterestRateModel model = getModel(_silo, _asset);\n\n        assetData.asset = _asset;\n        assetData.modelConfig = model.getConfig(address(_silo), _asset);\n        assetData.currentInterestRate = model.getCurrentInterestRate(address(_silo), _asset, block.timestamp);\n        assetData.siloUtilization = siloLens.getUtilization(_silo, _asset);\n        assetData.totalDepositsWithInterest = siloLens.totalDepositsWithInterest(_silo, _asset);\n        assetData.depositAPY = siloLens.depositAPY(_silo, _asset);\n\n        timestamp = block.timestamp;\n    }\n}\n"
    },
    "contracts/SiloLens.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity 0.8.13;\n\nimport \"./interfaces/IBaseSilo.sol\";\nimport \"./interfaces/ISilo.sol\";\nimport \"./lib/EasyMath.sol\";\nimport \"./lib/Ping.sol\";\nimport \"./lib/Solvency.sol\";\n\n/// @title SiloLens\n/// @notice Utility contract that simplifies reading data from Silo protocol contracts\n/// @custom:security-contact security@silo.finance\ncontract SiloLens {\n    using EasyMath for uint256;\n\n    ISiloRepository immutable public siloRepository;\n\n    error InvalidRepository();\n\n    constructor (ISiloRepository _siloRepo) {\n        if (!Ping.pong(_siloRepo.siloRepositoryPing)) revert InvalidRepository();\n\n        siloRepository = _siloRepo;\n    }\n\n    /// @dev Amount of token that is available for borrowing.\n    /// @param _silo Silo address from which to read data\n    /// @param _asset asset address for which to read data\n    /// @return Silo liquidity\n    function liquidity(ISilo _silo, address _asset) external view returns (uint256) {\n        return ERC20(_asset).balanceOf(address(_silo)) - _silo.assetStorage(_asset).collateralOnlyDeposits;\n    }\n\n    /// @notice Get amount of asset token that has been deposited to Silo\n    /// @dev It reads directly from storage so interest generated between last update and now is not taken for account\n    /// @param _silo Silo address from which to read data\n    /// @param _asset asset address for which to read data\n    /// @return amount of all deposits made for given asset\n    function totalDeposits(ISilo _silo, address _asset) external view returns (uint256) {\n        return _silo.utilizationData(_asset).totalDeposits;\n    }\n\n    /// @notice Get amount of asset token that has been deposited to Silo with option \"collateralOnly\"\n    /// @dev It reads directly from storage so interest generated between last update and now is not taken for account\n    /// @param _silo Silo address from which to read data\n    /// @param _asset asset address for which to read data\n    /// @return amount of all \"collateralOnly\" deposits made for given asset\n    function collateralOnlyDeposits(ISilo _silo, address _asset) external view returns (uint256) {\n        return _silo.assetStorage(_asset).collateralOnlyDeposits;\n    }\n\n    /// @notice Get amount of asset that has been borrowed\n    /// @dev It reads directly from storage so interest generated between last update and now is not taken for account\n    /// @param _silo Silo address from which to read data\n    /// @param _asset asset address for which to read data\n    /// @return amount of asset that has been borrowed\n    function totalBorrowAmount(ISilo _silo, address _asset) external view returns (uint256) {\n        return _silo.assetStorage(_asset).totalBorrowAmount;\n    }\n\n    /// @notice Get amount of fees earned by protocol to date\n    /// @dev It reads directly from storage so interest generated between last update and now is not taken for account\n    /// @param _silo Silo address from which to read data\n    /// @param _asset asset address for which to read data\n    /// @return amount of fees earned by protocol to date\n    function protocolFees(ISilo _silo, address _asset) external view returns (uint256) {\n        return _silo.interestData(_asset).protocolFees;\n    }\n\n    /// @notice Returns Loan-To-Value for an account\n    /// @dev Each Silo has multiple asset markets (bridge assets + unique asset). This function calculates\n    /// a sum of all deposits and all borrows denominated in quote token. Returns fraction between borrow value\n    /// and deposit value with 18 decimals.\n    /// @param _silo Silo address from which to read data\n    /// @param _user wallet address for which LTV is calculated\n    /// @return userLTV user current LTV with 18 decimals\n    function getUserLTV(ISilo _silo, address _user) external view returns (uint256 userLTV) {\n        (address[] memory assets, ISilo.AssetStorage[] memory assetsStates) = _silo.getAssetsWithState();\n\n        (userLTV, ) = Solvency.calculateLTVs(\n            Solvency.SolvencyParams(\n                siloRepository,\n                _silo,\n                assets,\n                assetsStates,\n                _user\n            ),\n            Solvency.TypeofLTV.MaximumLTV\n        );\n    }\n\n    /// @notice Get totalSupply of debt token\n    /// @dev Debt token represents a share in total debt of given asset\n    /// @param _silo Silo address from which to read data\n    /// @param _asset asset address for which to read data\n    /// @return totalSupply of debt token\n    function totalBorrowShare(ISilo _silo, address _asset) external view returns (uint256) {\n        return _silo.assetStorage(_asset).debtToken.totalSupply();\n    }\n\n    /// @notice Calculates current borrow amount for user with interest\n    /// @dev Interest is calculated based on the provided timestamp with is expected to be current time.\n    /// @param _silo Silo address from which to read data\n    /// @param _asset token address for which calculation are done\n    /// @param _user account for which calculation are done\n    /// @param _timestamp timestamp used for interest calculations\n    /// @return total amount of asset user needs to repay at provided timestamp\n    function getBorrowAmount(ISilo _silo, address _asset, address _user, uint256 _timestamp)\n        external\n        view\n        returns (uint256)\n    {\n        return Solvency.getUserBorrowAmount(\n            _silo.assetStorage(_asset),\n            _user,\n            Solvency.getRcomp(_silo, siloRepository, _asset, _timestamp)\n        );\n    }\n\n    /// @notice Get debt token balance of a user\n    /// @dev Debt token represents a share in total debt of given asset. This method calls balanceOf(_user)\n    /// on that token.\n    /// @param _silo Silo address from which to read data\n    /// @param _asset asset address for which to read data\n    /// @param _user wallet address for which to read data\n    /// @return balance of debt token of given user\n    function borrowShare(ISilo _silo, address _asset, address _user) external view returns (uint256) {\n        return _silo.assetStorage(_asset).debtToken.balanceOf(_user);\n    }\n\n    /// @notice Get underlying balance of all deposits of given token of given user including \"collateralOnly\"\n    /// deposits\n    /// @dev It reads directly from storage so interest generated between last update and now is not taken for account\n    /// @param _silo Silo address from which to read data\n    /// @param _asset asset address for which to read data\n    /// @param _user wallet address for which to read data\n    /// @return balance of underlying tokens for the given user\n    function collateralBalanceOfUnderlying(ISilo _silo, address _asset, address _user) external view returns (uint256) {\n        ISilo.AssetStorage memory _state = _silo.assetStorage(_asset);\n\n        // Overflow shouldn't happen if the underlying token behaves correctly, as the total supply of underlying\n        // tokens can't overflow by definition\n        unchecked {\n            return balanceOfUnderlying(_state.totalDeposits, _state.collateralToken, _user) +\n                balanceOfUnderlying(_state.collateralOnlyDeposits, _state.collateralOnlyToken, _user);\n        }\n    }\n\n    /// @notice Get amount of debt of underlying token for given user\n    /// @dev It reads directly from storage so interest generated between last update and now is not taken for account\n    /// @param _silo Silo address from which to read data\n    /// @param _asset asset address for which to read data\n    /// @param _user wallet address for which to read data\n    /// @return balance of underlying token owed\n    function debtBalanceOfUnderlying(ISilo _silo, address _asset, address _user) external view returns (uint256) {\n        ISilo.AssetStorage memory _state = _silo.assetStorage(_asset);\n\n        return balanceOfUnderlying(_state.totalBorrowAmount, _state.debtToken, _user);\n    }\n\n    /// @notice Calculate value of collateral asset for user\n    /// @dev It dynamically adds interest earned. Takes for account collateral only deposits as well.\n    /// @param _silo Silo address from which to read data\n    /// @param _user account for which calculation are done\n    /// @param _asset token address for which calculation are done\n    /// @return value of collateral denominated in quote token with 18 decimal\n    function calculateCollateralValue(ISilo _silo, address _user, address _asset)\n        external\n        view\n        returns (uint256)\n    {\n        IPriceProvidersRepository priceProviderRepo = siloRepository.priceProvidersRepository();\n        ISilo.AssetStorage memory assetStorage = _silo.assetStorage(_asset);\n\n        uint256 assetPrice = priceProviderRepo.getPrice(_asset);\n        uint8 assetDecimals = ERC20(_asset).decimals();\n        uint256 userCollateralTokenBalance = assetStorage.collateralToken.balanceOf(_user);\n        uint256 userCollateralOnlyTokenBalance = assetStorage.collateralOnlyToken.balanceOf(_user);\n\n        uint256 assetAmount = Solvency.getUserCollateralAmount(\n            assetStorage,\n            userCollateralTokenBalance,\n            userCollateralOnlyTokenBalance,\n            Solvency.getRcomp(_silo, siloRepository, _asset, block.timestamp),\n            siloRepository\n        );\n\n        return assetAmount.toValue(assetPrice, assetDecimals);\n    }\n\n    /// @notice Calculate value of borrowed asset by user\n    /// @dev It dynamically adds interest earned to borrowed amount\n    /// @param _silo Silo address from which to read data\n    /// @param _user account for which calculation are done\n    /// @param _asset token address for which calculation are done\n    /// @return value of debt denominated in quote token with 18 decimal\n    function calculateBorrowValue(ISilo _silo, address _user, address _asset)\n        external\n        view\n        returns (uint256)\n    {\n        IPriceProvidersRepository priceProviderRepo = siloRepository.priceProvidersRepository();\n        uint256 assetPrice = priceProviderRepo.getPrice(_asset);\n        uint256 assetDecimals = ERC20(_asset).decimals();\n\n        uint256 rcomp = Solvency.getRcomp(_silo, siloRepository, _asset, block.timestamp);\n        uint256 borrowAmount = Solvency.getUserBorrowAmount(_silo.assetStorage(_asset), _user, rcomp);\n\n        return borrowAmount.toValue(assetPrice, assetDecimals);\n    }\n\n    /// @notice Get combined liquidation threshold for a user\n    /// @dev Methodology for calculating liquidation threshold is as follows. Each Silo is combined form multiple\n    /// assets (bridge assets + unique asset). Each of these assets may have different liquidation threshold.\n    /// That means effective liquidation threshold must be calculated per asset based on current deposits and\n    /// borrows of given account.\n    /// @param _silo Silo address from which to read data\n    /// @param _user wallet address for which to read data\n    /// @return liquidationThreshold liquidation threshold of given user\n    function getUserLiquidationThreshold(ISilo _silo, address _user)\n        external\n        view\n        returns (uint256 liquidationThreshold)\n    {\n        (address[] memory assets, ISilo.AssetStorage[] memory assetsStates) = _silo.getAssetsWithState();\n\n        liquidationThreshold = Solvency.calculateLTVLimit(\n            Solvency.SolvencyParams(\n                siloRepository,\n                _silo,\n                assets,\n                assetsStates,\n                _user\n            ),\n            Solvency.TypeofLTV.LiquidationThreshold\n        );\n    }\n\n    /// @notice Get combined maximum Loan-To-Value for a user\n    /// @dev Methodology for calculating maximum LTV is as follows. Each Silo is combined form multiple assets\n    /// (bridge assets + unique asset). Each of these assets may have different maximum Loan-To-Value for\n    /// opening borrow position. That means effective maximum LTV must be calculated per asset based on\n    /// current deposits and borrows of given account.\n    /// @param _silo Silo address from which to read data\n    /// @param _user wallet address for which to read data\n    /// @return maximumLTV Maximum Loan-To-Value of given user\n    function getUserMaximumLTV(ISilo _silo, address _user) external view returns (uint256 maximumLTV) {\n        (address[] memory assets, ISilo.AssetStorage[] memory assetsStates) = _silo.getAssetsWithState();\n\n        maximumLTV = Solvency.calculateLTVLimit(\n            Solvency.SolvencyParams(\n                siloRepository,\n                _silo,\n                assets,\n                assetsStates,\n                _user\n            ),\n            Solvency.TypeofLTV.MaximumLTV\n        );\n    }\n\n    /// @notice Check if user is in debt\n    /// @param _silo Silo address from which to read data\n    /// @param _user wallet address for which to read data\n    /// @return TRUE if user borrowed any amount of any asset, otherwise FALSE\n    function inDebt(ISilo _silo, address _user) external view returns (bool) {\n        address[] memory allAssets = _silo.getAssets();\n\n        for (uint256 i; i < allAssets.length;) {\n            if (_silo.assetStorage(allAssets[i]).debtToken.balanceOf(_user) != 0) return true;\n\n            unchecked {\n                i++;\n            }\n        }\n\n        return false;\n    }\n\n    /// @notice Check if user has position (debt or borrow) in any asset\n    /// @param _silo Silo address from which to read data\n    /// @param _user wallet address for which to read data\n    /// @return TRUE if user has position (debt or borrow) in any asset\n    function hasPosition(ISilo _silo, address _user) external view returns (bool) {\n        (, ISilo.AssetStorage[] memory assetsStorage) = _silo.getAssetsWithState();\n\n        for (uint256 i; i < assetsStorage.length; i++) {\n            if (assetsStorage[i].debtToken.balanceOf(_user) != 0) return true;\n            if (assetsStorage[i].collateralToken.balanceOf(_user) != 0) return true;\n            if (assetsStorage[i].collateralOnlyToken.balanceOf(_user) != 0) return true;\n        }\n\n        return false;\n    }\n\n    /// @notice Calculates fraction between borrowed amount and the current liquidity of tokens for given asset\n    /// denominated in percentage\n    /// @dev Utilization is calculated current values in storage so it does not take for account earned\n    /// interest and ever-increasing total borrow amount. It assumes `Model.DP()` = 100%.\n    /// @param _silo Silo address from which to read data\n    /// @param _asset asset address\n    /// @return utilization value\n    function getUtilization(ISilo _silo, address _asset) external view returns (uint256) {\n        ISilo.UtilizationData memory data = ISilo(_silo).utilizationData(_asset);\n\n        return EasyMath.calculateUtilization(\n            getModel(_silo, _asset).DP(),\n            data.totalDeposits,\n            data.totalBorrowAmount\n        );\n    }\n\n    /// @notice Yearly interest rate for depositing asset token, dynamically calculated for current block timestamp\n    /// @param _silo Silo address from which to read data\n    /// @param _asset asset address\n    /// @return APY with 18 decimals\n    function depositAPY(ISilo _silo, address _asset) external view returns (uint256) {\n        uint256 dp = getModel(_silo, _asset).DP();\n\n        // amount of deposits in asset decimals\n        uint256 totalDepositsAmount = totalDepositsWithInterest(_silo, _asset);\n\n        if (totalDepositsAmount == 0) return 0;\n\n        // amount of debt generated per year in asset decimals\n        uint256 generatedDebtAmount = totalBorrowAmountWithInterest(_silo, _asset) * borrowAPY(_silo, _asset) / dp;\n\n        return generatedDebtAmount * Solvency._PRECISION_DECIMALS / totalDepositsAmount;\n    }\n\n    /// @notice Calculate amount of entry fee for given amount\n    /// @param _amount amount for which to calculate fee\n    /// @return Amount of token fee to be paid\n    function calcFee(uint256 _amount) external view returns (uint256) {\n        uint256 entryFee = siloRepository.entryFee();\n        if (entryFee == 0) return 0; // no fee\n\n        unchecked {\n            // If we overflow on multiplication it should not revert tx, we will get lower fees\n            return _amount * entryFee / Solvency._PRECISION_DECIMALS;\n        }\n    }\n\n    /// @dev Method for sanity check\n    /// @return always true\n    function lensPing() external pure returns (bytes4) {\n        return this.lensPing.selector;\n    }\n\n    /// @notice Yearly interest rate for borrowing asset token, dynamically calculated for current block timestamp\n    /// @param _silo Silo address from which to read data\n    /// @param _asset asset address\n    /// @return APY with 18 decimals\n    function borrowAPY(ISilo _silo, address _asset) public view returns (uint256) {\n        return getModel(_silo, _asset).getCurrentInterestRate(address(_silo), _asset, block.timestamp);\n    }\n\n    /// @notice returns total deposits with interest dynamically calculated at current block timestamp\n    /// @param _asset asset address\n    /// @return _totalDeposits total deposits amount with interest\n    function totalDepositsWithInterest(ISilo _silo, address _asset) public view returns (uint256 _totalDeposits) {\n        uint256 rcomp = getModel(_silo, _asset).getCompoundInterestRate(address(_silo), _asset, block.timestamp);\n        uint256 protocolShareFee = siloRepository.protocolShareFee();\n        ISilo.UtilizationData memory data = _silo.utilizationData(_asset);\n\n        return Solvency.totalDepositsWithInterest(data.totalDeposits, protocolShareFee, rcomp);\n    }\n\n    /// @notice returns total borrow amount with interest dynamically calculated at current block timestamp\n    /// @param _asset asset address\n    /// @return _totalBorrowAmount total deposits amount with interest\n    function totalBorrowAmountWithInterest(ISilo _silo, address _asset)\n        public\n        view\n        returns (uint256 _totalBorrowAmount)\n    {\n        uint256 rcomp = Solvency.getRcomp(_silo, siloRepository, _asset, block.timestamp);\n        ISilo.UtilizationData memory data = _silo.utilizationData(_asset);\n\n        return Solvency.totalBorrowAmountWithInterest(data.totalBorrowAmount, rcomp);\n    }\n\n    /// @notice Get underlying balance of collateral or debt token\n    /// @dev You can think about debt and collateral tokens as cToken in compound. They represent ownership of\n    /// debt or collateral in given Silo. This method converts that ownership to exact amount of underlying token.\n    /// @param _assetTotalDeposits Total amount of assets that has been deposited or borrowed. For collateral token,\n    /// use `totalDeposits` to get this value. For debt token, use `totalBorrowAmount` to get this value.\n    /// @param _shareToken share token address. It's the collateral and debt share token address. You can find\n    /// these addresses in:\n    /// - `ISilo.AssetStorage.collateralToken`\n    /// - `ISilo.AssetStorage.collateralOnlyToken`\n    /// - `ISilo.AssetStorage.debtToken`\n    /// @param _user wallet address for which to read data\n    /// @return balance of underlying token deposited or borrowed of given user\n    function balanceOfUnderlying(uint256 _assetTotalDeposits, IShareToken _shareToken, address _user)\n        public\n        view\n        returns (uint256)\n    {\n        uint256 share = _shareToken.balanceOf(_user);\n        return share.toAmount(_assetTotalDeposits, _shareToken.totalSupply());\n    }\n\n    /// @dev gets interest rates model object\n    /// @param _silo Silo address from which to read data\n    /// @param _asset asset for which to calculate interest rate\n    /// @return IInterestRateModel interest rates model object\n    function getModel(ISilo _silo, address _asset) public view returns (IInterestRateModel) {\n        return IInterestRateModel(siloRepository.getInterestRateModel(address(_silo), _asset));\n    }\n}\n"
    },
    "contracts/mock/MockLiquidationHelper.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity 0.8.13;\n\nimport \"../SiloLens.sol\";\nimport \"../interfaces/ISiloRepository.sol\";\n\n/// @dev this is MOCK contract - DO NOT USE IT!\ncontract MockLiquidationHelper is IFlashLiquidationReceiver {\n    ISiloRepository public immutable siloRepository;\n    SiloLens public immutable lens;\n\n    constructor (address _repository, address _lens) {\n        siloRepository = ISiloRepository(_repository);\n        lens = SiloLens(_lens);\n    }\n\n    function executeLiquidation(address[] memory _users, ISilo _silo) external {\n        _silo.flashLiquidate(_users, abi.encode(0x0));\n    }\n\n    /// @dev this is working example of how to perform liquidation, this method will be called by Silo\n    ///         Keep in mind, that this helper might NOT choose the best swap option.\n    ///         For best results (highest earnings) you probably want to implement your own callback and maybe use some\n    ///         dex aggregators.\n    function siloLiquidationCallback(\n        address _user,\n        address[] calldata _assets,\n        uint256[] calldata,\n        uint256[] calldata _shareAmountsToRepaid,\n        bytes memory\n    ) external override {\n        // repay\n        for (uint256 i = 0; i < _assets.length; i++) {\n            if (_shareAmountsToRepaid[i] == 0) continue;\n\n            ISilo(msg.sender).repayFor(_assets[i], _user, _shareAmountsToRepaid[i]);\n        }\n    }\n}\n"
    },
    "contracts/mock/TestEasyMath.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity 0.8.13;\n\nimport \"../lib/EasyMath.sol\";\n\n/// @dev this is MOCK contract - DO NOT USE IT!\ncontract TestEasyMath {\n    function toShare(uint256 amount, uint256 totalAmount, uint256 totalShares) external pure returns (uint256) {\n        return EasyMath.toShare(amount, totalAmount, totalShares);\n    }\n\n    function toShareRoundUp(uint256 amount, uint256 totalAmount, uint256 totalShares) external pure returns (uint256) {\n        return EasyMath.toShareRoundUp(amount, totalAmount, totalShares);\n    }\n\n    function toAmount(uint256 share, uint256 totalAmount, uint256 totalShares) external pure returns (uint256) {\n        return EasyMath.toAmount(share, totalAmount, totalShares);\n    }\n\n    function toAmountRoundUp(uint256 share, uint256 totalAmount, uint256 totalShares) external pure returns (uint256) {\n        return EasyMath.toAmountRoundUp(share, totalAmount, totalShares);\n    }\n}\n"
    },
    "contracts/liquidation/SiloLiquidationLens.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.13;\n\nimport \"../interfaces/ISilo.sol\";\nimport \"../lib/Solvency.sol\";\nimport \"../lib/EasyMath.sol\";\nimport \"../lib/Ping.sol\";\n\n/// @title SiloLiquidationLens\n/// @custom:security-contact security@silo.finance\ncontract SiloLiquidationLens {\n    using EasyMath for uint256;\n\n    ISiloRepository immutable public siloRepository;\n\n    error InvalidSiloRepository();\n\n    constructor (ISiloRepository _siloRepo) {\n        if (!Ping.pong(_siloRepo.siloRepositoryPing)) revert InvalidSiloRepository();\n\n        siloRepository = _siloRepo;\n    }\n\n    /// @dev view method of ISilo.flashLiquidate\n    /// @param _silo Silo address from which to read data\n    /// @param _users array of users for witch we want to get liquidation data\n    /// @return assets array of all processed assets (collateral + debt, including removed)\n    /// @return receivedCollaterals receivedCollaterals[userId][assetId] => amount\n    /// amounts of collaterals send to `_flashReceiver`\n    /// @return shareAmountsToRepay shareAmountsToRepaid[userId][assetId] => amount\n    /// required amounts of debt to be repaid\n    function flashLiquidateView(ISilo _silo, address[] memory _users)\n        external\n        view\n        returns (\n            address[] memory assets,\n            uint256[][] memory receivedCollaterals,\n            uint256[][] memory shareAmountsToRepay\n        )\n    {\n        assets = _silo.getAssets();\n        uint256 usersLength = _users.length;\n        receivedCollaterals = new uint256[][](usersLength);\n        shareAmountsToRepay = new uint256[][](usersLength);\n\n        for (uint256 i = 0; i < usersLength; i++) {\n            (receivedCollaterals[i], shareAmountsToRepay[i]) = _userLiquidationView(_silo, assets, _users[i]);\n        }\n    }\n\n    /// @dev gets interest rates model object\n    /// @param _silo Silo address from which to read data\n    /// @param _asset asset for which to calculate interest rate\n    /// @return IInterestRateModel interest rates model object\n    function getModel(ISilo _silo, address _asset) public view returns (IInterestRateModel) {\n        return IInterestRateModel(siloRepository.getInterestRateModel(address(_silo), _asset));\n    }\n\n    function _userLiquidationView(ISilo _silo, address[] memory _assets, address _user)\n        internal\n        view\n        returns (uint256[] memory receivedCollaterals, uint256[] memory shareAmountsToRepay)\n    {\n        // gracefully fail if _user is solvent\n        if (_silo.isSolvent(_user)) {\n            uint256[] memory empty = new uint256[](_assets.length);\n            return (empty, empty);\n        }\n\n        (receivedCollaterals, shareAmountsToRepay) = _flashUserLiquidationView(_silo, _assets, _user);\n    }\n\n    function _flashUserLiquidationView(ISilo _silo, address[] memory _allSiloAssets, address _borrower)\n        internal\n        view\n        returns (uint256[] memory receivedCollaterals, uint256[] memory amountsToRepay)\n    {\n        uint256 assetsLength = _allSiloAssets.length;\n        receivedCollaterals = new uint256[](assetsLength);\n        amountsToRepay = new uint256[](assetsLength);\n\n        uint256 protocolLiquidationFee = siloRepository.protocolLiquidationFee();\n\n        for (uint256 i = 0; i < assetsLength; i++) {\n            ISilo.AssetStorage memory _state = _silo.assetStorage(_allSiloAssets[i]);\n            ISilo.AssetInterestData memory _assetInterestData = _silo.interestData(_allSiloAssets[i]);\n\n            _accrueInterestView(_silo, _state, _assetInterestData, _allSiloAssets[i]);\n            // we do not allow for partial repayment on liquidation, that's why max\n            (amountsToRepay[i],) = _calculateDebtAmountAndShare(_state, _borrower);\n\n            uint256 withdrawnOnlyAmount = _calculateWithdrawAssetAmount(\n                _state.collateralOnlyDeposits,\n                _state.collateralOnlyToken,\n                _borrower,\n                protocolLiquidationFee,\n                _assetInterestData.protocolFees\n            );\n\n            uint256 withdrawnAmount = _calculateWithdrawAssetAmount(\n                _state.totalDeposits,\n                _state.collateralToken,\n                _borrower,\n                protocolLiquidationFee,\n                _assetInterestData.protocolFees\n            );\n\n            receivedCollaterals[i] = withdrawnOnlyAmount + withdrawnAmount;\n        }\n    }\n\n    function _accrueInterestView(\n        ISilo _silo,\n        ISilo.AssetStorage memory _state,\n        ISilo.AssetInterestData memory _assetInterestData,\n        address _asset\n    )\n        internal\n        view\n    {\n        uint256 lastTimestamp = _assetInterestData.interestRateTimestamp;\n\n        // This is the first time, so we can return early and save some gas\n        if (lastTimestamp == 0) {\n            _assetInterestData.interestRateTimestamp = uint64(block.timestamp);\n            return;\n        }\n\n        // Interest has already been accrued this block\n        if (lastTimestamp == block.timestamp) {\n            return;\n        }\n\n        uint256 rcomp = getModel(_silo, _asset).getCompoundInterestRate(address(_silo), _asset, block.timestamp);\n        uint256 protocolShareFee = siloRepository.protocolShareFee();\n\n        uint256 totalBorrowAmountCached = _state.totalBorrowAmount;\n\n        uint256 totalInterest = totalBorrowAmountCached * rcomp / Solvency._PRECISION_DECIMALS;\n        uint256 protocolShare = totalInterest * protocolShareFee / Solvency._PRECISION_DECIMALS;\n        uint256 depositorsShare = totalInterest - protocolShare;\n\n        // update contract state\n        _state.totalBorrowAmount = totalBorrowAmountCached + totalInterest;\n        _state.totalDeposits = _state.totalDeposits + depositorsShare;\n        _assetInterestData.protocolFees = _assetInterestData.protocolFees + protocolShare;\n        _assetInterestData.interestRateTimestamp = uint64(block.timestamp);\n    }\n\n    function _calculateDebtAmountAndShare(ISilo.AssetStorage memory _assetStorage, address _borrower)\n        internal\n        view\n        returns (uint256 amount, uint256 repayShare)\n    {\n        repayShare = _assetStorage.debtToken.balanceOf(_borrower);\n        uint256 debtTokenTotalSupply = _assetStorage.debtToken.totalSupply();\n        uint256 totalBorrowed = _assetStorage.totalBorrowAmount;\n        amount = repayShare.toAmountRoundUp(totalBorrowed, debtTokenTotalSupply);\n    }\n\n    function _calculateWithdrawAssetAmount(\n        uint256 _assetTotalDeposits,\n        IShareToken _shareToken,\n        address _depositor,\n        uint256 _protocolLiquidationFee,\n        uint256 _protocolFees\n    )\n        internal\n        view\n        returns (uint256 withdrawnAmount)\n    {\n        uint256 burnedShare = _shareToken.balanceOf(_depositor);\n        withdrawnAmount = burnedShare.toAmount(_assetTotalDeposits, _shareToken.totalSupply());\n\n        if (withdrawnAmount == 0) return 0;\n\n        if (_protocolLiquidationFee != 0) {\n            withdrawnAmount = _applyLiquidationFee(withdrawnAmount, _protocolLiquidationFee, _protocolFees);\n        }\n    }\n\n    function _applyLiquidationFee(\n        uint256 _amount,\n        uint256 _protocolLiquidationFee,\n        uint256 _protocolFees\n    )\n        internal\n        pure\n        returns (uint256 change)\n    {\n        uint256 liquidationFeeAmount;\n\n        (liquidationFeeAmount,) = Solvency.calculateLiquidationFee(_protocolFees, _amount, _protocolLiquidationFee);\n\n        unchecked {\n            // if fees will not be higher than 100% this will not underflow, this is responsibility of siloRepository\n            // in case we do underflow, we can expect liquidator reject tx because of too little change\n            change = _amount - liquidationFeeAmount;\n        }\n    }\n}\n"
    },
    "contracts/InterestRateModel.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity 0.8.13;\n\nimport \"@openzeppelin/contracts/utils/math/SafeCast.sol\";\nimport \"@openzeppelin/contracts/utils/math/Math.sol\";\n\nimport \"./lib/PRBMathSD59x18.sol\";\nimport \"./lib/EasyMath.sol\";\nimport \"./interfaces/ISilo.sol\";\nimport \"./interfaces/IInterestRateModel.sol\";\nimport \"./utils/TwoStepOwnable.sol\";\n\n/// @title InterestRateModel\n/// @notice Dynamic interest rate model implementation\n/// @dev Model stores some Silo specific data. If model is replaced, it needs to set proper config after redeployment\n/// for seamless service. Please refer to separate litepaper about model for design details.\n/// @custom:security-contact security@silo.finance\ncontract InterestRateModel is IInterestRateModel, TwoStepOwnable {\n    using PRBMathSD59x18 for int256;\n    using SafeCast for int256;\n    using SafeCast for uint256;\n\n    /// @dev DP is 18 decimal points used for integer calculations\n    uint256 public constant override DP = 1e18;\n\n    /// @dev maximum value of compound interest the model will return\n    uint256 public constant RCOMP_MAX = (2**16) * 1e18;\n\n    /// @dev maximum value of X for which, RCOMP_MAX should be returned. If x > X_MAX => exp(x) > RCOMP_MAX.\n    /// X_MAX = ln(RCOMP_MAX + 1)\n    int256 public constant X_MAX = 11090370147631773313;\n\n    /// @dev maximum allowed amount for accruedInterest, totalDeposits and totalBorrowedAmount\n    /// after adding compounded interest. If rcomp cause this values to overflow, rcomp is reduced.\n    /// 196 bits max allowed for an asset amounts because the multiplication product with\n    /// decimal points (10^18) should not cause an overflow. 196 < log2(2^256 / 10^18)\n    uint256 public constant ASSET_DATA_OVERFLOW_LIMIT = 2**196;\n\n    // Silo => asset => ModelData\n    mapping(address => mapping(address => Config)) public config;\n\n    /// @notice Emitted on config change\n    /// @param silo Silo address for which config should be set\n    /// @param asset asset address for which config should be set\n    /// @param config config struct for asset in Silo\n    event ConfigUpdate(address indexed silo, address indexed asset, Config config);\n\n    error InvalidBeta();\n    error InvalidKcrit();\n    error InvalidKi();\n    error InvalidKlin();\n    error InvalidKlow();\n    error InvalidTcrit();\n    error InvalidTimestamps();\n    error InvalidUcrit();\n    error InvalidUlow();\n    error InvalidUopt();\n    error InvalidRi();\n\n    constructor(Config memory _config) {\n        _setConfig(address(0), address(0), _config);\n    }\n\n    /// @inheritdoc IInterestRateModel\n    function setConfig(address _silo, address _asset, Config calldata _config) external override onlyOwner {\n        // we do not care, if accrueInterest call will be successful\n        // solhint-disable-next-line avoid-low-level-calls\n        _silo.call(abi.encodeCall(ISilo.accrueInterest, _asset));\n\n        _setConfig(_silo, _asset, _config);\n    }\n\n    /// @inheritdoc IInterestRateModel\n    function getCompoundInterestRateAndUpdate(\n        address _asset,\n        uint256 _blockTimestamp\n    ) external override returns (uint256 rcomp) {\n        // assume that caller is Silo\n        address silo = msg.sender;\n\n        ISilo.UtilizationData memory data = ISilo(silo).utilizationData(_asset);\n\n        // TODO when depositing, we doing two calls for `calculateCompoundInterestRate`, maybe we can optimize?\n        Config storage currentConfig = config[silo][_asset];\n\n        (rcomp, currentConfig.ri, currentConfig.Tcrit) = calculateCompoundInterestRate(\n            getConfig(silo, _asset),\n            data.totalDeposits,\n            data.totalBorrowAmount,\n            data.interestRateTimestamp,\n            _blockTimestamp\n        );\n    }\n\n    /// @inheritdoc IInterestRateModel\n    function getCompoundInterestRate(\n        address _silo,\n        address _asset,\n        uint256 _blockTimestamp\n    ) external view override returns (uint256 rcomp) {\n        ISilo.UtilizationData memory data = ISilo(_silo).utilizationData(_asset);\n\n        (rcomp,,) = calculateCompoundInterestRate(\n            getConfig(_silo, _asset),\n            data.totalDeposits,\n            data.totalBorrowAmount,\n            data.interestRateTimestamp,\n            _blockTimestamp\n        );\n    }\n\n    /// @inheritdoc IInterestRateModel\n    function overflowDetected(\n        address _silo,\n        address _asset,\n        uint256 _blockTimestamp\n    ) external view override returns (bool overflow) {\n        ISilo.UtilizationData memory data = ISilo(_silo).utilizationData(_asset);\n\n        (,,,overflow) = calculateCompoundInterestRateWithOverflowDetection(\n            getConfig(_silo, _asset),\n            data.totalDeposits,\n            data.totalBorrowAmount,\n            data.interestRateTimestamp,\n            _blockTimestamp\n        );\n    }\n\n    /// @inheritdoc IInterestRateModel\n    function getCurrentInterestRate(\n        address _silo,\n        address _asset,\n        uint256 _blockTimestamp\n    ) external view override returns (uint256 rcur) {\n        ISilo.UtilizationData memory data = ISilo(_silo).utilizationData(_asset);\n\n        rcur = calculateCurrentInterestRate(\n            getConfig(_silo, _asset),\n            data.totalDeposits,\n            data.totalBorrowAmount,\n            data.interestRateTimestamp,\n            _blockTimestamp\n        );\n    }\n\n    /// @inheritdoc IInterestRateModel\n    function getConfig(address _silo, address _asset) public view override returns (Config memory) {\n        Config storage currentConfig = config[_silo][_asset];\n\n        if (currentConfig.uopt != 0) {\n            return currentConfig;\n        }\n\n        // use default config\n        Config memory c = config[address(0)][address(0)];\n\n        // model data is always stored for each silo and asset so default values must be replaced\n        c.ri = currentConfig.ri;\n        c.Tcrit = currentConfig.Tcrit;\n        return c;\n    }\n\n    /* solhint-disable */\n\n    struct LocalVarsRCur {\n        int256 T;\n        int256 u;\n        int256 DP;\n        int256 rp;\n        int256 rlin;\n        int256 ri;\n        bool overflow;\n    }\n\n    /// @inheritdoc IInterestRateModel\n    function calculateCurrentInterestRate(\n        Config memory _c,\n        uint256 _totalDeposits,\n        uint256 _totalBorrowAmount,\n        uint256 _interestRateTimestamp,\n        uint256 _blockTimestamp\n    ) public pure override returns (uint256 rcur) {\n        if (_interestRateTimestamp > _blockTimestamp) revert InvalidTimestamps();\n\n        // struct for local vars to avoid \"Stack too deep\"\n        LocalVarsRCur memory _l = LocalVarsRCur(0,0,0,0,0,0,false);\n\n        (,,,_l.overflow) = calculateCompoundInterestRateWithOverflowDetection(\n            _c,\n            _totalDeposits,\n            _totalBorrowAmount,\n            _interestRateTimestamp,\n            _blockTimestamp\n        );\n\n        if (_l.overflow) {\n            return 0;\n        }\n\n        // There can't be an underflow in the subtraction because of the previous check\n        unchecked {\n            // T := t1 - t0 # length of time period in seconds\n            _l.T = (_blockTimestamp - _interestRateTimestamp).toInt256();\n        }\n\n        _l.u = EasyMath.calculateUtilization(DP, _totalDeposits, _totalBorrowAmount).toInt256();\n        _l.DP = int256(DP);\n\n        if (_l.u > _c.ucrit) {\n            // rp := kcrit *(1 + Tcrit + beta *T)*( u0 - ucrit )\n            _l.rp = _c.kcrit * (_l.DP + _c.Tcrit + _c.beta * _l.T) / _l.DP * (_l.u - _c.ucrit) / _l.DP;\n        } else {\n            // rp := min (0, klow * (u0 - ulow ))\n            _l.rp = _min(0, _c.klow * (_l.u - _c.ulow) / _l.DP);\n        }\n\n        // rlin := klin * u0 # lower bound between t0 and t1\n        _l.rlin = _c.klin * _l.u / _l.DP;\n        // ri := max(ri , rlin )\n        _l.ri = _max(_c.ri, _l.rlin);\n        // ri := max(ri + ki * (u0 - uopt ) * T, rlin )\n        _l.ri = _max(_l.ri + _c.ki * (_l.u - _c.uopt) * _l.T / _l.DP, _l.rlin);\n        // rcur := max (ri + rp , rlin ) # current per second interest rate\n        rcur = (_max(_l.ri + _l.rp, _l.rlin)).toUint256();\n        rcur *= 365 days;\n    }\n\n    struct LocalVarsRComp {\n        int256 T;\n        int256 slopei;\n        int256 rp;\n        int256 slope;\n        int256 r0;\n        int256 rlin;\n        int256 r1;\n        int256 x;\n        int256 rlin1;\n        int256 u;\n    }\n\n    function interestRateModelPing() external pure override returns (bytes4) {\n        return this.interestRateModelPing.selector;\n    }\n\n    /// @inheritdoc IInterestRateModel\n    function calculateCompoundInterestRate(\n        Config memory _c,\n        uint256 _totalDeposits,\n        uint256 _totalBorrowAmount,\n        uint256 _interestRateTimestamp,\n        uint256 _blockTimestamp\n    ) public pure override returns (\n        uint256 rcomp,\n        int256 ri,\n        int256 Tcrit\n    ) {\n        (rcomp, ri, Tcrit,) = calculateCompoundInterestRateWithOverflowDetection(\n            _c,\n            _totalDeposits,\n            _totalBorrowAmount,\n            _interestRateTimestamp,\n            _blockTimestamp\n        );\n    }\n\n    /// @inheritdoc IInterestRateModel\n    function calculateCompoundInterestRateWithOverflowDetection(\n        Config memory _c,\n        uint256 _totalDeposits,\n        uint256 _totalBorrowAmount,\n        uint256 _interestRateTimestamp,\n        uint256 _blockTimestamp\n    ) public pure override returns (\n        uint256 rcomp,\n        int256 ri,\n        int256 Tcrit,\n        bool overflow\n    ) {\n        ri = _c.ri;\n        Tcrit = _c.Tcrit;\n\n        // struct for local vars to avoid \"Stack too deep\"\n        LocalVarsRComp memory _l = LocalVarsRComp(0,0,0,0,0,0,0,0,0,0);\n\n        if (_interestRateTimestamp > _blockTimestamp) revert InvalidTimestamps();\n\n        // There can't be an underflow in the subtraction because of the previous check\n        unchecked {\n            // length of time period in seconds\n            _l.T = (_blockTimestamp - _interestRateTimestamp).toInt256();\n        }\n\n        int256 _DP = int256(DP);\n\n        _l.u = EasyMath.calculateUtilization(DP, _totalDeposits, _totalBorrowAmount).toInt256();\n\n        // slopei := ki * (u0 - uopt )\n        _l.slopei = _c.ki * (_l.u - _c.uopt) / _DP;\n\n        if (_l.u > _c.ucrit) {\n            // rp := kcrit * (1 + Tcrit) * (u0 - ucrit )\n            _l.rp = _c.kcrit * (_DP + Tcrit) / _DP * (_l.u - _c.ucrit) / _DP;\n            // slope := slopei + kcrit * beta * (u0 - ucrit )\n            _l.slope = _l.slopei + _c.kcrit * _c.beta / _DP * (_l.u - _c.ucrit) / _DP;\n            // Tcrit := Tcrit + beta * T\n            Tcrit = Tcrit + _c.beta * _l.T;\n        } else {\n            // rp := min (0, klow * (u0 - ulow ))\n            _l.rp = _min(0, _c.klow * (_l.u - _c.ulow) / _DP);\n            // slope := slopei\n            _l.slope = _l.slopei;\n            // Tcrit := max (0, Tcrit - beta * T)\n            Tcrit = _max(0, Tcrit - _c.beta * _l.T);\n        }\n\n        // rlin := klin * u0 # lower bound between t0 and t1\n        _l.rlin = _c.klin * _l.u / _DP;\n        // ri := max(ri , rlin )\n        ri = _max(ri , _l.rlin);\n        // r0 := ri + rp # interest rate at t0 ignoring lower bound\n        _l.r0 = ri + _l.rp;\n        // r1 := r0 + slope *T # what interest rate would be at t1 ignoring lower bound\n        _l.r1 = _l.r0 + _l.slope * _l.T;\n\n        // Calculating the compound interest\n\n        if (_l.r0 >= _l.rlin && _l.r1 >= _l.rlin) {\n            // lower bound isn’t activated\n            // rcomp := exp (( r0 + r1) * T / 2) - 1\n            _l.x = (_l.r0 + _l.r1) * _l.T / 2;\n        } else if (_l.r0 < _l.rlin && _l.r1 < _l.rlin) {\n            // lower bound is active during the whole time\n            // rcomp := exp( rlin * T) - 1\n            _l.x = _l.rlin * _l.T;\n        } else if (_l.r0 >= _l.rlin && _l.r1 < _l.rlin) {\n            // lower bound is active after some time\n            // rcomp := exp( rlin *T - (r0 - rlin )^2/ slope /2) - 1\n            _l.x = _l.rlin * _l.T - (_l.r0 - _l.rlin)**2 / _l.slope / 2;\n        } else {\n            // lower bound is active before some time\n            // rcomp := exp( rlin *T + (r1 - rlin )^2/ slope /2) - 1\n            _l.x = _l.rlin * _l.T + (_l.r1 - _l.rlin)**2 / _l.slope / 2;\n        }\n\n        // ri := max(ri + slopei * T, rlin )\n        ri = _max(ri + _l.slopei * _l.T, _l.rlin);\n\n        // Checking for the overflow below. In case of the overflow, ri and Tcrit will be set back to zeros. Rcomp is\n        // calculated to not make an overflow in totalBorrowedAmount, totalDeposits.\n        (rcomp, overflow) = _calculateRComp(_totalDeposits, _totalBorrowAmount, _l.x);\n\n        if (overflow) {\n            ri = 0;\n            Tcrit = 0;\n        }\n    }\n\n    /// @dev set config for silo and asset\n    function _setConfig(address _silo, address _asset, Config memory _config) internal {\n        int256 _DP = int256(DP);\n\n        if (_config.uopt <= 0 || _config.uopt >= _DP) revert InvalidUopt();\n        if (_config.ucrit <= _config.uopt || _config.ucrit >= _DP) revert InvalidUcrit();\n        if (_config.ulow <= 0 || _config.ulow >= _config.uopt) revert InvalidUlow();\n        if (_config.ki <= 0) revert InvalidKi();\n        if (_config.kcrit <= 0) revert InvalidKcrit();\n        if (_config.klow < 0) revert InvalidKlow();\n        if (_config.klin < 0) revert InvalidKlin();\n        if (_config.beta < 0) revert InvalidBeta();\n        if (_config.ri < 0) revert InvalidRi();\n        if (_config.Tcrit < 0) revert InvalidTcrit();\n\n        config[_silo][_asset] = _config;\n        emit ConfigUpdate(_silo, _asset, _config);\n    }\n\n    /* solhint-enable */\n\n    /// @dev checks for the overflow in rcomp calculations, accruedInterest, totalDeposits and totalBorrowedAmount.\n    /// In case of the overflow, rcomp is reduced to make totalDeposits and totalBorrowedAmount <= 2**196.\n    function _calculateRComp(\n        uint256 _totalDeposits,\n        uint256 _totalBorrowAmount,\n        int256 _x\n    ) internal pure returns (uint256 rcomp, bool overflow) {\n        int256 rcompSigned;\n\n        if (_x >= X_MAX) {\n            rcomp = RCOMP_MAX;\n            // overflow, but not return now. It counts as an overflow to reset model parameters,\n            // but later on we can get overflow worse.\n            overflow = true;\n        } else {\n            rcompSigned = _x.exp() - int256(DP);\n            rcomp = rcompSigned > 0 ? rcompSigned.toUint256() : 0;\n        }\n\n        unchecked {\n            // maxAmount = max(_totalDeposits, _totalBorrowAmount) to see\n            // if any of this variables overflow in result.\n            uint256 maxAmount = _totalDeposits > _totalBorrowAmount ? _totalDeposits : _totalBorrowAmount;\n\n            if (maxAmount >= ASSET_DATA_OVERFLOW_LIMIT) {\n                return (0, true);\n            }\n\n            uint256 rcompMulTBA = rcomp * _totalBorrowAmount;\n\n            if (rcompMulTBA == 0) {\n                return (rcomp, overflow);\n            }\n\n            if (\n                rcompMulTBA / rcomp != _totalBorrowAmount ||\n                rcompMulTBA / DP > ASSET_DATA_OVERFLOW_LIMIT - maxAmount\n            ) {\n                rcomp = (ASSET_DATA_OVERFLOW_LIMIT - maxAmount) * DP / _totalBorrowAmount;\n\n                return (rcomp, true);\n            }\n        }\n    }\n\n    /// @dev Returns the largest of two numbers\n    function _max(int256 a, int256 b) internal pure returns (int256) {\n        return a > b ? a : b;\n    }\n\n    /// @dev Returns the smallest of two numbers\n    function _min(int256 a, int256 b) internal pure returns (int256) {\n        return a < b ? a : b;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/math/SafeCast.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/math/SafeCast.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\n * checks.\n *\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\n * easily result in undesired exploitation or bugs, since developers usually\n * assume that overflows raise errors. `SafeCast` restores this intuition by\n * reverting the transaction when such an operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n *\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\n * all math on `uint256` and `int256` and then downcasting.\n */\nlibrary SafeCast {\n    /**\n     * @dev Returns the downcasted uint224 from uint256, reverting on\n     * overflow (when the input is greater than largest uint224).\n     *\n     * Counterpart to Solidity's `uint224` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 224 bits\n     */\n    function toUint224(uint256 value) internal pure returns (uint224) {\n        require(value <= type(uint224).max, \"SafeCast: value doesn't fit in 224 bits\");\n        return uint224(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint128 from uint256, reverting on\n     * overflow (when the input is greater than largest uint128).\n     *\n     * Counterpart to Solidity's `uint128` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 128 bits\n     */\n    function toUint128(uint256 value) internal pure returns (uint128) {\n        require(value <= type(uint128).max, \"SafeCast: value doesn't fit in 128 bits\");\n        return uint128(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint96 from uint256, reverting on\n     * overflow (when the input is greater than largest uint96).\n     *\n     * Counterpart to Solidity's `uint96` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 96 bits\n     */\n    function toUint96(uint256 value) internal pure returns (uint96) {\n        require(value <= type(uint96).max, \"SafeCast: value doesn't fit in 96 bits\");\n        return uint96(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint64 from uint256, reverting on\n     * overflow (when the input is greater than largest uint64).\n     *\n     * Counterpart to Solidity's `uint64` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 64 bits\n     */\n    function toUint64(uint256 value) internal pure returns (uint64) {\n        require(value <= type(uint64).max, \"SafeCast: value doesn't fit in 64 bits\");\n        return uint64(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint32 from uint256, reverting on\n     * overflow (when the input is greater than largest uint32).\n     *\n     * Counterpart to Solidity's `uint32` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 32 bits\n     */\n    function toUint32(uint256 value) internal pure returns (uint32) {\n        require(value <= type(uint32).max, \"SafeCast: value doesn't fit in 32 bits\");\n        return uint32(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint16 from uint256, reverting on\n     * overflow (when the input is greater than largest uint16).\n     *\n     * Counterpart to Solidity's `uint16` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 16 bits\n     */\n    function toUint16(uint256 value) internal pure returns (uint16) {\n        require(value <= type(uint16).max, \"SafeCast: value doesn't fit in 16 bits\");\n        return uint16(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint8 from uint256, reverting on\n     * overflow (when the input is greater than largest uint8).\n     *\n     * Counterpart to Solidity's `uint8` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 8 bits.\n     */\n    function toUint8(uint256 value) internal pure returns (uint8) {\n        require(value <= type(uint8).max, \"SafeCast: value doesn't fit in 8 bits\");\n        return uint8(value);\n    }\n\n    /**\n     * @dev Converts a signed int256 into an unsigned uint256.\n     *\n     * Requirements:\n     *\n     * - input must be greater than or equal to 0.\n     */\n    function toUint256(int256 value) internal pure returns (uint256) {\n        require(value >= 0, \"SafeCast: value must be positive\");\n        return uint256(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int128 from int256, reverting on\n     * overflow (when the input is less than smallest int128 or\n     * greater than largest int128).\n     *\n     * Counterpart to Solidity's `int128` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 128 bits\n     *\n     * _Available since v3.1._\n     */\n    function toInt128(int256 value) internal pure returns (int128) {\n        require(value >= type(int128).min && value <= type(int128).max, \"SafeCast: value doesn't fit in 128 bits\");\n        return int128(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int64 from int256, reverting on\n     * overflow (when the input is less than smallest int64 or\n     * greater than largest int64).\n     *\n     * Counterpart to Solidity's `int64` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 64 bits\n     *\n     * _Available since v3.1._\n     */\n    function toInt64(int256 value) internal pure returns (int64) {\n        require(value >= type(int64).min && value <= type(int64).max, \"SafeCast: value doesn't fit in 64 bits\");\n        return int64(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int32 from int256, reverting on\n     * overflow (when the input is less than smallest int32 or\n     * greater than largest int32).\n     *\n     * Counterpart to Solidity's `int32` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 32 bits\n     *\n     * _Available since v3.1._\n     */\n    function toInt32(int256 value) internal pure returns (int32) {\n        require(value >= type(int32).min && value <= type(int32).max, \"SafeCast: value doesn't fit in 32 bits\");\n        return int32(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int16 from int256, reverting on\n     * overflow (when the input is less than smallest int16 or\n     * greater than largest int16).\n     *\n     * Counterpart to Solidity's `int16` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 16 bits\n     *\n     * _Available since v3.1._\n     */\n    function toInt16(int256 value) internal pure returns (int16) {\n        require(value >= type(int16).min && value <= type(int16).max, \"SafeCast: value doesn't fit in 16 bits\");\n        return int16(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int8 from int256, reverting on\n     * overflow (when the input is less than smallest int8 or\n     * greater than largest int8).\n     *\n     * Counterpart to Solidity's `int8` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 8 bits.\n     *\n     * _Available since v3.1._\n     */\n    function toInt8(int256 value) internal pure returns (int8) {\n        require(value >= type(int8).min && value <= type(int8).max, \"SafeCast: value doesn't fit in 8 bits\");\n        return int8(value);\n    }\n\n    /**\n     * @dev Converts an unsigned uint256 into a signed int256.\n     *\n     * Requirements:\n     *\n     * - input must be less than or equal to maxInt256.\n     */\n    function toInt256(uint256 value) internal pure returns (int256) {\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\n        require(value <= uint256(type(int256).max), \"SafeCast: value doesn't fit in an int256\");\n        return int256(value);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/math/Math.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/math/Math.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a >= b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds up instead\n     * of rounding down.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a / b + (a % b == 0 ? 0 : 1);\n    }\n}\n"
    },
    "contracts/lib/PRBMathSD59x18.sol": {
      "content": "// SPDX-License-Identifier: Unlicense\npragma solidity 0.8.13;\n\nimport \"./PRBMathCommon.sol\";\n\n/* solhint-disable */\n/// @title PRBMathSD59x18\n/// @author Paul Razvan Berg\n/// @notice Smart contract library for advanced fixed-point math. It works with int256 numbers considered to have 18\n/// trailing decimals. We call this number representation signed 59.18-decimal fixed-point, since the numbers can have\n/// a sign and there can be up to 59 digits in the integer part and up to 18 decimals in the fractional part. The numbers\n/// are bound by the minimum and the maximum values permitted by the Solidity type int256.\nlibrary PRBMathSD59x18 {\n    /// @dev log2(e) as a signed 59.18-decimal fixed-point number.\n    int256 internal constant LOG2_E = 1442695040888963407;\n\n    /// @dev Half the SCALE number.\n    int256 internal constant HALF_SCALE = 5e17;\n\n    /// @dev The maximum value a signed 59.18-decimal fixed-point number can have.\n    int256 internal constant MAX_SD59x18 = 57896044618658097711785492504343953926634992332820282019728792003956564819967;\n\n    /// @dev How many trailing decimals can be represented.\n    int256 internal constant SCALE = 1e18;\n\n    /// INTERNAL FUNCTIONS ///\n\n\n    /// @notice Calculates the natural exponent of x.\n    ///\n    /// @dev Based on the insight that e^x = 2^(x * log2(e)).\n    ///\n    /// Requirements:\n    /// - All from \"log2\".\n    /// - x must be less than 88722839111672999628.\n    ///\n    /// @param x The exponent as a signed 59.18-decimal fixed-point number.\n    /// @return result The result as a signed 59.18-decimal fixed-point number.\n    function exp(int256 x) internal pure returns (int256 result) {\n        // Without this check, the value passed to \"exp2\" would be less than -59794705707972522261.\n        if (x < -41446531673892822322) {\n            return 0;\n        }\n\n        // Without this check, the value passed to \"exp2\" would be greater than 128e18.\n        require(x < 88722839111672999628);\n\n        // Do the fixed-point multiplication inline to save gas.\n        unchecked {\n            int256 doubleScaleProduct = x * LOG2_E;\n            result = exp2((doubleScaleProduct + HALF_SCALE) / SCALE);\n        }\n    }\n\n    /// @notice Calculates the binary exponent of x using the binary fraction method.\n    ///\n    /// @dev See https://ethereum.stackexchange.com/q/79903/24693.\n    ///\n    /// Requirements:\n    /// - x must be 128e18 or less.\n    /// - The result must fit within MAX_SD59x18.\n    ///\n    /// Caveats:\n    /// - For any x less than -59794705707972522261, the result is zero.\n    ///\n    /// @param x The exponent as a signed 59.18-decimal fixed-point number.\n    /// @return result The result as a signed 59.18-decimal fixed-point number.\n    function exp2(int256 x) internal pure returns (int256 result) {\n        // This works because 2^-x = 1/2^x.\n        if (x < 0) {\n            // 2**59.794705707972522262 is the maximum number whose inverse does not equal zero.\n            if (x < -59794705707972522261) {\n                return 0;\n            }\n\n            // Do the fixed-point inversion inline to save gas. The numerator is SCALE * SCALE.\n            unchecked { result = 1e36 / exp2(-x); }\n            return result;\n        } else {\n            // 2**128 doesn't fit within the 128.128-bit fixed-point representation.\n            require(x < 128e18);\n\n            unchecked {\n                // Convert x to the 128.128-bit fixed-point format.\n                uint256 x128x128 = (uint256(x) << 128) / uint256(SCALE);\n\n                // Safe to convert the result to int256 directly because the maximum input allowed is 128e18.\n                result = int256(PRBMathCommon.exp2(x128x128));\n            }\n        }\n    }\n}\n/* solhint-enable */\n"
    },
    "contracts/lib/PRBMathCommon.sol": {
      "content": "// SPDX-License-Identifier: Unlicense\npragma solidity 0.8.13;\n\n/* solhint-disable */\n/// @dev Common mathematical functions used in both PRBMathSD59x18 and PRBMathUD60x18. Note that this shared library\n/// does not always assume the signed 59.18-decimal fixed-point or the unsigned 60.18-decimal fixed-point\n// representation. When it does not, it is annonated in the function's NatSpec documentation.\n/// @author Paul Razvan Berg\nlibrary PRBMathCommon {\n    /// @dev How many trailing decimals can be represented.\n    uint256 internal constant SCALE = 1e18;\n\n    /// @notice Calculates the binary exponent of x using the binary fraction method.\n    /// @dev Uses 128.128-bit fixed-point numbers - it is the most efficient way.\n    /// @param x The exponent as an unsigned 128.128-bit fixed-point number.\n    /// @return result The result as an unsigned 60x18 decimal fixed-point number.\n    function exp2(uint256 x) internal pure returns (uint256 result) {\n        unchecked {\n            // Start from 0.5 in the 128.128-bit fixed-point format. We need to use uint256 because the intermediary\n            // may get very close to 2^256, which doesn't fit in int256.\n            result = 0x80000000000000000000000000000000;\n\n            // Multiply the result by root(2, 2^-i) when the bit at position i is 1. None of the intermediary results overflows\n            // because the initial result is 2^127 and all magic factors are less than 2^129.\n            if (x & 0x80000000000000000000000000000000 > 0) result = (result * 0x16A09E667F3BCC908B2FB1366EA957D3E) >> 128;\n            if (x & 0x40000000000000000000000000000000 > 0) result = (result * 0x1306FE0A31B7152DE8D5A46305C85EDED) >> 128;\n            if (x & 0x20000000000000000000000000000000 > 0) result = (result * 0x1172B83C7D517ADCDF7C8C50EB14A7920) >> 128;\n            if (x & 0x10000000000000000000000000000000 > 0) result = (result * 0x10B5586CF9890F6298B92B71842A98364) >> 128;\n            if (x & 0x8000000000000000000000000000000 > 0) result = (result * 0x1059B0D31585743AE7C548EB68CA417FE) >> 128;\n            if (x & 0x4000000000000000000000000000000 > 0) result = (result * 0x102C9A3E778060EE6F7CACA4F7A29BDE9) >> 128;\n            if (x & 0x2000000000000000000000000000000 > 0) result = (result * 0x10163DA9FB33356D84A66AE336DCDFA40) >> 128;\n            if (x & 0x1000000000000000000000000000000 > 0) result = (result * 0x100B1AFA5ABCBED6129AB13EC11DC9544) >> 128;\n            if (x & 0x800000000000000000000000000000 > 0) result = (result * 0x10058C86DA1C09EA1FF19D294CF2F679C) >> 128;\n            if (x & 0x400000000000000000000000000000 > 0) result = (result * 0x1002C605E2E8CEC506D21BFC89A23A011) >> 128;\n            if (x & 0x200000000000000000000000000000 > 0) result = (result * 0x100162F3904051FA128BCA9C55C31E5E0) >> 128;\n            if (x & 0x100000000000000000000000000000 > 0) result = (result * 0x1000B175EFFDC76BA38E31671CA939726) >> 128;\n            if (x & 0x80000000000000000000000000000 > 0) result = (result * 0x100058BA01FB9F96D6CACD4B180917C3E) >> 128;\n            if (x & 0x40000000000000000000000000000 > 0) result = (result * 0x10002C5CC37DA9491D0985C348C68E7B4) >> 128;\n            if (x & 0x20000000000000000000000000000 > 0) result = (result * 0x1000162E525EE054754457D5995292027) >> 128;\n            if (x & 0x10000000000000000000000000000 > 0) result = (result * 0x10000B17255775C040618BF4A4ADE83FD) >> 128;\n            if (x & 0x8000000000000000000000000000 > 0) result = (result * 0x1000058B91B5BC9AE2EED81E9B7D4CFAC) >> 128;\n            if (x & 0x4000000000000000000000000000 > 0) result = (result * 0x100002C5C89D5EC6CA4D7C8ACC017B7CA) >> 128;\n            if (x & 0x2000000000000000000000000000 > 0) result = (result * 0x10000162E43F4F831060E02D839A9D16D) >> 128;\n            if (x & 0x1000000000000000000000000000 > 0) result = (result * 0x100000B1721BCFC99D9F890EA06911763) >> 128;\n            if (x & 0x800000000000000000000000000 > 0) result = (result * 0x10000058B90CF1E6D97F9CA14DBCC1629) >> 128;\n            if (x & 0x400000000000000000000000000 > 0) result = (result * 0x1000002C5C863B73F016468F6BAC5CA2C) >> 128;\n            if (x & 0x200000000000000000000000000 > 0) result = (result * 0x100000162E430E5A18F6119E3C02282A6) >> 128;\n            if (x & 0x100000000000000000000000000 > 0) result = (result * 0x1000000B1721835514B86E6D96EFD1BFF) >> 128;\n            if (x & 0x80000000000000000000000000 > 0) result = (result * 0x100000058B90C0B48C6BE5DF846C5B2F0) >> 128;\n            if (x & 0x40000000000000000000000000 > 0) result = (result * 0x10000002C5C8601CC6B9E94213C72737B) >> 128;\n            if (x & 0x20000000000000000000000000 > 0) result = (result * 0x1000000162E42FFF037DF38AA2B219F07) >> 128;\n            if (x & 0x10000000000000000000000000 > 0) result = (result * 0x10000000B17217FBA9C739AA5819F44FA) >> 128;\n            if (x & 0x8000000000000000000000000 > 0) result = (result * 0x1000000058B90BFCDEE5ACD3C1CEDC824) >> 128;\n            if (x & 0x4000000000000000000000000 > 0) result = (result * 0x100000002C5C85FE31F35A6A30DA1BE51) >> 128;\n            if (x & 0x2000000000000000000000000 > 0) result = (result * 0x10000000162E42FF0999CE3541B9FFFD0) >> 128;\n            if (x & 0x1000000000000000000000000 > 0) result = (result * 0x100000000B17217F80F4EF5AADDA45554) >> 128;\n            if (x & 0x800000000000000000000000 > 0) result = (result * 0x10000000058B90BFBF8479BD5A81B51AE) >> 128;\n            if (x & 0x400000000000000000000000 > 0) result = (result * 0x1000000002C5C85FDF84BD62AE30A74CD) >> 128;\n            if (x & 0x200000000000000000000000 > 0) result = (result * 0x100000000162E42FEFB2FED257559BDAA) >> 128;\n            if (x & 0x100000000000000000000000 > 0) result = (result * 0x1000000000B17217F7D5A7716BBA4A9AF) >> 128;\n            if (x & 0x80000000000000000000000 > 0) result = (result * 0x100000000058B90BFBE9DDBAC5E109CCF) >> 128;\n            if (x & 0x40000000000000000000000 > 0) result = (result * 0x10000000002C5C85FDF4B15DE6F17EB0E) >> 128;\n            if (x & 0x20000000000000000000000 > 0) result = (result * 0x1000000000162E42FEFA494F1478FDE05) >> 128;\n            if (x & 0x10000000000000000000000 > 0) result = (result * 0x10000000000B17217F7D20CF927C8E94D) >> 128;\n            if (x & 0x8000000000000000000000 > 0) result = (result * 0x1000000000058B90BFBE8F71CB4E4B33E) >> 128;\n            if (x & 0x4000000000000000000000 > 0) result = (result * 0x100000000002C5C85FDF477B662B26946) >> 128;\n            if (x & 0x2000000000000000000000 > 0) result = (result * 0x10000000000162E42FEFA3AE53369388D) >> 128;\n            if (x & 0x1000000000000000000000 > 0) result = (result * 0x100000000000B17217F7D1D351A389D41) >> 128;\n            if (x & 0x800000000000000000000 > 0) result = (result * 0x10000000000058B90BFBE8E8B2D3D4EDF) >> 128;\n            if (x & 0x400000000000000000000 > 0) result = (result * 0x1000000000002C5C85FDF4741BEA6E77F) >> 128;\n            if (x & 0x200000000000000000000 > 0) result = (result * 0x100000000000162E42FEFA39FE95583C3) >> 128;\n            if (x & 0x100000000000000000000 > 0) result = (result * 0x1000000000000B17217F7D1CFB72B45E3) >> 128;\n            if (x & 0x80000000000000000000 > 0) result = (result * 0x100000000000058B90BFBE8E7CC35C3F2) >> 128;\n            if (x & 0x40000000000000000000 > 0) result = (result * 0x10000000000002C5C85FDF473E242EA39) >> 128;\n            if (x & 0x20000000000000000000 > 0) result = (result * 0x1000000000000162E42FEFA39F02B772C) >> 128;\n            if (x & 0x10000000000000000000 > 0) result = (result * 0x10000000000000B17217F7D1CF7D83C1A) >> 128;\n            if (x & 0x8000000000000000000 > 0) result = (result * 0x1000000000000058B90BFBE8E7BDCBE2E) >> 128;\n            if (x & 0x4000000000000000000 > 0) result = (result * 0x100000000000002C5C85FDF473DEA871F) >> 128;\n            if (x & 0x2000000000000000000 > 0) result = (result * 0x10000000000000162E42FEFA39EF44D92) >> 128;\n            if (x & 0x1000000000000000000 > 0) result = (result * 0x100000000000000B17217F7D1CF79E949) >> 128;\n            if (x & 0x800000000000000000 > 0) result = (result * 0x10000000000000058B90BFBE8E7BCE545) >> 128;\n            if (x & 0x400000000000000000 > 0) result = (result * 0x1000000000000002C5C85FDF473DE6ECA) >> 128;\n            if (x & 0x200000000000000000 > 0) result = (result * 0x100000000000000162E42FEFA39EF366F) >> 128;\n            if (x & 0x100000000000000000 > 0) result = (result * 0x1000000000000000B17217F7D1CF79AFA) >> 128;\n            if (x & 0x80000000000000000 > 0) result = (result * 0x100000000000000058B90BFBE8E7BCD6E) >> 128;\n            if (x & 0x40000000000000000 > 0) result = (result * 0x10000000000000002C5C85FDF473DE6B3) >> 128;\n            if (x & 0x20000000000000000 > 0) result = (result * 0x1000000000000000162E42FEFA39EF359) >> 128;\n            if (x & 0x10000000000000000 > 0) result = (result * 0x10000000000000000B17217F7D1CF79AC) >> 128;\n\n            // Multiply the result by the integer part 2^n + 1. We have to shift by one bit extra because we have already divided\n            // by two when we set the result equal to 0.5 above.\n            result = result << ((x >> 128) + 1);\n\n            // Convert the result to the signed 60.18-decimal fixed-point format.\n            result = PRBMathCommon.mulDiv(result, 1e18, 2**128);\n        }\n    }\n\n    /// @notice Calculates floor(x*y÷denominator) with full precision.\n    ///\n    /// @dev Credit to Remco Bloemen under MIT license https://xn--2-umb.com/21/muldiv.\n    ///\n    /// Requirements:\n    /// - The denominator cannot be zero.\n    /// - The result must fit within uint256.\n    ///\n    /// Caveats:\n    /// - This function does not work with fixed-point numbers.\n    ///\n    /// @param x The multiplicand as an uint256.\n    /// @param y The multiplier as an uint256.\n    /// @param denominator The divisor as an uint256.\n    /// @return result The result as an uint256.\n    function mulDiv(\n        uint256 x,\n        uint256 y,\n        uint256 denominator\n    ) internal pure returns (uint256 result) {\n        // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2**256 and mod 2**256 - 1, then use\n        // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n        // variables such that product = prod1 * 2**256 + prod0.\n        uint256 prod0; // Least significant 256 bits of the product\n        uint256 prod1; // Most significant 256 bits of the product\n        assembly {\n            let mm := mulmod(x, y, not(0))\n            prod0 := mul(x, y)\n            prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n        }\n\n        // Handle non-overflow cases, 256 by 256 division\n        if (prod1 == 0) {\n            require(denominator > 0);\n            assembly {\n                result := div(prod0, denominator)\n            }\n            return result;\n        }\n\n        // Make sure the result is less than 2**256. Also prevents denominator == 0.\n        require(denominator > prod1);\n\n        ///////////////////////////////////////////////\n        // 512 by 256 division.\n        ///////////////////////////////////////////////\n\n        // Make division exact by subtracting the remainder from [prod1 prod0].\n        uint256 remainder;\n        assembly {\n            // Compute remainder using mulmod.\n            remainder := mulmod(x, y, denominator)\n\n            // Subtract 256 bit number from 512 bit number\n            prod1 := sub(prod1, gt(remainder, prod0))\n            prod0 := sub(prod0, remainder)\n        }\n\n        // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\n        // See https://cs.stackexchange.com/q/138556/92363.\n        unchecked {\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\n            uint256 lpotdod = denominator & (~denominator + 1);\n            assembly {\n                // Divide denominator by lpotdod.\n                denominator := div(denominator, lpotdod)\n\n                // Divide [prod1 prod0] by lpotdod.\n                prod0 := div(prod0, lpotdod)\n\n                // Flip lpotdod such that it is 2**256 / lpotdod. If lpotdod is zero, then it becomes one.\n                lpotdod := add(div(sub(0, lpotdod), lpotdod), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * lpotdod;\n\n            // Invert denominator mod 2**256. Now that denominator is an odd number, it has an inverse modulo 2**256 such\n            // that denominator * inv = 1 mod 2**256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2**4\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Now use Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\n            // in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2**8\n            inverse *= 2 - denominator * inverse; // inverse mod 2**16\n            inverse *= 2 - denominator * inverse; // inverse mod 2**32\n            inverse *= 2 - denominator * inverse; // inverse mod 2**64\n            inverse *= 2 - denominator * inverse; // inverse mod 2**128\n            inverse *= 2 - denominator * inverse; // inverse mod 2**256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2**256. Since the precoditions guarantee that the outcome is\n            // less than 2**256, this is the final result. We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n}\n/* solhint-enable */\n"
    },
    "contracts/PriceProvidersRepository.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity 0.8.13;\n\nimport \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\n\nimport \"./interfaces/IPriceProvidersRepository.sol\";\nimport \"./interfaces/ISiloRepository.sol\";\nimport \"./utils/Manageable.sol\";\nimport \"./utils/TwoStepOwnable.sol\";\n\nimport \"./lib/TokenHelper.sol\";\nimport \"./lib/Ping.sol\";\n\n/// @title PriceProvidersRepository\n/// @notice A repository of price providers. It manages price providers as well as maps assets to their price\n/// provider. It acts as a entry point for Silo for token prices.\n/// @custom:security-contact security@silo.finance\ncontract PriceProvidersRepository is IPriceProvidersRepository, Manageable, TwoStepOwnable {\n    using EnumerableSet for EnumerableSet.AddressSet;\n\n    /// @dev we require quote token to have 18 decimals\n    uint256 public constant QUOTE_TOKEN_DECIMALS = 18;\n\n    /// @dev Constant used for prices' decimal points, 1e18 is treated as 1\n    uint256 private constant _ONE = 1e18;\n\n    /// @notice SiloRepository contract address\n    address public immutable siloRepository;\n    /// @notice Token in which prices are quoted. It's most likely WETH, however it could vary from deployment\n    /// to deployment. For example 1 SILO costs X amount of quoteToken.\n    address public immutable override quoteToken;\n\n    /// @notice Maps asset address to its price provider\n    /// @dev Each asset must have a price provider contract assigned, otherwise it's not supported\n    mapping(address => IPriceProvider) public override priceProviders;\n\n    /// @notice Array of all price providers\n    EnumerableSet.AddressSet private _allProviders;\n\n    error AssetNotSupported();\n    error InvalidPriceProvider();\n    error InvalidPriceProviderQuoteToken();\n    error InvalidRepository();\n    error OnlyRepository();\n    error PriceProviderAlreadyExists();\n    error PriceProviderDoesNotExist();\n    error PriceProviderNotRegistered();\n    error QuoteTokenNotSupported();\n\n    modifier onlyRepository() {\n        if (msg.sender != siloRepository) revert OnlyRepository();\n        _;\n    }\n\n    /// @param _quoteToken address of quote token\n    /// @param _siloRepository address of SiloRepository\n    constructor(address _quoteToken, address _siloRepository) Manageable(msg.sender) {\n        if (TokenHelper.assertAndGetDecimals(_quoteToken) != QUOTE_TOKEN_DECIMALS) {\n          revert QuoteTokenNotSupported();\n        }\n\n        if (!Ping.pong(ISiloRepository(_siloRepository).siloRepositoryPing)) {\n            revert InvalidRepository();\n        }\n\n        siloRepository = _siloRepository;\n        quoteToken = _quoteToken;\n    }\n\n    /// @inheritdoc IPriceProvidersRepository\n    function addPriceProvider(IPriceProvider _provider) external override onlyOwner {\n        if (!Ping.pong(_provider.priceProviderPing)) revert InvalidPriceProvider();\n\n        if (_provider.quoteToken() != quoteToken) revert InvalidPriceProviderQuoteToken();\n\n        if (!_allProviders.add(address(_provider))) revert PriceProviderAlreadyExists();\n\n        emit NewPriceProvider(_provider);\n    }\n\n    /// @inheritdoc IPriceProvidersRepository\n    function removePriceProvider(IPriceProvider _provider) external virtual override onlyOwner {\n        if (!_allProviders.remove(address(_provider))) revert PriceProviderDoesNotExist();\n\n        emit PriceProviderRemoved(_provider);\n    }\n\n    /// @inheritdoc IPriceProvidersRepository\n    function setPriceProviderForAsset(address _asset, IPriceProvider _provider) external virtual override onlyManager {\n        if (!_allProviders.contains(address(_provider))) {\n            revert PriceProviderNotRegistered();\n        }\n\n        if (!_provider.assetSupported(_asset)) revert AssetNotSupported();\n\n        emit PriceProviderForAsset(_asset, _provider);\n        priceProviders[_asset] = _provider;\n    }\n\n    /// @inheritdoc IPriceProvidersRepository\n    function isPriceProvider(IPriceProvider _provider) external view override returns (bool) {\n        return _allProviders.contains(address(_provider));\n    }\n\n    /// @inheritdoc IPriceProvidersRepository\n    function providersCount() external view override returns (uint256) {\n        return _allProviders.length();\n    }\n\n    /// @inheritdoc IPriceProvidersRepository\n    function providerList() external view override returns (address[] memory) {\n        return _allProviders.values();\n    }\n\n    /// @inheritdoc IPriceProvidersRepository\n    function providersReadyForAsset(address _asset) external view override returns (bool) {\n        // quote token is supported by default because getPrice() returns _ONE as its price by default\n        if (_asset == quoteToken) return true;\n\n        IPriceProvider priceProvider = priceProviders[_asset];\n        if (address(priceProvider) == address(0)) return false;\n\n        return priceProvider.assetSupported(_asset);\n    }\n\n    /// @inheritdoc IPriceProvidersRepository\n    function priceProvidersRepositoryPing() external pure override returns (bytes4) {\n        return this.priceProvidersRepositoryPing.selector;\n    }\n\n    /// @inheritdoc IPriceProvidersRepository\n    function manager() public view override(Manageable, IPriceProvidersRepository) returns (address) {\n        return Manageable.manager();\n    }\n\n    /// @inheritdoc TwoStepOwnable\n    function owner() public view override(Manageable, TwoStepOwnable) returns (address) {\n        return TwoStepOwnable.owner();\n    }\n\n    /// @inheritdoc IPriceProvidersRepository\n    function getPrice(address _asset) public view override virtual returns (uint256) {\n        if (_asset == quoteToken) return _ONE;\n\n        if (address(priceProviders[_asset]) == address(0)) revert AssetNotSupported();\n\n        return priceProviders[_asset].getPrice(_asset);\n    }\n}\n"
    },
    "contracts/mock/TestTokenHelper.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity 0.8.13;\n\nimport \"../lib/TokenHelper.sol\";\n\ninterface ERC20Bytes32Symbol {\n    function symbol() external view returns(bytes32);\n}\n\n/// @dev this is MOCK contract - DO NOT USE IT!\ncontract TestTokenHelper {\n    function symbol(address _token) external view returns (string memory) {\n        return TokenHelper.symbol(_token);\n    }\n}\n"
    },
    "contracts/utils/ShareToken.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity 0.8.13;\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\n\nimport \"../interfaces/ISilo.sol\";\nimport \"../interfaces/IBaseSilo.sol\";\nimport \"../interfaces/IShareToken.sol\";\nimport \"../interfaces/INotificationReceiver.sol\";\n\n\n/// @title ShareToken\n/// @notice Implements common interface for Silo tokens representing debt or collateral positions.\n/// @custom:security-contact security@silo.finance\nabstract contract ShareToken is ERC20, IShareToken {\n    /// @dev minimal share amount will give us higher precision for shares calculation,\n    /// that way losses caused by division will be reduced to acceptable level\n    uint256 public constant MINIMUM_SHARE_AMOUNT = 1e5;\n\n    /// @notice Silo address for which tokens was deployed\n    ISilo public immutable silo;\n\n    /// @notice asset for which this tokens was deployed\n    address public immutable asset;\n\n    /// @dev decimals that match the original asset decimals\n    uint8 internal immutable _decimals;\n\n    error OnlySilo();\n    error MinimumShareRequirement();\n\n    modifier onlySilo {\n        if (msg.sender != address(silo)) revert OnlySilo();\n\n        _;\n    }\n\n    /// @dev Token is always deployed for specific Silo and asset\n    /// @param _silo Silo address for which tokens was deployed\n    /// @param _asset asset for which this tokens was deployed\n    constructor(address _silo, address _asset) {\n        silo = ISilo(_silo);\n        asset = _asset;\n        _decimals = IERC20Metadata(_asset).decimals();\n    }\n\n    /// @inheritdoc IShareToken\n    function mint(address _account, uint256 _amount) external onlySilo override {\n        _mint(_account, _amount);\n    }\n\n    /// @inheritdoc IShareToken\n    function burn(address _account, uint256 _amount) external onlySilo override {\n        _burn(_account, _amount);\n    }\n\n    /// @inheritdoc IERC20Metadata\n    function symbol() public view virtual override(IERC20Metadata, ERC20) returns (string memory) {\n        return ERC20.symbol();\n    }\n\n    /// @return decimals that match original asset decimals\n    function decimals() public view virtual override(IERC20Metadata, ERC20) returns (uint8) {\n        return _decimals;\n    }\n\n    function _afterTokenTransfer(address _sender, address _recipient, uint256) internal override virtual {\n        // fixing precision error on mint and burn\n        if (_isTransfer(_sender, _recipient)) {\n            return;\n        }\n\n        uint256 total = totalSupply();\n        // we require minimum amount to be present from first mint\n        // and after burning, we do not allow for small leftover\n        if (total != 0 && total < MINIMUM_SHARE_AMOUNT) revert MinimumShareRequirement();\n    }\n\n    /// @dev Report token transfer to incentive contract if one is set\n    /// @param _from sender\n    /// @param _to recipient\n    /// @param _amount amount that was transferred\n    function _notifyAboutTransfer(address _from, address _to, uint256 _amount) internal {\n        INotificationReceiver notificationReceiver =\n            IBaseSilo(silo).siloRepository().getNotificationReceiver(address(silo));\n\n        if (address(notificationReceiver) != address(0)) {\n            // solhint-disable-next-line avoid-low-level-calls\n            (bool success,) = address(notificationReceiver).call(\n                abi.encodeWithSelector(\n                    INotificationReceiver.onAfterTransfer.selector,\n                    address(this),\n                    _from,\n                    _to,\n                    _amount\n                )\n            );\n\n            emit NotificationSent(notificationReceiver, success);\n        }\n    }\n\n    /// @dev checks if operation is \"real\" transfer\n    /// @param _sender sender address\n    /// @param _recipient recipient address\n    /// @return bool true if operation is real transfer, false if it is mint or burn\n    function _isTransfer(address _sender, address _recipient) internal pure returns (bool) {\n        // in order this check to be true, is is required to have:\n        // require(sender != address(0), \"ERC20: transfer from the zero address\");\n        // require(recipient != address(0), \"ERC20: transfer to the zero address\");\n        // on transfer. ERC20 has them, so we good.\n        return _sender != address(0) && _recipient != address(0);\n    }\n}\n"
    },
    "contracts/utils/ShareDebtToken.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity 0.8.13;\n\nimport \"../interfaces/IERC20R.sol\";\nimport \"../interfaces/ISilo.sol\";\n\nimport \"./ShareToken.sol\";\n\n/// @title ShareDebtToken\n/// @notice ERC20 compatible token representing debt position in Silo\n/// @dev It implements reversed approvals and checks solvency of recipient on transfer.\n///\n/// It is assumed that there is no attack vector on taking someone else's debt because we don't see\n/// economical reason why one would do such thing. For that reason anyone can transfer owner's token\n/// to any recipient as long as receiving wallet approves the transfer. In other words, anyone can\n/// take someone else's debt without asking.\n/// @custom:security-contact security@silo.finance\ncontract ShareDebtToken is IERC20R, ShareToken {\n    /// @dev maps _owner => _recipient => amount\n    mapping(address => mapping(address => uint256)) private _receiveAllowances;\n\n    error OwnerIsZero();\n    error RecipientIsZero();\n    error ShareTransferNotAllowed();\n    error AmountExceedsAllowance();\n    error RecipientNotSolventAfterTransfer();\n\n    constructor (\n        string memory _name,\n        string memory _symbol,\n        address _silo,\n        address _asset\n    ) ERC20(_name, _symbol) ShareToken(_silo, _asset) {\n        // all setup is done in parent contracts, nothing to do here\n    }\n\n    /// @inheritdoc IERC20R\n    function setReceiveApproval(address owner, uint256 _amount) external virtual override {\n        _setReceiveApproval(owner, _msgSender(), _amount);\n    }\n\n    /// @inheritdoc IERC20R\n    function decreaseReceiveAllowance(address _owner, uint256 _subtractedValue) public virtual override {\n        uint256 currentAllowance = _receiveAllowances[_owner][_msgSender()];\n        _setReceiveApproval(_owner, _msgSender(), currentAllowance - _subtractedValue);\n    }\n\n    /// @inheritdoc IERC20R\n    function increaseReceiveAllowance(address _owner, uint256 _addedValue) public virtual override {\n        uint256 currentAllowance = _receiveAllowances[_owner][_msgSender()];\n        _setReceiveApproval(_owner, _msgSender(), currentAllowance + _addedValue);\n    }\n\n    /// @inheritdoc IERC20R\n    function receiveAllowance(address _owner, address _recipient) public view virtual override returns (uint256) {\n        return _receiveAllowances[_owner][_recipient];\n    }\n\n    /// @dev Set allowance\n    /// @param _owner owner of debt token\n    /// @param _recipient wallet that allows `_owner` to send debt to its wallet\n    /// @param _amount amount of token allowed to be transferred\n    function _setReceiveApproval(\n        address _owner,\n        address _recipient,\n        uint256 _amount\n    ) internal virtual {\n        if (_owner == address(0)) revert OwnerIsZero();\n        if (_recipient == address(0)) revert RecipientIsZero();\n\n        _receiveAllowances[_owner][_recipient] = _amount;\n\n        emit ReceiveApproval(_owner, _recipient, _amount);\n    }\n\n    function _beforeTokenTransfer(address _sender, address _recipient, uint256 _amount) internal override {\n        // If we are minting or burning, Silo is responsible to check all necessary conditions\n        if (!_isTransfer(_sender, _recipient)) {\n            return;\n        }\n\n        // Silo forbids having debt and collateral position of the same asset in given Silo\n        if (!silo.borrowPossible(asset, _recipient)) revert ShareTransferNotAllowed();\n\n        // _recipient must approve debt transfer, _sender does not have to\n        uint256 currentAllowance = receiveAllowance(_sender, _recipient);\n        if (currentAllowance < _amount) revert AmountExceedsAllowance();\n\n        // There can't be an underflow in the subtraction because of the previous check\n        unchecked {\n            // update debt allowance\n            _setReceiveApproval(_sender, _recipient, currentAllowance - _amount);\n        }\n    }\n\n    function _afterTokenTransfer(address _sender, address _recipient, uint256 _amount) internal override {\n        ShareToken._afterTokenTransfer(_sender, _recipient, _amount);\n\n        // if we are minting or burning, Silo is responsible to check all necessary conditions\n        // if we are NOT minting and not burning, it means we are transferring\n        // make sure that _recipient is solvent after transfer\n        if (_isTransfer(_sender, _recipient) && !silo.isSolvent(_recipient)) {\n            revert RecipientNotSolventAfterTransfer();\n        }\n        \n        // report mint or transfer\n        _notifyAboutTransfer(_sender, _recipient, _amount);\n    }\n}\n"
    },
    "contracts/interfaces/IERC20R.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity 0.8.13;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\n/// @dev This interface stands for \"ERC20 Reversed\",\n/// in the sense that the recipient of a transfer needs to approve the transfer amount first\ninterface IERC20R is IERC20 {\n    /// @dev Emitted when the allowance of a `_receiver` for an `_owner` is set by\n    /// a call to {changeReceiveApproval}. `value` is the new allowance.\n    /// @param _owner previous owner of the debt\n    /// @param _receiver wallet that received debt\n    /// @param _value amount of token transferred\n    event ReceiveApproval(address indexed _owner, address indexed _receiver, uint256 _value);\n\n    /// @dev Atomically decreases the receive allowance granted to `owner` by the caller.\n    /// This is an alternative to {receive approve} that can be used as a mitigation for problems\n    /// described in {IERC20-approve}.\n    /// Emits an {ReceiveApproval} event indicating the updated receive allowance.\n    /// @param _owner owner of debt token that is being allowed sending it to the caller\n    /// @param _subtractedValue amount of token to decrease allowance\n    function decreaseReceiveAllowance(address _owner, uint256 _subtractedValue) external;\n\n    /// @dev Atomically increases the receive allowance granted to `owner` by the caller.\n    /// This is an alternative to {receive approve} that can be used as a mitigation for problems\n    /// described in {IERC20-approve}.\n    /// Emits an {ReceiveApproval} event indicating the updated receive allowance.\n    /// @param _owner owner of debt token that is being allowed sending it to the caller\n    /// @param _addedValue amount of token to increase allowance\n    function increaseReceiveAllowance(address _owner, uint256 _addedValue) external;\n\n    /// @dev Sets `_amount` as the allowance of `spender` over the caller's tokens.\n    /// Returns a boolean value indicating whether the operation succeeded.\n    /// IMPORTANT: Beware that changing an allowance with this method brings the risk\n    /// that someone may use both the old and the new allowance by unfortunate\n    /// transaction ordering. One possible solution to mitigate this race\n    /// condition is to first reduce the spender's allowance to 0 and set the\n    /// desired value afterwards:\n    /// https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n    /// OR use increase/decrease approval method instead.\n    /// Emits an {ReceiveApproval} event.\n    /// @param _owner owner of debt token that is being allowed sending it to the caller\n    /// @param _amount amount of token allowance\n    function setReceiveApproval(address _owner, uint256 _amount) external;\n\n    /// @dev Returns the remaining number of tokens that `_owner` is allowed to send to `_receiver`\n    /// through {transferFrom}. This is zero by default.\n    /// @param _owner owner of debt token\n    /// @param _receiver wallet that is receiving debt tokens\n    /// @return current token allowance\n    function receiveAllowance(address _owner, address _receiver) external view returns (uint256);\n}\n"
    },
    "contracts/utils/ShareCollateralToken.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity 0.8.13;\n\nimport \"./ShareToken.sol\";\nimport \"../interfaces/ISilo.sol\";\n\n/// @title ShareCollateralToken\n/// @notice ERC20 compatible token representing collateral position in Silo\n/// @custom:security-contact security@silo.finance\ncontract ShareCollateralToken is ShareToken {\n\n    error SenderNotSolventAfterTransfer();\n    error ShareTransferNotAllowed();\n\n    /// @dev Token is always deployed for specific Silo and asset\n    /// @param _name token name\n    /// @param _symbol token symbol\n    /// @param _silo Silo address for which tokens was deployed\n    /// @param _asset asset for which this tokens was deployed\n    constructor (\n        string memory _name,\n        string memory _symbol,\n        address _silo,\n        address _asset\n    ) ERC20(_name, _symbol) ShareToken(_silo, _asset) {\n        // all setup is done in parent contracts, nothing to do here\n    }\n\n    function _afterTokenTransfer(address _sender, address _recipient, uint256 _amount) internal override {\n        ShareToken._afterTokenTransfer(_sender, _recipient, _amount);\n\n        // if we minting or burning, Silo is responsible to check all necessary conditions\n        // make sure that _sender is solvent after transfer\n        if (_isTransfer(_sender, _recipient) && !silo.isSolvent(_sender)) {\n            revert SenderNotSolventAfterTransfer();\n        }\n\n        // report mint or transfer\n        _notifyAboutTransfer(_sender, _recipient, _amount);\n    }\n\n    function _beforeTokenTransfer(address _sender, address _recipient, uint256) internal view override {\n        // if we minting or burning, Silo is responsible to check all necessary conditions\n        if (!_isTransfer(_sender, _recipient)) {\n            return;\n        }\n\n        // Silo forbids having debt and collateral position of the same asset in given Silo\n        if (!silo.depositPossible(asset, _recipient)) revert ShareTransferNotAllowed();\n    }\n}\n"
    },
    "contracts/TokensFactory.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity 0.8.13;\n\nimport \"./utils/ShareCollateralToken.sol\";\nimport \"./utils/ShareDebtToken.sol\";\nimport \"./interfaces/ITokensFactory.sol\";\n\n/// @title TokensFactory\n/// @notice Deploys debt and collateral tokens for each Silo\n/// @custom:security-contact security@silo.finance\ncontract TokensFactory is ITokensFactory {\n    ISiloRepository public siloRepository;\n\n    event InitSiloRepository();\n\n    error OnlySilo();\n    error SiloRepositoryAlreadySet();\n\n    modifier onlySilo() {\n        if (!siloRepository.isSilo(msg.sender)) revert OnlySilo();\n        _;\n    }\n\n    /// @inheritdoc ITokensFactory\n    function initRepository(address _repository) external {\n        // We don't perform a ping to the repository because this is meant to be called in its constructor\n        if (address(siloRepository) != address(0)) revert SiloRepositoryAlreadySet();\n\n        siloRepository = ISiloRepository(_repository);\n        emit InitSiloRepository();\n    }\n\n    /// @inheritdoc ITokensFactory\n    function createShareCollateralToken(\n        string memory _name,\n        string memory _symbol,\n        address _asset\n    )\n        external\n        override\n        onlySilo\n        returns (IShareToken token)\n    {\n        token = new ShareCollateralToken(_name, _symbol, msg.sender, _asset);\n        emit NewShareCollateralTokenCreated(address(token));\n    }\n\n    /// @inheritdoc ITokensFactory\n    function createShareDebtToken(\n        string memory _name,\n        string memory _symbol,\n        address _asset\n    )\n        external\n        override\n        onlySilo\n        returns (IShareToken token)\n    {\n        token = new ShareDebtToken(_name, _symbol, msg.sender, _asset);\n        emit NewShareDebtTokenCreated(address(token));\n    }\n\n    function tokensFactoryPing() external pure override returns (bytes4) {\n        return this.tokensFactoryPing.selector;\n    }\n}\n"
    },
    "contracts/mock/Forwarder.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity 0.8.13;\n\nimport \"../interfaces/IFlashLiquidationReceiver.sol\";\nimport \"../interfaces/ISilo.sol\";\nimport \"../interfaces/IShareToken.sol\";\n\n/// @dev this is MOCK contract - DO NOT USE IT!\ncontract Forwarder {\n    address public debtToken;\n\n    function siloLiquidationCallback(\n        IFlashLiquidationReceiver _destination,\n        address _user,\n        address[] calldata _assets,\n        uint256[] calldata _receivedCollaterals,\n        uint256[] calldata _shareAmountsToRepaid,\n        bytes memory _flashReceiverData\n    ) external {\n        _destination.siloLiquidationCallback(\n            _user,\n            _assets,\n            _receivedCollaterals,\n            _shareAmountsToRepaid,\n            _flashReceiverData\n        );\n    }\n\n    function setDebtToken(address _debtToken) external {\n        debtToken = _debtToken;\n    }\n\n    function assetStorage(address) external view returns (ISilo.AssetStorage memory siloAssetStorage) {\n        siloAssetStorage.debtToken = IShareToken(debtToken);\n    }\n\n    function repayFor(address, address, uint256 _amount)\n        external\n        pure\n        returns (uint256 repaidAmount, uint256 burnedShare)\n    {\n        return (_amount, _amount);\n    }\n}\n"
    },
    "contracts/liquidation/LiquidationHelper.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.13;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\nimport \"../SiloLens.sol\";\nimport \"../interfaces/ISiloFactory.sol\";\nimport \"../interfaces/IPriceProvider.sol\";\nimport \"../interfaces/ISwapper.sol\";\nimport \"../interfaces/ISiloRepository.sol\";\nimport \"../interfaces/IPriceProvidersRepository.sol\";\nimport \"../interfaces/IWrappedNativeToken.sol\";\n\nimport \"../lib/Ping.sol\";\n\n\n/// @notice LiquidationHelper IS NOT PART OF THE PROTOCOL. SILO CREATED THIS TOOL, MOSTLY AS AN EXAMPLE.\n/// see https://github.com/silo-finance/liquidation#readme for details how liquidation process should look like\ncontract LiquidationHelper is IFlashLiquidationReceiver, Ownable {\n    bytes4 constant private _SWAP_AMOUNT_IN_SELECTOR =\n        bytes4(keccak256(\"swapAmountIn(address,address,uint256,address,address)\"));\n\n    bytes4 constant private _SWAP_AMOUNT_OUT_SELECTOR =\n        bytes4(keccak256(\"swapAmountOut(address,address,uint256,address,address)\"));\n\n    uint256 immutable private _baseTxCost;\n    ISiloRepository public immutable siloRepository;\n    SiloLens public immutable lens;\n    IERC20 public immutable quoteToken;\n\n    mapping(address => uint256) public earnings;\n    mapping(IPriceProvider => ISwapper) public swappers;\n\n    IPriceProvider[] public priceProvidersWithSwapOption;\n\n    event LiquidationBalance(address user, uint256 quoteAmountFromCollaterals, uint256 quoteLeftAfterRepay);\n\n    error InvalidSiloLens();\n    error InvalidSiloRepository();\n    error LiquidationNotProfitable(uint256 inTheRed);\n    error NotSilo();\n    error PriceProviderNotFound();\n    error RepayFailed();\n    error SwapAmountInFailed();\n    error SwapAmountOutFailed();\n    error SwappersMustMatchProviders();\n    error UsersMustMatchSilos();\n\n    constructor (\n        address _repository,\n        address _lens,\n        IPriceProvider[] memory _priceProvidersWithSwapOption,\n        ISwapper[] memory _swappers,\n        uint256 _baseCost\n    ) {\n        if (!Ping.pong(SiloLens(_lens).lensPing)) revert InvalidSiloLens();\n\n        if (!Ping.pong(ISiloRepository(_repository).siloRepositoryPing)) {\n            revert InvalidSiloRepository();\n        }\n\n        if (_swappers.length != _priceProvidersWithSwapOption.length) {\n            revert SwappersMustMatchProviders();\n        }\n\n        siloRepository = ISiloRepository(_repository);\n        lens = SiloLens(_lens);\n\n        for (uint256 i = 0; i < _swappers.length; i++) {\n            swappers[_priceProvidersWithSwapOption[i]] = _swappers[i];\n        }\n\n        priceProvidersWithSwapOption = _priceProvidersWithSwapOption;\n\n        IPriceProvidersRepository priceProviderRepo = ISiloRepository(_repository).priceProvidersRepository();\n        quoteToken = IERC20(priceProviderRepo.quoteToken());\n        _baseTxCost = _baseCost;\n    }\n\n    receive() external payable {\n        // we accepting ETH receive, so we can unwrap WETH\n    }\n\n    function withdraw() external {\n        _withdraw(msg.sender);\n    }\n\n    function withdrawFor(address _account) external {\n        _withdraw(_account);\n    }\n\n    function withdrawEth() external {\n        _withdrawEth(msg.sender);\n    }\n\n    function withdrawEthFor(address _account) external {\n        _withdrawEth(_account);\n    }\n\n    /// @param _swapper address of swapper contract, must follow ISwapper interface.\n    /// If provided, it will be used for all users and all assets.\n    /// If empty swapper will be chosen automatically for every asset based on registered swappers.\n    function executeLiquidation(address[] calldata _users, ISilo _silo, address _swapper) external {\n        uint256 gasStart = gasleft();\n        _silo.flashLiquidate(_users, abi.encode(gasStart, _swapper));\n    }\n\n    function setSwapper(IPriceProvider _oracle, ISwapper _swapper) external onlyOwner {\n        swappers[_oracle] = _swapper;\n    }\n\n    /// @dev this is working example of how to perform liquidation, this method will be called by Silo\n    ///         Keep in mind, that this helper might NOT choose the best swap option.\n    ///         For best results (highest earnings) you probably want to implement your own callback and maybe use some\n    ///         dex aggregators.\n    function siloLiquidationCallback(\n        address _user,\n        address[] calldata _assets,\n        uint256[] calldata _receivedCollaterals,\n        uint256[] calldata _shareAmountsToRepaid,\n        bytes memory _flashReceiverData\n    ) external override {\n        (uint256 gasStart, address swapperAddr) = abi.decode(_flashReceiverData, (uint256, address));\n\n        uint256 quoteAmountFromCollaterals = _swapAllForQuote(_assets, _receivedCollaterals, swapperAddr);\n        uint256 quoteSpentOnRepay = _repay(ISilo(msg.sender), _user, _assets, _shareAmountsToRepaid, swapperAddr);\n        uint256 gasSpend = gasStart - gasleft() - _baseTxCost;\n\n        if (quoteSpentOnRepay + gasSpend > quoteAmountFromCollaterals) {\n            revert LiquidationNotProfitable(quoteSpentOnRepay + gasSpend - quoteAmountFromCollaterals);\n        }\n\n        uint256 quoteLeftAfterRepay = quoteAmountFromCollaterals - quoteSpentOnRepay;\n\n        // we do not subtract gas, because this is amount of tokens to withdraw\n        // net earnings = earnings - gas used\n        earnings[owner()] += quoteLeftAfterRepay;\n\n        emit LiquidationBalance(_user, quoteAmountFromCollaterals, quoteLeftAfterRepay);\n    }\n\n    function priceProvidersWithSwapOptionCount() external view returns (uint256) {\n        return priceProvidersWithSwapOption.length;\n    }\n\n    function checkSolvency(address[] memory _users, ISilo[] memory _silos) external view returns (bool[] memory) {\n        if (_users.length != _silos.length) revert UsersMustMatchSilos();\n\n        bool[] memory solvency = new bool[](_users.length);\n\n        for (uint256 i; i < _users.length; i++) {\n            solvency[i] = _silos[i].isSolvent(_users[i]);\n        }\n\n        return solvency;\n    }\n\n    function checkDebt(address[] memory _users, ISilo[] memory _silos) external view returns (bool[] memory) {\n        bool[] memory hasDebt = new bool[](_users.length);\n\n        for (uint256 i; i < _users.length; i++) {\n            hasDebt[i] = lens.inDebt(_silos[i], _users[i]);\n        }\n\n        return hasDebt;\n    }\n\n    function findPriceProvider(address _asset) public view returns (IPriceProvider) {\n        IPriceProvider[] memory providers = priceProvidersWithSwapOption;\n\n        for (uint256 i = 0; i < providers.length; i++) {\n            IPriceProvider provider = providers[i];\n            if (provider.assetSupported(_asset)) return provider;\n        }\n\n        revert PriceProviderNotFound();\n    }\n\n    function _swapAllForQuote(\n        address[] calldata _assets,\n        uint256[] calldata _receivedCollaterals,\n        address swapperAddr\n    ) internal returns (uint256 quoteAmount) {\n        // swap all for quote token\n        // if silo was able to handle solvency calculations, then we can handle them without safe math here\n        unchecked {\n            for (uint256 i = 0; i < _assets.length; i++) {\n                quoteAmount += _swapForQuote(_assets[i], _receivedCollaterals[i], swapperAddr);\n            }\n        }\n    }\n\n    function _repay(\n        ISilo silo,\n        address _user,\n        address[] calldata _assets,\n        uint256[] calldata _shareAmountsToRepaid,\n        address swapperAddr\n    ) internal returns (uint256 quoteSpendOnRepay) {\n        if (!siloRepository.isSilo(address(silo))) revert NotSilo();\n\n        for (uint256 i = 0; i < _assets.length; i++) {\n            if (_shareAmountsToRepaid[i] == 0) continue;\n\n            // if silo was able to handle solvency calculations, then we can handle amounts without safe math here\n            unchecked {\n                quoteSpendOnRepay += _swapForAsset(_assets[i], _shareAmountsToRepaid[i], swapperAddr);\n            }\n\n            IERC20(_assets[i]).approve(address(silo), _shareAmountsToRepaid[i]);\n            silo.repayFor(_assets[i], _user, _shareAmountsToRepaid[i]);\n\n            // DEFLATIONARY TOKENS ARE NOT SUPPORTED\n            // we are not using lower limits for swaps so we may not get enough tokens to do full repay\n            // our assumption here is that `_shareAmountsToRepaid[i]` is total amount to repay the full debt\n            // if after repay user has no debt in this asset, the swap is acceptable\n            if (silo.assetStorage(_assets[i]).debtToken.balanceOf(_user) != 0) {\n                revert RepayFailed();\n            }\n        }\n    }\n\n    /// @dev it swaps asset token for quote\n    /// @param _asset address\n    /// @param _amount exact amount of asset to swap\n    /// @param _swapper contract that will be used for swapping asset for quote\n    /// @return amount of quote token\n    function _swapForQuote(address _asset, uint256 _amount, address _swapper) internal returns (uint256) {\n        if (_amount == 0 || _asset == address(quoteToken)) return _amount;\n\n        bytes memory callData = abi.encodeWithSelector(\n            _SWAP_AMOUNT_IN_SELECTOR,\n            _asset,\n            quoteToken,\n            _amount,\n            findPriceProvider(_asset),\n            _asset\n        );\n\n        ISwapper swapper = _resolveSwapper(_asset, _swapper);\n\n        // no need for safe approval, because we always using 100%\n        IERC20(_asset).approve(swapper.spenderToApprove(), _amount);\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory data) = address(swapper).delegatecall(callData);\n        if (!success) revert SwapAmountInFailed();\n\n        return abi.decode(data, (uint256));\n    }\n\n    /// @dev it swaps quote token for asset\n    /// @param _asset address\n    /// @param _amount exact amount OUT, what we want to receive\n    /// @param _swapper contract that will be used for swapping quote for asset\n    /// @return amount of quote token used for swap\n    function _swapForAsset(address _asset, uint256 _amount, address _swapper) internal returns (uint256) {\n        if (_amount == 0 || address(quoteToken) == _asset) return _amount;\n\n        bytes memory callData = abi.encodeWithSelector(\n            _SWAP_AMOUNT_OUT_SELECTOR,\n            quoteToken,\n            _asset,\n            _amount,\n            findPriceProvider(_asset),\n            _asset\n        );\n\n\n        ISwapper swapper = _resolveSwapper(_asset, _swapper);\n        address spender = swapper.spenderToApprove();\n        IERC20(quoteToken).approve(spender, type(uint256).max);\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory data) = address(swapper).delegatecall(callData);\n        if (!success) revert SwapAmountOutFailed();\n\n        IERC20(quoteToken).approve(spender, 0);\n\n        return abi.decode(data, (uint256));\n    }\n\n    function _resolveSwapper(address _asset, address _swapper) internal view returns (ISwapper) {\n        if (address(_swapper) != address(0)) return ISwapper(_swapper);\n\n        IPriceProvider priceProvider = findPriceProvider(_asset);\n        return swappers[priceProvider];\n    }\n\n    function _withdraw(address _account) internal {\n        uint256 amount = earnings[_account];\n        if (amount == 0) return;\n\n        earnings[_account] = 0;\n        quoteToken.transfer(_account, amount);\n    }\n\n    function _withdrawEth(address _account) internal {\n        uint256 amount = earnings[_account];\n        if (amount == 0) return;\n\n        earnings[_account] = 0;\n        IWrappedNativeToken(address(quoteToken)).withdraw(amount);\n        payable(_account).transfer(amount);\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "contracts/interfaces/ISwapper.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.7.6 <0.9.0;\n\ninterface ISwapper {\n    /// @dev swaps `_amountIn` of `_tokenIn` for `_tokenOut`. It might require approvals.\n    /// @return amountOut amount of _tokenOut received\n    function swapAmountIn(\n        address _tokenIn,\n        address _tokenOut,\n        uint256 _amountIn,\n        address _priceProvider,\n        address _siloAsset\n    ) external returns (uint256 amountOut);\n\n    /// @dev swaps `_tokenIn` for `_amountOut` of  `_tokenOut`. It might require approvals\n    /// @return amountIn amount of _tokenIn spend\n    function swapAmountOut(\n        address _tokenIn,\n        address _tokenOut,\n        uint256 _amountOut,\n        address _priceProvider,\n        address _siloAsset\n    ) external returns (uint256 amountIn);\n\n    /// @return address that needs to have approval to spend tokens to execute a swap\n    function spenderToApprove() external view returns (address);\n}\n"
    },
    "contracts/priceProviders/PriceProvider.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity >=0.7.6 <0.9.0;\n\nimport \"../lib/Ping.sol\";\nimport \"../interfaces/IPriceProvider.sol\";\nimport \"../interfaces/IPriceProvidersRepository.sol\";\n\n/// @title PriceProvider\n/// @notice Abstract PriceProvider contract, parent of all PriceProviders\n/// @dev Price provider is a contract that directly integrates with a price source, ie. a DEX or alternative system\n/// like Chainlink to calculate TWAP prices for assets. Each price provider should support a single price source\n/// and multiple assets.\nabstract contract PriceProvider is IPriceProvider {\n    /// @notice PriceProvidersRepository address\n    IPriceProvidersRepository public immutable priceProvidersRepository;\n\n    /// @notice Token address which prices are quoted in. Must be the same as PriceProvidersRepository.quoteToken\n    address public immutable override quoteToken;\n\n    modifier onlyManager() {\n        if (priceProvidersRepository.manager() != msg.sender) revert(\"OnlyManager\");\n        _;\n    }\n\n    /// @param _priceProvidersRepository address of PriceProvidersRepository\n    constructor(IPriceProvidersRepository _priceProvidersRepository) {\n        if (\n            !Ping.pong(_priceProvidersRepository.priceProvidersRepositoryPing)            \n        ) {\n            revert(\"InvalidPriceProviderRepository\");\n        }\n\n        priceProvidersRepository = _priceProvidersRepository;\n        quoteToken = _priceProvidersRepository.quoteToken();\n    }\n\n    /// @inheritdoc IPriceProvider\n    function priceProviderPing() external pure override returns (bytes4) {\n        return this.priceProviderPing.selector;\n    }\n\n    function _revertBytes(bytes memory _errMsg, string memory _customErr) internal pure {\n        if (_errMsg.length > 0) {\n            assembly { // solhint-disable-line no-inline-assembly\n                revert(add(32, _errMsg), mload(_errMsg))\n            }\n        }\n\n        revert(_customErr);\n    }\n}\n"
    },
    "contracts/liquidation/UniswapV3Swap.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.13;\npragma abicoder v2;\n\nimport \"@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol\";\nimport \"@uniswap/v3-core/contracts/interfaces/IUniswapV3Pool.sol\";\nimport \"../interfaces/ISwapper.sol\";\nimport \"../interfaces/IPriceProvider.sol\";\n\n/// @dev UniswapV3Swap IS NOT PART OF THE PROTOCOL. SILO CREATED THIS TOOL, MOSTLY AS AN EXAMPLE.\n///         NOTE THAT SWAP DONE BY THIS CONTRACT MIGHT NOT BE OPTIMISED, WE ARE NOT USING SLIPPAGE AND YOU CAN LOSE\n///         MONEY BY USING IT.\ncontract UniswapV3Swap is ISwapper {\n    bytes4 constant private _POOLS_SELECTOR = bytes4(keccak256(\"pools(address)\"));\n\n    ISwapRouter public immutable router;\n\n    error RouterIsZero();\n    error PoolNotSet();\n\n    constructor (address _router) {\n        if (_router == address(0)) revert RouterIsZero();\n\n        router = ISwapRouter(_router);\n    }\n\n    /// @inheritdoc ISwapper\n    function swapAmountIn(\n        address _tokenIn,\n        address _tokenOut,\n        uint256 _amount,\n        address _priceProvider,\n        address _siloAsset\n    ) external override returns (uint256 amountOut) {\n        uint24 fee = resolveFee(_priceProvider, _siloAsset);\n        return _swapAmountIn(_tokenIn, _tokenOut, _amount, fee);\n    }\n\n    /// @inheritdoc ISwapper\n    function swapAmountOut(\n        address _tokenIn,\n        address _tokenOut,\n        uint256 _amountOut,\n        address _priceProvider,\n        address _siloAsset\n    ) external override returns (uint256 amountIn) {\n        uint24 fee = resolveFee(_priceProvider, _siloAsset);\n        return _swapAmountOut(_tokenIn, _tokenOut, _amountOut, fee);\n    }\n\n    /// @inheritdoc ISwapper\n    function spenderToApprove() external view override returns (address) {\n        return address(router);\n    }\n\n    function resolveFee(address _priceProvider, address _asset) public view returns (uint24 fee) {\n        bytes memory callData = abi.encodeWithSelector(_POOLS_SELECTOR, _asset);\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory data) = _priceProvider.staticcall(callData);\n        if (!success) revert PoolNotSet();\n\n        IUniswapV3Pool pool = IUniswapV3Pool(abi.decode(data, (address)));\n        fee = pool.fee();\n    }\n\n    function pathToBytes(address[] memory path, uint24[] memory fees) public pure returns (bytes memory bytesPath) {\n        for (uint256 i = 0; i < path.length; i++) {\n            bytesPath = i == fees.length\n            ? abi.encodePacked(bytesPath, path[i])\n            : abi.encodePacked(bytesPath, path[i], fees[i]);\n        }\n    }\n\n    function _swapAmountIn(\n        address _tokenIn,\n        address _tokenOut,\n        uint256 _amountIn,\n        uint24 _fee\n    ) internal returns (uint256 amountOut) {\n        ISwapRouter.ExactInputSingleParams memory params = ISwapRouter.ExactInputSingleParams({\n            tokenIn: _tokenIn,\n            tokenOut: _tokenOut,\n            fee: _fee,\n            recipient: address(this),\n            deadline: block.timestamp,\n            amountIn: _amountIn,\n            amountOutMinimum: 1,\n            sqrtPriceLimitX96: 0\n        });\n\n        return router.exactInputSingle(params);\n    }\n\n    function _swapAmountOut(\n        address _tokenIn,\n        address _tokenOut,\n        uint256 _amountOut,\n        uint24 _fee\n    ) internal returns (uint256 amountOut) {\n        ISwapRouter.ExactOutputSingleParams memory params = ISwapRouter.ExactOutputSingleParams({\n            tokenIn: _tokenIn,\n            tokenOut: _tokenOut,\n            fee: _fee,\n            recipient: address(this),\n            deadline: block.timestamp,\n            amountOut: _amountOut,\n            amountInMaximum: type(uint256).max,\n            sqrtPriceLimitX96: 0\n        });\n\n        return router.exactOutputSingle(params);\n    }\n}\n"
    },
    "@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.7.5;\npragma abicoder v2;\n\nimport '@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol';\n\n/// @title Router token swapping functionality\n/// @notice Functions for swapping tokens via Uniswap V3\ninterface ISwapRouter is IUniswapV3SwapCallback {\n    struct ExactInputSingleParams {\n        address tokenIn;\n        address tokenOut;\n        uint24 fee;\n        address recipient;\n        uint256 deadline;\n        uint256 amountIn;\n        uint256 amountOutMinimum;\n        uint160 sqrtPriceLimitX96;\n    }\n\n    /// @notice Swaps `amountIn` of one token for as much as possible of another token\n    /// @param params The parameters necessary for the swap, encoded as `ExactInputSingleParams` in calldata\n    /// @return amountOut The amount of the received token\n    function exactInputSingle(ExactInputSingleParams calldata params) external payable returns (uint256 amountOut);\n\n    struct ExactInputParams {\n        bytes path;\n        address recipient;\n        uint256 deadline;\n        uint256 amountIn;\n        uint256 amountOutMinimum;\n    }\n\n    /// @notice Swaps `amountIn` of one token for as much as possible of another along the specified path\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactInputParams` in calldata\n    /// @return amountOut The amount of the received token\n    function exactInput(ExactInputParams calldata params) external payable returns (uint256 amountOut);\n\n    struct ExactOutputSingleParams {\n        address tokenIn;\n        address tokenOut;\n        uint24 fee;\n        address recipient;\n        uint256 deadline;\n        uint256 amountOut;\n        uint256 amountInMaximum;\n        uint160 sqrtPriceLimitX96;\n    }\n\n    /// @notice Swaps as little as possible of one token for `amountOut` of another token\n    /// @param params The parameters necessary for the swap, encoded as `ExactOutputSingleParams` in calldata\n    /// @return amountIn The amount of the input token\n    function exactOutputSingle(ExactOutputSingleParams calldata params) external payable returns (uint256 amountIn);\n\n    struct ExactOutputParams {\n        bytes path;\n        address recipient;\n        uint256 deadline;\n        uint256 amountOut;\n        uint256 amountInMaximum;\n    }\n\n    /// @notice Swaps as little as possible of one token for `amountOut` of another along the specified path (reversed)\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactOutputParams` in calldata\n    /// @return amountIn The amount of the input token\n    function exactOutput(ExactOutputParams calldata params) external payable returns (uint256 amountIn);\n}\n"
    },
    "@uniswap/v3-core/contracts/interfaces/IUniswapV3Pool.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\nimport './pool/IUniswapV3PoolImmutables.sol';\nimport './pool/IUniswapV3PoolState.sol';\nimport './pool/IUniswapV3PoolDerivedState.sol';\nimport './pool/IUniswapV3PoolActions.sol';\nimport './pool/IUniswapV3PoolOwnerActions.sol';\nimport './pool/IUniswapV3PoolEvents.sol';\n\n/// @title The interface for a Uniswap V3 Pool\n/// @notice A Uniswap pool facilitates swapping and automated market making between any two assets that strictly conform\n/// to the ERC20 specification\n/// @dev The pool interface is broken up into many smaller pieces\ninterface IUniswapV3Pool is\n    IUniswapV3PoolImmutables,\n    IUniswapV3PoolState,\n    IUniswapV3PoolDerivedState,\n    IUniswapV3PoolActions,\n    IUniswapV3PoolOwnerActions,\n    IUniswapV3PoolEvents\n{\n\n}\n"
    },
    "@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Callback for IUniswapV3PoolActions#swap\n/// @notice Any contract that calls IUniswapV3PoolActions#swap must implement this interface\ninterface IUniswapV3SwapCallback {\n    /// @notice Called to `msg.sender` after executing a swap via IUniswapV3Pool#swap.\n    /// @dev In the implementation you must pay the pool tokens owed for the swap.\n    /// The caller of this method must be checked to be a UniswapV3Pool deployed by the canonical UniswapV3Factory.\n    /// amount0Delta and amount1Delta can both be 0 if no tokens were swapped.\n    /// @param amount0Delta The amount of token0 that was sent (negative) or must be received (positive) by the pool by\n    /// the end of the swap. If positive, the callback must send that amount of token0 to the pool.\n    /// @param amount1Delta The amount of token1 that was sent (negative) or must be received (positive) by the pool by\n    /// the end of the swap. If positive, the callback must send that amount of token1 to the pool.\n    /// @param data Any data passed through by the caller via the IUniswapV3PoolActions#swap call\n    function uniswapV3SwapCallback(\n        int256 amount0Delta,\n        int256 amount1Delta,\n        bytes calldata data\n    ) external;\n}\n"
    },
    "@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolImmutables.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Pool state that never changes\n/// @notice These parameters are fixed for a pool forever, i.e., the methods will always return the same values\ninterface IUniswapV3PoolImmutables {\n    /// @notice The contract that deployed the pool, which must adhere to the IUniswapV3Factory interface\n    /// @return The contract address\n    function factory() external view returns (address);\n\n    /// @notice The first of the two tokens of the pool, sorted by address\n    /// @return The token contract address\n    function token0() external view returns (address);\n\n    /// @notice The second of the two tokens of the pool, sorted by address\n    /// @return The token contract address\n    function token1() external view returns (address);\n\n    /// @notice The pool's fee in hundredths of a bip, i.e. 1e-6\n    /// @return The fee\n    function fee() external view returns (uint24);\n\n    /// @notice The pool tick spacing\n    /// @dev Ticks can only be used at multiples of this value, minimum of 1 and always positive\n    /// e.g.: a tickSpacing of 3 means ticks can be initialized every 3rd tick, i.e., ..., -6, -3, 0, 3, 6, ...\n    /// This value is an int24 to avoid casting even though it is always positive.\n    /// @return The tick spacing\n    function tickSpacing() external view returns (int24);\n\n    /// @notice The maximum amount of position liquidity that can use any tick in the range\n    /// @dev This parameter is enforced per tick to prevent liquidity from overflowing a uint128 at any point, and\n    /// also prevents out-of-range liquidity from being used to prevent adding in-range liquidity to a pool\n    /// @return The max amount of liquidity per tick\n    function maxLiquidityPerTick() external view returns (uint128);\n}\n"
    },
    "@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolState.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Pool state that can change\n/// @notice These methods compose the pool's state, and can change with any frequency including multiple times\n/// per transaction\ninterface IUniswapV3PoolState {\n    /// @notice The 0th storage slot in the pool stores many values, and is exposed as a single method to save gas\n    /// when accessed externally.\n    /// @return sqrtPriceX96 The current price of the pool as a sqrt(token1/token0) Q64.96 value\n    /// tick The current tick of the pool, i.e. according to the last tick transition that was run.\n    /// This value may not always be equal to SqrtTickMath.getTickAtSqrtRatio(sqrtPriceX96) if the price is on a tick\n    /// boundary.\n    /// observationIndex The index of the last oracle observation that was written,\n    /// observationCardinality The current maximum number of observations stored in the pool,\n    /// observationCardinalityNext The next maximum number of observations, to be updated when the observation.\n    /// feeProtocol The protocol fee for both tokens of the pool.\n    /// Encoded as two 4 bit values, where the protocol fee of token1 is shifted 4 bits and the protocol fee of token0\n    /// is the lower 4 bits. Used as the denominator of a fraction of the swap fee, e.g. 4 means 1/4th of the swap fee.\n    /// unlocked Whether the pool is currently locked to reentrancy\n    function slot0()\n        external\n        view\n        returns (\n            uint160 sqrtPriceX96,\n            int24 tick,\n            uint16 observationIndex,\n            uint16 observationCardinality,\n            uint16 observationCardinalityNext,\n            uint8 feeProtocol,\n            bool unlocked\n        );\n\n    /// @notice The fee growth as a Q128.128 fees of token0 collected per unit of liquidity for the entire life of the pool\n    /// @dev This value can overflow the uint256\n    function feeGrowthGlobal0X128() external view returns (uint256);\n\n    /// @notice The fee growth as a Q128.128 fees of token1 collected per unit of liquidity for the entire life of the pool\n    /// @dev This value can overflow the uint256\n    function feeGrowthGlobal1X128() external view returns (uint256);\n\n    /// @notice The amounts of token0 and token1 that are owed to the protocol\n    /// @dev Protocol fees will never exceed uint128 max in either token\n    function protocolFees() external view returns (uint128 token0, uint128 token1);\n\n    /// @notice The currently in range liquidity available to the pool\n    /// @dev This value has no relationship to the total liquidity across all ticks\n    function liquidity() external view returns (uint128);\n\n    /// @notice Look up information about a specific tick in the pool\n    /// @param tick The tick to look up\n    /// @return liquidityGross the total amount of position liquidity that uses the pool either as tick lower or\n    /// tick upper,\n    /// liquidityNet how much liquidity changes when the pool price crosses the tick,\n    /// feeGrowthOutside0X128 the fee growth on the other side of the tick from the current tick in token0,\n    /// feeGrowthOutside1X128 the fee growth on the other side of the tick from the current tick in token1,\n    /// tickCumulativeOutside the cumulative tick value on the other side of the tick from the current tick\n    /// secondsPerLiquidityOutsideX128 the seconds spent per liquidity on the other side of the tick from the current tick,\n    /// secondsOutside the seconds spent on the other side of the tick from the current tick,\n    /// initialized Set to true if the tick is initialized, i.e. liquidityGross is greater than 0, otherwise equal to false.\n    /// Outside values can only be used if the tick is initialized, i.e. if liquidityGross is greater than 0.\n    /// In addition, these values are only relative and must be used only in comparison to previous snapshots for\n    /// a specific position.\n    function ticks(int24 tick)\n        external\n        view\n        returns (\n            uint128 liquidityGross,\n            int128 liquidityNet,\n            uint256 feeGrowthOutside0X128,\n            uint256 feeGrowthOutside1X128,\n            int56 tickCumulativeOutside,\n            uint160 secondsPerLiquidityOutsideX128,\n            uint32 secondsOutside,\n            bool initialized\n        );\n\n    /// @notice Returns 256 packed tick initialized boolean values. See TickBitmap for more information\n    function tickBitmap(int16 wordPosition) external view returns (uint256);\n\n    /// @notice Returns the information about a position by the position's key\n    /// @param key The position's key is a hash of a preimage composed by the owner, tickLower and tickUpper\n    /// @return _liquidity The amount of liquidity in the position,\n    /// Returns feeGrowthInside0LastX128 fee growth of token0 inside the tick range as of the last mint/burn/poke,\n    /// Returns feeGrowthInside1LastX128 fee growth of token1 inside the tick range as of the last mint/burn/poke,\n    /// Returns tokensOwed0 the computed amount of token0 owed to the position as of the last mint/burn/poke,\n    /// Returns tokensOwed1 the computed amount of token1 owed to the position as of the last mint/burn/poke\n    function positions(bytes32 key)\n        external\n        view\n        returns (\n            uint128 _liquidity,\n            uint256 feeGrowthInside0LastX128,\n            uint256 feeGrowthInside1LastX128,\n            uint128 tokensOwed0,\n            uint128 tokensOwed1\n        );\n\n    /// @notice Returns data about a specific observation index\n    /// @param index The element of the observations array to fetch\n    /// @dev You most likely want to use #observe() instead of this method to get an observation as of some amount of time\n    /// ago, rather than at a specific index in the array.\n    /// @return blockTimestamp The timestamp of the observation,\n    /// Returns tickCumulative the tick multiplied by seconds elapsed for the life of the pool as of the observation timestamp,\n    /// Returns secondsPerLiquidityCumulativeX128 the seconds per in range liquidity for the life of the pool as of the observation timestamp,\n    /// Returns initialized whether the observation has been initialized and the values are safe to use\n    function observations(uint256 index)\n        external\n        view\n        returns (\n            uint32 blockTimestamp,\n            int56 tickCumulative,\n            uint160 secondsPerLiquidityCumulativeX128,\n            bool initialized\n        );\n}\n"
    },
    "@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolDerivedState.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Pool state that is not stored\n/// @notice Contains view functions to provide information about the pool that is computed rather than stored on the\n/// blockchain. The functions here may have variable gas costs.\ninterface IUniswapV3PoolDerivedState {\n    /// @notice Returns the cumulative tick and liquidity as of each timestamp `secondsAgo` from the current block timestamp\n    /// @dev To get a time weighted average tick or liquidity-in-range, you must call this with two values, one representing\n    /// the beginning of the period and another for the end of the period. E.g., to get the last hour time-weighted average tick,\n    /// you must call it with secondsAgos = [3600, 0].\n    /// @dev The time weighted average tick represents the geometric time weighted average price of the pool, in\n    /// log base sqrt(1.0001) of token1 / token0. The TickMath library can be used to go from a tick value to a ratio.\n    /// @param secondsAgos From how long ago each cumulative tick and liquidity value should be returned\n    /// @return tickCumulatives Cumulative tick values as of each `secondsAgos` from the current block timestamp\n    /// @return secondsPerLiquidityCumulativeX128s Cumulative seconds per liquidity-in-range value as of each `secondsAgos` from the current block\n    /// timestamp\n    function observe(uint32[] calldata secondsAgos)\n        external\n        view\n        returns (int56[] memory tickCumulatives, uint160[] memory secondsPerLiquidityCumulativeX128s);\n\n    /// @notice Returns a snapshot of the tick cumulative, seconds per liquidity and seconds inside a tick range\n    /// @dev Snapshots must only be compared to other snapshots, taken over a period for which a position existed.\n    /// I.e., snapshots cannot be compared if a position is not held for the entire period between when the first\n    /// snapshot is taken and the second snapshot is taken.\n    /// @param tickLower The lower tick of the range\n    /// @param tickUpper The upper tick of the range\n    /// @return tickCumulativeInside The snapshot of the tick accumulator for the range\n    /// @return secondsPerLiquidityInsideX128 The snapshot of seconds per liquidity for the range\n    /// @return secondsInside The snapshot of seconds per liquidity for the range\n    function snapshotCumulativesInside(int24 tickLower, int24 tickUpper)\n        external\n        view\n        returns (\n            int56 tickCumulativeInside,\n            uint160 secondsPerLiquidityInsideX128,\n            uint32 secondsInside\n        );\n}\n"
    },
    "@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolActions.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Permissionless pool actions\n/// @notice Contains pool methods that can be called by anyone\ninterface IUniswapV3PoolActions {\n    /// @notice Sets the initial price for the pool\n    /// @dev Price is represented as a sqrt(amountToken1/amountToken0) Q64.96 value\n    /// @param sqrtPriceX96 the initial sqrt price of the pool as a Q64.96\n    function initialize(uint160 sqrtPriceX96) external;\n\n    /// @notice Adds liquidity for the given recipient/tickLower/tickUpper position\n    /// @dev The caller of this method receives a callback in the form of IUniswapV3MintCallback#uniswapV3MintCallback\n    /// in which they must pay any token0 or token1 owed for the liquidity. The amount of token0/token1 due depends\n    /// on tickLower, tickUpper, the amount of liquidity, and the current price.\n    /// @param recipient The address for which the liquidity will be created\n    /// @param tickLower The lower tick of the position in which to add liquidity\n    /// @param tickUpper The upper tick of the position in which to add liquidity\n    /// @param amount The amount of liquidity to mint\n    /// @param data Any data that should be passed through to the callback\n    /// @return amount0 The amount of token0 that was paid to mint the given amount of liquidity. Matches the value in the callback\n    /// @return amount1 The amount of token1 that was paid to mint the given amount of liquidity. Matches the value in the callback\n    function mint(\n        address recipient,\n        int24 tickLower,\n        int24 tickUpper,\n        uint128 amount,\n        bytes calldata data\n    ) external returns (uint256 amount0, uint256 amount1);\n\n    /// @notice Collects tokens owed to a position\n    /// @dev Does not recompute fees earned, which must be done either via mint or burn of any amount of liquidity.\n    /// Collect must be called by the position owner. To withdraw only token0 or only token1, amount0Requested or\n    /// amount1Requested may be set to zero. To withdraw all tokens owed, caller may pass any value greater than the\n    /// actual tokens owed, e.g. type(uint128).max. Tokens owed may be from accumulated swap fees or burned liquidity.\n    /// @param recipient The address which should receive the fees collected\n    /// @param tickLower The lower tick of the position for which to collect fees\n    /// @param tickUpper The upper tick of the position for which to collect fees\n    /// @param amount0Requested How much token0 should be withdrawn from the fees owed\n    /// @param amount1Requested How much token1 should be withdrawn from the fees owed\n    /// @return amount0 The amount of fees collected in token0\n    /// @return amount1 The amount of fees collected in token1\n    function collect(\n        address recipient,\n        int24 tickLower,\n        int24 tickUpper,\n        uint128 amount0Requested,\n        uint128 amount1Requested\n    ) external returns (uint128 amount0, uint128 amount1);\n\n    /// @notice Burn liquidity from the sender and account tokens owed for the liquidity to the position\n    /// @dev Can be used to trigger a recalculation of fees owed to a position by calling with an amount of 0\n    /// @dev Fees must be collected separately via a call to #collect\n    /// @param tickLower The lower tick of the position for which to burn liquidity\n    /// @param tickUpper The upper tick of the position for which to burn liquidity\n    /// @param amount How much liquidity to burn\n    /// @return amount0 The amount of token0 sent to the recipient\n    /// @return amount1 The amount of token1 sent to the recipient\n    function burn(\n        int24 tickLower,\n        int24 tickUpper,\n        uint128 amount\n    ) external returns (uint256 amount0, uint256 amount1);\n\n    /// @notice Swap token0 for token1, or token1 for token0\n    /// @dev The caller of this method receives a callback in the form of IUniswapV3SwapCallback#uniswapV3SwapCallback\n    /// @param recipient The address to receive the output of the swap\n    /// @param zeroForOne The direction of the swap, true for token0 to token1, false for token1 to token0\n    /// @param amountSpecified The amount of the swap, which implicitly configures the swap as exact input (positive), or exact output (negative)\n    /// @param sqrtPriceLimitX96 The Q64.96 sqrt price limit. If zero for one, the price cannot be less than this\n    /// value after the swap. If one for zero, the price cannot be greater than this value after the swap\n    /// @param data Any data to be passed through to the callback\n    /// @return amount0 The delta of the balance of token0 of the pool, exact when negative, minimum when positive\n    /// @return amount1 The delta of the balance of token1 of the pool, exact when negative, minimum when positive\n    function swap(\n        address recipient,\n        bool zeroForOne,\n        int256 amountSpecified,\n        uint160 sqrtPriceLimitX96,\n        bytes calldata data\n    ) external returns (int256 amount0, int256 amount1);\n\n    /// @notice Receive token0 and/or token1 and pay it back, plus a fee, in the callback\n    /// @dev The caller of this method receives a callback in the form of IUniswapV3FlashCallback#uniswapV3FlashCallback\n    /// @dev Can be used to donate underlying tokens pro-rata to currently in-range liquidity providers by calling\n    /// with 0 amount{0,1} and sending the donation amount(s) from the callback\n    /// @param recipient The address which will receive the token0 and token1 amounts\n    /// @param amount0 The amount of token0 to send\n    /// @param amount1 The amount of token1 to send\n    /// @param data Any data to be passed through to the callback\n    function flash(\n        address recipient,\n        uint256 amount0,\n        uint256 amount1,\n        bytes calldata data\n    ) external;\n\n    /// @notice Increase the maximum number of price and liquidity observations that this pool will store\n    /// @dev This method is no-op if the pool already has an observationCardinalityNext greater than or equal to\n    /// the input observationCardinalityNext.\n    /// @param observationCardinalityNext The desired minimum number of observations for the pool to store\n    function increaseObservationCardinalityNext(uint16 observationCardinalityNext) external;\n}\n"
    },
    "@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolOwnerActions.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Permissioned pool actions\n/// @notice Contains pool methods that may only be called by the factory owner\ninterface IUniswapV3PoolOwnerActions {\n    /// @notice Set the denominator of the protocol's % share of the fees\n    /// @param feeProtocol0 new protocol fee for token0 of the pool\n    /// @param feeProtocol1 new protocol fee for token1 of the pool\n    function setFeeProtocol(uint8 feeProtocol0, uint8 feeProtocol1) external;\n\n    /// @notice Collect the protocol fee accrued to the pool\n    /// @param recipient The address to which collected protocol fees should be sent\n    /// @param amount0Requested The maximum amount of token0 to send, can be 0 to collect fees in only token1\n    /// @param amount1Requested The maximum amount of token1 to send, can be 0 to collect fees in only token0\n    /// @return amount0 The protocol fee collected in token0\n    /// @return amount1 The protocol fee collected in token1\n    function collectProtocol(\n        address recipient,\n        uint128 amount0Requested,\n        uint128 amount1Requested\n    ) external returns (uint128 amount0, uint128 amount1);\n}\n"
    },
    "@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolEvents.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Events emitted by a pool\n/// @notice Contains all events emitted by the pool\ninterface IUniswapV3PoolEvents {\n    /// @notice Emitted exactly once by a pool when #initialize is first called on the pool\n    /// @dev Mint/Burn/Swap cannot be emitted by the pool before Initialize\n    /// @param sqrtPriceX96 The initial sqrt price of the pool, as a Q64.96\n    /// @param tick The initial tick of the pool, i.e. log base 1.0001 of the starting price of the pool\n    event Initialize(uint160 sqrtPriceX96, int24 tick);\n\n    /// @notice Emitted when liquidity is minted for a given position\n    /// @param sender The address that minted the liquidity\n    /// @param owner The owner of the position and recipient of any minted liquidity\n    /// @param tickLower The lower tick of the position\n    /// @param tickUpper The upper tick of the position\n    /// @param amount The amount of liquidity minted to the position range\n    /// @param amount0 How much token0 was required for the minted liquidity\n    /// @param amount1 How much token1 was required for the minted liquidity\n    event Mint(\n        address sender,\n        address indexed owner,\n        int24 indexed tickLower,\n        int24 indexed tickUpper,\n        uint128 amount,\n        uint256 amount0,\n        uint256 amount1\n    );\n\n    /// @notice Emitted when fees are collected by the owner of a position\n    /// @dev Collect events may be emitted with zero amount0 and amount1 when the caller chooses not to collect fees\n    /// @param owner The owner of the position for which fees are collected\n    /// @param tickLower The lower tick of the position\n    /// @param tickUpper The upper tick of the position\n    /// @param amount0 The amount of token0 fees collected\n    /// @param amount1 The amount of token1 fees collected\n    event Collect(\n        address indexed owner,\n        address recipient,\n        int24 indexed tickLower,\n        int24 indexed tickUpper,\n        uint128 amount0,\n        uint128 amount1\n    );\n\n    /// @notice Emitted when a position's liquidity is removed\n    /// @dev Does not withdraw any fees earned by the liquidity position, which must be withdrawn via #collect\n    /// @param owner The owner of the position for which liquidity is removed\n    /// @param tickLower The lower tick of the position\n    /// @param tickUpper The upper tick of the position\n    /// @param amount The amount of liquidity to remove\n    /// @param amount0 The amount of token0 withdrawn\n    /// @param amount1 The amount of token1 withdrawn\n    event Burn(\n        address indexed owner,\n        int24 indexed tickLower,\n        int24 indexed tickUpper,\n        uint128 amount,\n        uint256 amount0,\n        uint256 amount1\n    );\n\n    /// @notice Emitted by the pool for any swaps between token0 and token1\n    /// @param sender The address that initiated the swap call, and that received the callback\n    /// @param recipient The address that received the output of the swap\n    /// @param amount0 The delta of the token0 balance of the pool\n    /// @param amount1 The delta of the token1 balance of the pool\n    /// @param sqrtPriceX96 The sqrt(price) of the pool after the swap, as a Q64.96\n    /// @param liquidity The liquidity of the pool after the swap\n    /// @param tick The log base 1.0001 of price of the pool after the swap\n    event Swap(\n        address indexed sender,\n        address indexed recipient,\n        int256 amount0,\n        int256 amount1,\n        uint160 sqrtPriceX96,\n        uint128 liquidity,\n        int24 tick\n    );\n\n    /// @notice Emitted by the pool for any flashes of token0/token1\n    /// @param sender The address that initiated the swap call, and that received the callback\n    /// @param recipient The address that received the tokens from flash\n    /// @param amount0 The amount of token0 that was flashed\n    /// @param amount1 The amount of token1 that was flashed\n    /// @param paid0 The amount of token0 paid for the flash, which can exceed the amount0 plus the fee\n    /// @param paid1 The amount of token1 paid for the flash, which can exceed the amount1 plus the fee\n    event Flash(\n        address indexed sender,\n        address indexed recipient,\n        uint256 amount0,\n        uint256 amount1,\n        uint256 paid0,\n        uint256 paid1\n    );\n\n    /// @notice Emitted by the pool for increases to the number of observations that can be stored\n    /// @dev observationCardinalityNext is not the observation cardinality until an observation is written at the index\n    /// just before a mint/swap/burn.\n    /// @param observationCardinalityNextOld The previous value of the next observation cardinality\n    /// @param observationCardinalityNextNew The updated value of the next observation cardinality\n    event IncreaseObservationCardinalityNext(\n        uint16 observationCardinalityNextOld,\n        uint16 observationCardinalityNextNew\n    );\n\n    /// @notice Emitted when the protocol fee is changed by the pool\n    /// @param feeProtocol0Old The previous value of the token0 protocol fee\n    /// @param feeProtocol1Old The previous value of the token1 protocol fee\n    /// @param feeProtocol0New The updated value of the token0 protocol fee\n    /// @param feeProtocol1New The updated value of the token1 protocol fee\n    event SetFeeProtocol(uint8 feeProtocol0Old, uint8 feeProtocol1Old, uint8 feeProtocol0New, uint8 feeProtocol1New);\n\n    /// @notice Emitted when the collected protocol fees are withdrawn by the factory owner\n    /// @param sender The address that collects the protocol fees\n    /// @param recipient The address that receives the collected protocol fees\n    /// @param amount0 The amount of token0 protocol fees that is withdrawn\n    /// @param amount0 The amount of token1 protocol fees that is withdrawn\n    event CollectProtocol(address indexed sender, address indexed recipient, uint128 amount0, uint128 amount1);\n}\n"
    },
    "contracts/mock/MockPriceFetchersRepository.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity 0.8.13;\n\nimport \"../PriceProvidersRepository.sol\";\nimport \"../interfaces/IPriceProvider.sol\";\n\n/// @dev this is MOCK contract - DO NOT USE IT!\ncontract MockPriceProvidersRepository is PriceProvidersRepository {\n    mapping(address => uint256) public prices;\n\n    constructor(address _quoteToken, address _factory) PriceProvidersRepository(_quoteToken, _factory) {\n    }\n\n    function setPriceProviderForAsset(address _asset, IPriceProvider _provider) external override {\n        require(\n            Ping.pong(_provider.priceProviderPing),\n                \"ProvidersRepository: not an provider\"\n        );\n\n        priceProviders[_asset] = _provider;\n    }\n\n    function setPrice(address _asset, uint256 _price) public {\n        prices[_asset] = _price;\n    }\n\n    function getPrice(address _asset) public view override returns (uint256) {\n        return prices[_asset];\n    }\n}\n"
    },
    "@uniswap/v3-core/contracts/libraries/LowGasSafeMath.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.7.0;\n\n/// @title Optimized overflow and underflow safe math operations\n/// @notice Contains methods for doing math operations that revert on overflow or underflow for minimal gas cost\nlibrary LowGasSafeMath {\n    /// @notice Returns x + y, reverts if sum overflows uint256\n    /// @param x The augend\n    /// @param y The addend\n    /// @return z The sum of x and y\n    function add(uint256 x, uint256 y) internal pure returns (uint256 z) {\n        require((z = x + y) >= x);\n    }\n\n    /// @notice Returns x - y, reverts if underflows\n    /// @param x The minuend\n    /// @param y The subtrahend\n    /// @return z The difference of x and y\n    function sub(uint256 x, uint256 y) internal pure returns (uint256 z) {\n        require((z = x - y) <= x);\n    }\n\n    /// @notice Returns x * y, reverts if overflows\n    /// @param x The multiplicand\n    /// @param y The multiplier\n    /// @return z The product of x and y\n    function mul(uint256 x, uint256 y) internal pure returns (uint256 z) {\n        require(x == 0 || (z = x * y) / x == y);\n    }\n\n    /// @notice Returns x + y, reverts if overflows or underflows\n    /// @param x The augend\n    /// @param y The addend\n    /// @return z The sum of x and y\n    function add(int256 x, int256 y) internal pure returns (int256 z) {\n        require((z = x + y) >= x == (y >= 0));\n    }\n\n    /// @notice Returns x - y, reverts if overflows or underflows\n    /// @param x The minuend\n    /// @param y The subtrahend\n    /// @return z The difference of x and y\n    function sub(int256 x, int256 y) internal pure returns (int256 z) {\n        require((z = x - y) <= x == (y >= 0));\n    }\n}\n"
    },
    "@uniswap/v3-core/contracts/interfaces/IUniswapV3Factory.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title The interface for the Uniswap V3 Factory\n/// @notice The Uniswap V3 Factory facilitates creation of Uniswap V3 pools and control over the protocol fees\ninterface IUniswapV3Factory {\n    /// @notice Emitted when the owner of the factory is changed\n    /// @param oldOwner The owner before the owner was changed\n    /// @param newOwner The owner after the owner was changed\n    event OwnerChanged(address indexed oldOwner, address indexed newOwner);\n\n    /// @notice Emitted when a pool is created\n    /// @param token0 The first token of the pool by address sort order\n    /// @param token1 The second token of the pool by address sort order\n    /// @param fee The fee collected upon every swap in the pool, denominated in hundredths of a bip\n    /// @param tickSpacing The minimum number of ticks between initialized ticks\n    /// @param pool The address of the created pool\n    event PoolCreated(\n        address indexed token0,\n        address indexed token1,\n        uint24 indexed fee,\n        int24 tickSpacing,\n        address pool\n    );\n\n    /// @notice Emitted when a new fee amount is enabled for pool creation via the factory\n    /// @param fee The enabled fee, denominated in hundredths of a bip\n    /// @param tickSpacing The minimum number of ticks between initialized ticks for pools created with the given fee\n    event FeeAmountEnabled(uint24 indexed fee, int24 indexed tickSpacing);\n\n    /// @notice Returns the current owner of the factory\n    /// @dev Can be changed by the current owner via setOwner\n    /// @return The address of the factory owner\n    function owner() external view returns (address);\n\n    /// @notice Returns the tick spacing for a given fee amount, if enabled, or 0 if not enabled\n    /// @dev A fee amount can never be removed, so this value should be hard coded or cached in the calling context\n    /// @param fee The enabled fee, denominated in hundredths of a bip. Returns 0 in case of unenabled fee\n    /// @return The tick spacing\n    function feeAmountTickSpacing(uint24 fee) external view returns (int24);\n\n    /// @notice Returns the pool address for a given pair of tokens and a fee, or address 0 if it does not exist\n    /// @dev tokenA and tokenB may be passed in either token0/token1 or token1/token0 order\n    /// @param tokenA The contract address of either token0 or token1\n    /// @param tokenB The contract address of the other token\n    /// @param fee The fee collected upon every swap in the pool, denominated in hundredths of a bip\n    /// @return pool The pool address\n    function getPool(\n        address tokenA,\n        address tokenB,\n        uint24 fee\n    ) external view returns (address pool);\n\n    /// @notice Creates a pool for the given two tokens and fee\n    /// @param tokenA One of the two tokens in the desired pool\n    /// @param tokenB The other of the two tokens in the desired pool\n    /// @param fee The desired fee for the pool\n    /// @dev tokenA and tokenB may be passed in either order: token0/token1 or token1/token0. tickSpacing is retrieved\n    /// from the fee. The call will revert if the pool already exists, the fee is invalid, or the token arguments\n    /// are invalid.\n    /// @return pool The address of the newly created pool\n    function createPool(\n        address tokenA,\n        address tokenB,\n        uint24 fee\n    ) external returns (address pool);\n\n    /// @notice Updates the owner of the factory\n    /// @dev Must be called by the current owner\n    /// @param _owner The new owner of the factory\n    function setOwner(address _owner) external;\n\n    /// @notice Enables a fee amount with the given tickSpacing\n    /// @dev Fee amounts may never be removed once enabled\n    /// @param fee The fee amount to enable, denominated in hundredths of a bip (i.e. 1e-6)\n    /// @param tickSpacing The spacing between ticks to be enforced for all pools created with the given fee amount\n    function enableFeeAmount(uint24 fee, int24 tickSpacing) external;\n}\n"
    },
    "contracts/SiloFactory.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity 0.8.13;\n\nimport \"./Silo.sol\";\nimport \"./interfaces/ISiloFactory.sol\";\n\n/// @title SiloFactory\n/// @notice Silo Factory has one job, deploy Silo implementation\n/// @dev Silo Factory is registered within SiloRepository contract and it's given a version. Each version\n/// is different Silo Factory that deploys different Silo implementation. Many Factory contracts can be\n/// registered with the Repository contract.\n/// @custom:security-contact security@silo.finance\ncontract SiloFactory is ISiloFactory {\n    address public siloRepository;\n\n    event InitSiloRepository();\n\n    error OnlyRepository();\n    error RepositoryAlreadySet();\n\n    /// @inheritdoc ISiloFactory\n    function initRepository(address _repository) external {\n        // We don't perform a ping to the repository because this is meant to be called in its constructor\n        if (siloRepository != address(0)) revert RepositoryAlreadySet();\n\n        siloRepository = _repository;\n        emit InitSiloRepository();\n    }\n\n    /// @inheritdoc ISiloFactory\n    function createSilo(address _siloAsset, uint128 _version, bytes memory) external override returns (address silo) {\n        // Only allow silo repository\n        if (msg.sender != siloRepository) revert OnlyRepository();\n\n        silo = address(new Silo(ISiloRepository(msg.sender), _siloAsset, _version));\n        emit NewSiloCreated(silo, _siloAsset, _version);\n    }\n\n    function siloFactoryPing() external pure override returns (bytes4) {\n        return this.siloFactoryPing.selector;\n    }\n}\n"
    },
    "contracts/governance/TreasuryVester.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.13;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\ninterface IToken {\n    function transfer(address dst, uint256 rawAmount) external returns (bool);\n    function balanceOf(address account) external view returns (uint256);\n}\n\n/// @notice Vesting contract for Silo token allocations\n/// @dev Forked from https://github.com/Uniswap/governance/blob/master/contracts/TreasuryVester.sol\n/// @custom:security-contact security@silo.finance\ncontract TreasuryVester is Ownable {\n    /// @notice silo token address\n    address public immutable siloToken;\n    /// @notice wallet address that is vesting token allocation\n    address public recipient;\n\n    /// @notice amount of token that is being allocated for vesting\n    uint256 public immutable vestingAmount;\n    /// @notice timestamp of vesting start date\n    uint256 public immutable vestingBegin;\n    /// @notice timestamp of vesting cliff, aka. the time before which token cannot be claimed\n    uint256 public immutable vestingCliff;\n    /// @notice timestamp of vesting end date\n    uint256 public immutable vestingEnd;\n    /// @notice can it be revoked by owner\n    bool public immutable revocable;\n\n    /// @notice timestamp of last claim\n    uint256 public lastUpdate;\n    /// @notice set to true if vesting has been revoked\n    bool public revoked;\n\n    /// @param _siloToken silo token address\n    /// @param _recipient wallet address that is vesting token allocation\n    /// @param _vestingAmount amount of token that is being allocated for vesting\n    /// @param _vestingBegin timestamp of vesting start date\n    /// @param _vestingCliff timestamp of vesting cliff, aka. the time before which token cannot be claimed\n    /// @param _vestingEnd timestamp of vesting end date\n    /// @param _revocable can it be revoked by owner\n    constructor(\n        address _siloToken,\n        address _recipient,\n        uint256 _vestingAmount,\n        uint256 _vestingBegin,\n        uint256 _vestingCliff,\n        uint256 _vestingEnd,\n        bool _revocable\n    ) {\n        require(_vestingBegin >= block.timestamp, \"TreasuryVester::constructor: vesting begin too early\");\n        require(_vestingCliff >= _vestingBegin, \"TreasuryVester::constructor: cliff is too early\");\n        require(_vestingEnd > _vestingCliff, \"TreasuryVester::constructor: end is too early\");\n\n        siloToken = _siloToken;\n        recipient = _recipient;\n\n        vestingAmount = _vestingAmount;\n        vestingBegin = _vestingBegin;\n        vestingCliff = _vestingCliff;\n        vestingEnd = _vestingEnd;\n\n        lastUpdate = _vestingBegin;\n\n        revocable = _revocable;\n    }\n\n    /// @notice allows current recipient to update vesting wallet\n    /// @param _recipient new wallet address that is going to vest token allocation\n    function setRecipient(address _recipient) external {\n        require(msg.sender == recipient, \"TreasuryVester::setRecipient: unauthorized\");\n        recipient = _recipient;\n    }\n\n    /// @notice revokes vesting\n    /// @dev calls claim() to sent already vested token. The remaining is returned to the owner.\n    function revoke() external onlyOwner {\n        require(revocable, \"TreasuryVester::revoke cannot revoke\");\n        require(!revoked, \"TreasuryVester::revoke token already revoked\");\n\n        if (block.timestamp >= vestingCliff) claim();\n\n        revoked = true;\n\n        require(IToken(siloToken).transfer(owner(), IToken(siloToken).balanceOf(address(this))), \"transfer failed\");\n    }\n\n    /// @notice claim vested token\n    function claim() public {\n        require(!revoked, \"TreasuryVester::claim vesting revoked\");\n        require(block.timestamp >= vestingCliff, \"TreasuryVester::claim: not time yet\");\n        uint256 amount;\n\n        if (block.timestamp >= vestingEnd) {\n            amount = IToken(siloToken).balanceOf(address(this));\n        } else {\n            amount = vestingAmount * (block.timestamp - lastUpdate) / (vestingEnd - vestingBegin);\n            lastUpdate = block.timestamp;\n        }\n\n        require(IToken(siloToken).transfer(recipient, amount), \"transfer failed\");\n    }\n}\n"
    },
    "contracts/governance/SiloSnapshotWrapper.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.13;\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\n\nimport \"./TreasuryVester.sol\";\n\n/// @title Silo Snapshot token\n/// @notice Utility Silo tokens that adds unvested Silo tokens to account balance. It's used for snapshot voting\n///         to allow unvested tokens to vote. It's not transferable.\n/// @custom:security-contact security@silo.finance\ncontract SiloSnapshotWrapper is ERC20 {\n    ERC20 public siloToken;\n    address[] public vestingContracts;\n\n    constructor(address _siloToken, address[] memory _vestingContracts) ERC20(\"Silo Snapshot Token\", \"snapshotSILO\") {\n        require(_siloToken != address(0), \"empty _siloToken\");\n\n        for (uint256 i; i < _vestingContracts.length; i++) {\n            require(_vestingContracts[i] != address(0), \"empty address in _vestingContracts\");\n        }\n\n        siloToken = ERC20(_siloToken);\n        vestingContracts = _vestingContracts;\n    }\n\n    /// @inheritdoc IERC20\n    function totalSupply() public view override returns (uint256) {\n        return siloToken.totalSupply();\n    }\n\n    /// @inheritdoc IERC20\n    function balanceOf(address _account) public view override returns (uint256) {\n        return getCurrentBalance(_account) + getVestingBalance(_account);\n    }\n\n    /// @notice Calculates amount of token that are vesting for account\n    /// @param _account address of account for which to calculate amount of tokens\n    /// @return userBalance amount of tokens vesting\n    function getVestingBalance(address _account) public view returns (uint256 userBalance) {\n        for (uint256 i = 0; i < vestingContracts.length; i++) {\n            if (TreasuryVester(vestingContracts[i]).recipient() == _account) {\n                userBalance += siloToken.balanceOf(vestingContracts[i]);\n            }\n        }\n    }\n\n    /// @notice Current token balance of account\n    /// @param _account address of account for which to calculate current balance\n    /// @return current balance\n    function getCurrentBalance(address _account) public view returns (uint256) {\n        return siloToken.balanceOf(_account);\n    }\n\n    /// @inheritdoc ERC20\n    function _beforeTokenTransfer(address, address, uint256) internal pure override {\n        revert(\"Non-transferable\");\n    }\n}\n"
    },
    "contracts/mock/MockERC20.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity 0.8.13;\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\n\n/// @dev this is MOCK contract - DO NOT USE IT!\ncontract MockERC20 is ERC20 {\n    constructor() ERC20(\"mock ERC20\", \"mock ERC20\") {\n    }\n\n    function mint(address _holder, uint256 _amount) external {\n        _mint(_holder, _amount);\n    }\n\n    function burn(address _holder, uint256 amount) public {\n        _burn(_holder, amount);\n    }\n\n    /// @dev our goal is not test ERC20, so let's make our life a bit easier\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal override {\n        if (from == address(0) || to == address(0)) return;\n\n        _approve(from, to, amount);\n    }\n\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-ERC20Permit.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./draft-IERC20Permit.sol\";\nimport \"../ERC20.sol\";\nimport \"../../../utils/cryptography/draft-EIP712.sol\";\nimport \"../../../utils/cryptography/ECDSA.sol\";\nimport \"../../../utils/Counters.sol\";\n\n/**\n * @dev Implementation of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on `{IERC20-approve}`, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n *\n * _Available since v3.4._\n */\nabstract contract ERC20Permit is ERC20, IERC20Permit, EIP712 {\n    using Counters for Counters.Counter;\n\n    mapping(address => Counters.Counter) private _nonces;\n\n    // solhint-disable-next-line var-name-mixedcase\n    bytes32 private immutable _PERMIT_TYPEHASH =\n        keccak256(\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\");\n\n    /**\n     * @dev Initializes the {EIP712} domain separator using the `name` parameter, and setting `version` to `\"1\"`.\n     *\n     * It's a good idea to use the same `name` that is defined as the ERC20 token name.\n     */\n    constructor(string memory name) EIP712(name, \"1\") {}\n\n    /**\n     * @dev See {IERC20Permit-permit}.\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) public virtual override {\n        require(block.timestamp <= deadline, \"ERC20Permit: expired deadline\");\n\n        bytes32 structHash = keccak256(abi.encode(_PERMIT_TYPEHASH, owner, spender, value, _useNonce(owner), deadline));\n\n        bytes32 hash = _hashTypedDataV4(structHash);\n\n        address signer = ECDSA.recover(hash, v, r, s);\n        require(signer == owner, \"ERC20Permit: invalid signature\");\n\n        _approve(owner, spender, value);\n    }\n\n    /**\n     * @dev See {IERC20Permit-nonces}.\n     */\n    function nonces(address owner) public view virtual override returns (uint256) {\n        return _nonces[owner].current();\n    }\n\n    /**\n     * @dev See {IERC20Permit-DOMAIN_SEPARATOR}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view override returns (bytes32) {\n        return _domainSeparatorV4();\n    }\n\n    /**\n     * @dev \"Consume a nonce\": return the current value and increment.\n     *\n     * _Available since v4.1._\n     */\n    function _useNonce(address owner) internal virtual returns (uint256 current) {\n        Counters.Counter storage nonce = _nonces[owner];\n        current = nonce.current();\n        nonce.increment();\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n */\ninterface IERC20Permit {\n    /**\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n     * given ``owner``'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    /**\n     * @dev Returns the current nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n"
    },
    "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/cryptography/draft-EIP712.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./ECDSA.sol\";\n\n/**\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\n *\n * The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible,\n * thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding\n * they need in their contracts using a combination of `abi.encode` and `keccak256`.\n *\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\n * ({_hashTypedDataV4}).\n *\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\n * the chain id to protect against replay attacks on an eventual fork of the chain.\n *\n * NOTE: This contract implements the version of the encoding known as \"v4\", as implemented by the JSON RPC method\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\n *\n * _Available since v3.4._\n */\nabstract contract EIP712 {\n    /* solhint-disable var-name-mixedcase */\n    // Cache the domain separator as an immutable value, but also store the chain id that it corresponds to, in order to\n    // invalidate the cached domain separator if the chain id changes.\n    bytes32 private immutable _CACHED_DOMAIN_SEPARATOR;\n    uint256 private immutable _CACHED_CHAIN_ID;\n    address private immutable _CACHED_THIS;\n\n    bytes32 private immutable _HASHED_NAME;\n    bytes32 private immutable _HASHED_VERSION;\n    bytes32 private immutable _TYPE_HASH;\n\n    /* solhint-enable var-name-mixedcase */\n\n    /**\n     * @dev Initializes the domain separator and parameter caches.\n     *\n     * The meaning of `name` and `version` is specified in\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\n     *\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\n     * - `version`: the current major version of the signing domain.\n     *\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\n     * contract upgrade].\n     */\n    constructor(string memory name, string memory version) {\n        bytes32 hashedName = keccak256(bytes(name));\n        bytes32 hashedVersion = keccak256(bytes(version));\n        bytes32 typeHash = keccak256(\n            \"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\"\n        );\n        _HASHED_NAME = hashedName;\n        _HASHED_VERSION = hashedVersion;\n        _CACHED_CHAIN_ID = block.chainid;\n        _CACHED_DOMAIN_SEPARATOR = _buildDomainSeparator(typeHash, hashedName, hashedVersion);\n        _CACHED_THIS = address(this);\n        _TYPE_HASH = typeHash;\n    }\n\n    /**\n     * @dev Returns the domain separator for the current chain.\n     */\n    function _domainSeparatorV4() internal view returns (bytes32) {\n        if (address(this) == _CACHED_THIS && block.chainid == _CACHED_CHAIN_ID) {\n            return _CACHED_DOMAIN_SEPARATOR;\n        } else {\n            return _buildDomainSeparator(_TYPE_HASH, _HASHED_NAME, _HASHED_VERSION);\n        }\n    }\n\n    function _buildDomainSeparator(\n        bytes32 typeHash,\n        bytes32 nameHash,\n        bytes32 versionHash\n    ) private view returns (bytes32) {\n        return keccak256(abi.encode(typeHash, nameHash, versionHash, block.chainid, address(this)));\n    }\n\n    /**\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\n     * function returns the hash of the fully encoded EIP712 message for this domain.\n     *\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\n     *\n     * ```solidity\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\n     *     keccak256(\"Mail(address to,string contents)\"),\n     *     mailTo,\n     *     keccak256(bytes(mailContents))\n     * )));\n     * address signer = ECDSA.recover(digest, signature);\n     * ```\n     */\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\n        return ECDSA.toTypedDataHash(_domainSeparatorV4(), structHash);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/cryptography/ECDSA.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/cryptography/ECDSA.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../Strings.sol\";\n\n/**\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\n *\n * These functions can be used to verify that a message was signed by the holder\n * of the private keys of a given address.\n */\nlibrary ECDSA {\n    enum RecoverError {\n        NoError,\n        InvalidSignature,\n        InvalidSignatureLength,\n        InvalidSignatureS,\n        InvalidSignatureV\n    }\n\n    function _throwError(RecoverError error) private pure {\n        if (error == RecoverError.NoError) {\n            return; // no error: do nothing\n        } else if (error == RecoverError.InvalidSignature) {\n            revert(\"ECDSA: invalid signature\");\n        } else if (error == RecoverError.InvalidSignatureLength) {\n            revert(\"ECDSA: invalid signature length\");\n        } else if (error == RecoverError.InvalidSignatureS) {\n            revert(\"ECDSA: invalid signature 's' value\");\n        } else if (error == RecoverError.InvalidSignatureV) {\n            revert(\"ECDSA: invalid signature 'v' value\");\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature` or error string. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     *\n     * Documentation for signature generation:\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\n        // Check the signature length\n        // - case 65: r,s,v signature (standard)\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\n        if (signature.length == 65) {\n            bytes32 r;\n            bytes32 s;\n            uint8 v;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            assembly {\n                r := mload(add(signature, 0x20))\n                s := mload(add(signature, 0x40))\n                v := byte(0, mload(add(signature, 0x60)))\n            }\n            return tryRecover(hash, v, r, s);\n        } else if (signature.length == 64) {\n            bytes32 r;\n            bytes32 vs;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            assembly {\n                r := mload(add(signature, 0x20))\n                vs := mload(add(signature, 0x40))\n            }\n            return tryRecover(hash, r, vs);\n        } else {\n            return (address(0), RecoverError.InvalidSignatureLength);\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature`. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     */\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\n     *\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address, RecoverError) {\n        bytes32 s;\n        uint8 v;\n        assembly {\n            s := and(vs, 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\n            v := add(shr(255, vs), 27)\n        }\n        return tryRecover(hash, v, r, s);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\n     *\n     * _Available since v4.2._\n     */\n    function recover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address, RecoverError) {\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\n        // the valid range for s in (301): 0 < s < secp256k1n ÷ 2 + 1, and for v in (302): v ∈ {27, 28}. Most\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\n        //\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\n        // these malleable signatures as well.\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\n            return (address(0), RecoverError.InvalidSignatureS);\n        }\n        if (v != 27 && v != 28) {\n            return (address(0), RecoverError.InvalidSignatureV);\n        }\n\n        // If the signature is valid (and not malleable), return the signer address\n        address signer = ecrecover(hash, v, r, s);\n        if (signer == address(0)) {\n            return (address(0), RecoverError.InvalidSignature);\n        }\n\n        return (signer, RecoverError.NoError);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     */\n    function recover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\n        // 32 is the length in bytes of hash,\n        // enforced by the type signature above\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n\", Strings.toString(s.length), s));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Typed Data, created from a\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\n     * to the one signed with the\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\n     * JSON-RPC method as part of EIP-712.\n     *\n     * See {recover}.\n     */\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19\\x01\", domainSeparator, structHash));\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Counters.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title Counters\n * @author Matt Condon (@shrugs)\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\n *\n * Include with `using Counters for Counters.Counter;`\n */\nlibrary Counters {\n    struct Counter {\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\n        uint256 _value; // default: 0\n    }\n\n    function current(Counter storage counter) internal view returns (uint256) {\n        return counter._value;\n    }\n\n    function increment(Counter storage counter) internal {\n        unchecked {\n            counter._value += 1;\n        }\n    }\n\n    function decrement(Counter storage counter) internal {\n        uint256 value = counter._value;\n        require(value > 0, \"Counter: decrement overflow\");\n        unchecked {\n            counter._value = value - 1;\n        }\n    }\n\n    function reset(Counter storage counter) internal {\n        counter._value = 0;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Strings.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp >>= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/ERC20Votes.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/ERC20Votes.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./draft-ERC20Permit.sol\";\nimport \"../../../utils/math/Math.sol\";\nimport \"../../../utils/math/SafeCast.sol\";\nimport \"../../../utils/cryptography/ECDSA.sol\";\n\n/**\n * @dev Extension of ERC20 to support Compound-like voting and delegation. This version is more generic than Compound's,\n * and supports token supply up to 2^224^ - 1, while COMP is limited to 2^96^ - 1.\n *\n * NOTE: If exact COMP compatibility is required, use the {ERC20VotesComp} variant of this module.\n *\n * This extension keeps a history (checkpoints) of each account's vote power. Vote power can be delegated either\n * by calling the {delegate} function directly, or by providing a signature to be used with {delegateBySig}. Voting\n * power can be queried through the public accessors {getVotes} and {getPastVotes}.\n *\n * By default, token balance does not account for voting power. This makes transfers cheaper. The downside is that it\n * requires users to delegate to themselves in order to activate checkpoints and have their voting power tracked.\n * Enabling self-delegation can easily be done by overriding the {delegates} function. Keep in mind however that this\n * will significantly increase the base gas cost of transfers.\n *\n * _Available since v4.2._\n */\nabstract contract ERC20Votes is ERC20Permit {\n    struct Checkpoint {\n        uint32 fromBlock;\n        uint224 votes;\n    }\n\n    bytes32 private constant _DELEGATION_TYPEHASH =\n        keccak256(\"Delegation(address delegatee,uint256 nonce,uint256 expiry)\");\n\n    mapping(address => address) private _delegates;\n    mapping(address => Checkpoint[]) private _checkpoints;\n    Checkpoint[] private _totalSupplyCheckpoints;\n\n    /**\n     * @dev Emitted when an account changes their delegate.\n     */\n    event DelegateChanged(address indexed delegator, address indexed fromDelegate, address indexed toDelegate);\n\n    /**\n     * @dev Emitted when a token transfer or delegate change results in changes to an account's voting power.\n     */\n    event DelegateVotesChanged(address indexed delegate, uint256 previousBalance, uint256 newBalance);\n\n    /**\n     * @dev Get the `pos`-th checkpoint for `account`.\n     */\n    function checkpoints(address account, uint32 pos) public view virtual returns (Checkpoint memory) {\n        return _checkpoints[account][pos];\n    }\n\n    /**\n     * @dev Get number of checkpoints for `account`.\n     */\n    function numCheckpoints(address account) public view virtual returns (uint32) {\n        return SafeCast.toUint32(_checkpoints[account].length);\n    }\n\n    /**\n     * @dev Get the address `account` is currently delegating to.\n     */\n    function delegates(address account) public view virtual returns (address) {\n        return _delegates[account];\n    }\n\n    /**\n     * @dev Gets the current votes balance for `account`\n     */\n    function getVotes(address account) public view returns (uint256) {\n        uint256 pos = _checkpoints[account].length;\n        return pos == 0 ? 0 : _checkpoints[account][pos - 1].votes;\n    }\n\n    /**\n     * @dev Retrieve the number of votes for `account` at the end of `blockNumber`.\n     *\n     * Requirements:\n     *\n     * - `blockNumber` must have been already mined\n     */\n    function getPastVotes(address account, uint256 blockNumber) public view returns (uint256) {\n        require(blockNumber < block.number, \"ERC20Votes: block not yet mined\");\n        return _checkpointsLookup(_checkpoints[account], blockNumber);\n    }\n\n    /**\n     * @dev Retrieve the `totalSupply` at the end of `blockNumber`. Note, this value is the sum of all balances.\n     * It is but NOT the sum of all the delegated votes!\n     *\n     * Requirements:\n     *\n     * - `blockNumber` must have been already mined\n     */\n    function getPastTotalSupply(uint256 blockNumber) public view returns (uint256) {\n        require(blockNumber < block.number, \"ERC20Votes: block not yet mined\");\n        return _checkpointsLookup(_totalSupplyCheckpoints, blockNumber);\n    }\n\n    /**\n     * @dev Lookup a value in a list of (sorted) checkpoints.\n     */\n    function _checkpointsLookup(Checkpoint[] storage ckpts, uint256 blockNumber) private view returns (uint256) {\n        // We run a binary search to look for the earliest checkpoint taken after `blockNumber`.\n        //\n        // During the loop, the index of the wanted checkpoint remains in the range [low-1, high).\n        // With each iteration, either `low` or `high` is moved towards the middle of the range to maintain the invariant.\n        // - If the middle checkpoint is after `blockNumber`, we look in [low, mid)\n        // - If the middle checkpoint is before or equal to `blockNumber`, we look in [mid+1, high)\n        // Once we reach a single value (when low == high), we've found the right checkpoint at the index high-1, if not\n        // out of bounds (in which case we're looking too far in the past and the result is 0).\n        // Note that if the latest checkpoint available is exactly for `blockNumber`, we end up with an index that is\n        // past the end of the array, so we technically don't find a checkpoint after `blockNumber`, but it works out\n        // the same.\n        uint256 high = ckpts.length;\n        uint256 low = 0;\n        while (low < high) {\n            uint256 mid = Math.average(low, high);\n            if (ckpts[mid].fromBlock > blockNumber) {\n                high = mid;\n            } else {\n                low = mid + 1;\n            }\n        }\n\n        return high == 0 ? 0 : ckpts[high - 1].votes;\n    }\n\n    /**\n     * @dev Delegate votes from the sender to `delegatee`.\n     */\n    function delegate(address delegatee) public virtual {\n        _delegate(_msgSender(), delegatee);\n    }\n\n    /**\n     * @dev Delegates votes from signer to `delegatee`\n     */\n    function delegateBySig(\n        address delegatee,\n        uint256 nonce,\n        uint256 expiry,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) public virtual {\n        require(block.timestamp <= expiry, \"ERC20Votes: signature expired\");\n        address signer = ECDSA.recover(\n            _hashTypedDataV4(keccak256(abi.encode(_DELEGATION_TYPEHASH, delegatee, nonce, expiry))),\n            v,\n            r,\n            s\n        );\n        require(nonce == _useNonce(signer), \"ERC20Votes: invalid nonce\");\n        _delegate(signer, delegatee);\n    }\n\n    /**\n     * @dev Maximum token supply. Defaults to `type(uint224).max` (2^224^ - 1).\n     */\n    function _maxSupply() internal view virtual returns (uint224) {\n        return type(uint224).max;\n    }\n\n    /**\n     * @dev Snapshots the totalSupply after it has been increased.\n     */\n    function _mint(address account, uint256 amount) internal virtual override {\n        super._mint(account, amount);\n        require(totalSupply() <= _maxSupply(), \"ERC20Votes: total supply risks overflowing votes\");\n\n        _writeCheckpoint(_totalSupplyCheckpoints, _add, amount);\n    }\n\n    /**\n     * @dev Snapshots the totalSupply after it has been decreased.\n     */\n    function _burn(address account, uint256 amount) internal virtual override {\n        super._burn(account, amount);\n\n        _writeCheckpoint(_totalSupplyCheckpoints, _subtract, amount);\n    }\n\n    /**\n     * @dev Move voting power when tokens are transferred.\n     *\n     * Emits a {DelegateVotesChanged} event.\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual override {\n        super._afterTokenTransfer(from, to, amount);\n\n        _moveVotingPower(delegates(from), delegates(to), amount);\n    }\n\n    /**\n     * @dev Change delegation for `delegator` to `delegatee`.\n     *\n     * Emits events {DelegateChanged} and {DelegateVotesChanged}.\n     */\n    function _delegate(address delegator, address delegatee) internal virtual {\n        address currentDelegate = delegates(delegator);\n        uint256 delegatorBalance = balanceOf(delegator);\n        _delegates[delegator] = delegatee;\n\n        emit DelegateChanged(delegator, currentDelegate, delegatee);\n\n        _moveVotingPower(currentDelegate, delegatee, delegatorBalance);\n    }\n\n    function _moveVotingPower(\n        address src,\n        address dst,\n        uint256 amount\n    ) private {\n        if (src != dst && amount > 0) {\n            if (src != address(0)) {\n                (uint256 oldWeight, uint256 newWeight) = _writeCheckpoint(_checkpoints[src], _subtract, amount);\n                emit DelegateVotesChanged(src, oldWeight, newWeight);\n            }\n\n            if (dst != address(0)) {\n                (uint256 oldWeight, uint256 newWeight) = _writeCheckpoint(_checkpoints[dst], _add, amount);\n                emit DelegateVotesChanged(dst, oldWeight, newWeight);\n            }\n        }\n    }\n\n    function _writeCheckpoint(\n        Checkpoint[] storage ckpts,\n        function(uint256, uint256) view returns (uint256) op,\n        uint256 delta\n    ) private returns (uint256 oldWeight, uint256 newWeight) {\n        uint256 pos = ckpts.length;\n        oldWeight = pos == 0 ? 0 : ckpts[pos - 1].votes;\n        newWeight = op(oldWeight, delta);\n\n        if (pos > 0 && ckpts[pos - 1].fromBlock == block.number) {\n            ckpts[pos - 1].votes = SafeCast.toUint224(newWeight);\n        } else {\n            ckpts.push(Checkpoint({fromBlock: SafeCast.toUint32(block.number), votes: SafeCast.toUint224(newWeight)}));\n        }\n    }\n\n    function _add(uint256 a, uint256 b) private pure returns (uint256) {\n        return a + b;\n    }\n\n    function _subtract(uint256 a, uint256 b) private pure returns (uint256) {\n        return a - b;\n    }\n}\n"
    },
    "@openzeppelin/contracts/governance/extensions/GovernorVotes.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (governance/extensions/GovernorVotes.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../Governor.sol\";\nimport \"../../token/ERC20/extensions/ERC20Votes.sol\";\nimport \"../../utils/math/Math.sol\";\n\n/**\n * @dev Extension of {Governor} for voting weight extraction from an {ERC20Votes} token.\n *\n * _Available since v4.3._\n */\nabstract contract GovernorVotes is Governor {\n    ERC20Votes public immutable token;\n\n    constructor(ERC20Votes tokenAddress) {\n        token = tokenAddress;\n    }\n\n    /**\n     * Read the voting weight from the token's built in snapshot mechanism (see {IGovernor-getVotes}).\n     */\n    function getVotes(address account, uint256 blockNumber) public view virtual override returns (uint256) {\n        return token.getPastVotes(account, blockNumber);\n    }\n}\n"
    },
    "@openzeppelin/contracts/governance/Governor.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (governance/Governor.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/cryptography/ECDSA.sol\";\nimport \"../utils/cryptography/draft-EIP712.sol\";\nimport \"../utils/introspection/ERC165.sol\";\nimport \"../utils/math/SafeCast.sol\";\nimport \"../utils/Address.sol\";\nimport \"../utils/Context.sol\";\nimport \"../utils/Timers.sol\";\nimport \"./IGovernor.sol\";\n\n/**\n * @dev Core of the governance system, designed to be extended though various modules.\n *\n * This contract is abstract and requires several function to be implemented in various modules:\n *\n * - A counting module must implement {quorum}, {_quorumReached}, {_voteSucceeded} and {_countVote}\n * - A voting module must implement {getVotes}\n * - Additionanly, the {votingPeriod} must also be implemented\n *\n * _Available since v4.3._\n */\nabstract contract Governor is Context, ERC165, EIP712, IGovernor {\n    using SafeCast for uint256;\n    using Timers for Timers.BlockNumber;\n\n    bytes32 public constant BALLOT_TYPEHASH = keccak256(\"Ballot(uint256 proposalId,uint8 support)\");\n\n    struct ProposalCore {\n        Timers.BlockNumber voteStart;\n        Timers.BlockNumber voteEnd;\n        bool executed;\n        bool canceled;\n    }\n\n    string private _name;\n\n    mapping(uint256 => ProposalCore) private _proposals;\n\n    /**\n     * @dev Restrict access to governor executing address. Some module might override the _executor function to make\n     * sure this modifier is consistant with the execution model.\n     */\n    modifier onlyGovernance() {\n        require(_msgSender() == _executor(), \"Governor: onlyGovernance\");\n        _;\n    }\n\n    /**\n     * @dev Sets the value for {name} and {version}\n     */\n    constructor(string memory name_) EIP712(name_, version()) {\n        _name = name_;\n    }\n\n    /**\n     * @dev Function to receive ETH that will be handled by the governor (disabled if executor is a third party contract)\n     */\n    receive() external payable virtual {\n        require(_executor() == address(this));\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC165) returns (bool) {\n        return interfaceId == type(IGovernor).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IGovernor-name}.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev See {IGovernor-version}.\n     */\n    function version() public view virtual override returns (string memory) {\n        return \"1\";\n    }\n\n    /**\n     * @dev See {IGovernor-hashProposal}.\n     *\n     * The proposal id is produced by hashing the RLC encoded `targets` array, the `values` array, the `calldatas` array\n     * and the descriptionHash (bytes32 which itself is the keccak256 hash of the description string). This proposal id\n     * can be produced from the proposal data which is part of the {ProposalCreated} event. It can even be computed in\n     * advance, before the proposal is submitted.\n     *\n     * Note that the chainId and the governor address are not part of the proposal id computation. Consequently, the\n     * same proposal (with same operation and same description) will have the same id if submitted on multiple governors\n     * accross multiple networks. This also means that in order to execute the same operation twice (on the same\n     * governor) the proposer will have to change the description in order to avoid proposal id conflicts.\n     */\n    function hashProposal(\n        address[] memory targets,\n        uint256[] memory values,\n        bytes[] memory calldatas,\n        bytes32 descriptionHash\n    ) public pure virtual override returns (uint256) {\n        return uint256(keccak256(abi.encode(targets, values, calldatas, descriptionHash)));\n    }\n\n    /**\n     * @dev See {IGovernor-state}.\n     */\n    function state(uint256 proposalId) public view virtual override returns (ProposalState) {\n        ProposalCore memory proposal = _proposals[proposalId];\n\n        if (proposal.executed) {\n            return ProposalState.Executed;\n        } else if (proposal.canceled) {\n            return ProposalState.Canceled;\n        } else if (proposal.voteStart.getDeadline() >= block.number) {\n            return ProposalState.Pending;\n        } else if (proposal.voteEnd.getDeadline() >= block.number) {\n            return ProposalState.Active;\n        } else if (proposal.voteEnd.isExpired()) {\n            return\n                _quorumReached(proposalId) && _voteSucceeded(proposalId)\n                    ? ProposalState.Succeeded\n                    : ProposalState.Defeated;\n        } else {\n            revert(\"Governor: unknown proposal id\");\n        }\n    }\n\n    /**\n     * @dev See {IGovernor-proposalSnapshot}.\n     */\n    function proposalSnapshot(uint256 proposalId) public view virtual override returns (uint256) {\n        return _proposals[proposalId].voteStart.getDeadline();\n    }\n\n    /**\n     * @dev See {IGovernor-proposalDeadline}.\n     */\n    function proposalDeadline(uint256 proposalId) public view virtual override returns (uint256) {\n        return _proposals[proposalId].voteEnd.getDeadline();\n    }\n\n    /**\n     * @dev Part of the Governor Bravo's interface: _\"The number of votes required in order for a voter to become a proposer\"_.\n     */\n    function proposalThreshold() public view virtual returns (uint256) {\n        return 0;\n    }\n\n    /**\n     * @dev Amount of votes already cast passes the threshold limit.\n     */\n    function _quorumReached(uint256 proposalId) internal view virtual returns (bool);\n\n    /**\n     * @dev Is the proposal successful or not.\n     */\n    function _voteSucceeded(uint256 proposalId) internal view virtual returns (bool);\n\n    /**\n     * @dev Register a vote with a given support and voting weight.\n     *\n     * Note: Support is generic and can represent various things depending on the voting system used.\n     */\n    function _countVote(\n        uint256 proposalId,\n        address account,\n        uint8 support,\n        uint256 weight\n    ) internal virtual;\n\n    /**\n     * @dev See {IGovernor-propose}.\n     */\n    function propose(\n        address[] memory targets,\n        uint256[] memory values,\n        bytes[] memory calldatas,\n        string memory description\n    ) public virtual override returns (uint256) {\n        require(\n            getVotes(msg.sender, block.number - 1) >= proposalThreshold(),\n            \"GovernorCompatibilityBravo: proposer votes below proposal threshold\"\n        );\n\n        uint256 proposalId = hashProposal(targets, values, calldatas, keccak256(bytes(description)));\n\n        require(targets.length == values.length, \"Governor: invalid proposal length\");\n        require(targets.length == calldatas.length, \"Governor: invalid proposal length\");\n        require(targets.length > 0, \"Governor: empty proposal\");\n\n        ProposalCore storage proposal = _proposals[proposalId];\n        require(proposal.voteStart.isUnset(), \"Governor: proposal already exists\");\n\n        uint64 snapshot = block.number.toUint64() + votingDelay().toUint64();\n        uint64 deadline = snapshot + votingPeriod().toUint64();\n\n        proposal.voteStart.setDeadline(snapshot);\n        proposal.voteEnd.setDeadline(deadline);\n\n        emit ProposalCreated(\n            proposalId,\n            _msgSender(),\n            targets,\n            values,\n            new string[](targets.length),\n            calldatas,\n            snapshot,\n            deadline,\n            description\n        );\n\n        return proposalId;\n    }\n\n    /**\n     * @dev See {IGovernor-execute}.\n     */\n    function execute(\n        address[] memory targets,\n        uint256[] memory values,\n        bytes[] memory calldatas,\n        bytes32 descriptionHash\n    ) public payable virtual override returns (uint256) {\n        uint256 proposalId = hashProposal(targets, values, calldatas, descriptionHash);\n\n        ProposalState status = state(proposalId);\n        require(\n            status == ProposalState.Succeeded || status == ProposalState.Queued,\n            \"Governor: proposal not successful\"\n        );\n        _proposals[proposalId].executed = true;\n\n        emit ProposalExecuted(proposalId);\n\n        _execute(proposalId, targets, values, calldatas, descriptionHash);\n\n        return proposalId;\n    }\n\n    /**\n     * @dev Internal execution mechanism. Can be overriden to implement different execution mechanism\n     */\n    function _execute(\n        uint256, /* proposalId */\n        address[] memory targets,\n        uint256[] memory values,\n        bytes[] memory calldatas,\n        bytes32 /*descriptionHash*/\n    ) internal virtual {\n        string memory errorMessage = \"Governor: call reverted without message\";\n        for (uint256 i = 0; i < targets.length; ++i) {\n            (bool success, bytes memory returndata) = targets[i].call{value: values[i]}(calldatas[i]);\n            Address.verifyCallResult(success, returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Internal cancel mechanism: locks up the proposal timer, preventing it from being re-submitted. Marks it as\n     * canceled to allow distinguishing it from executed proposals.\n     *\n     * Emits a {IGovernor-ProposalCanceled} event.\n     */\n    function _cancel(\n        address[] memory targets,\n        uint256[] memory values,\n        bytes[] memory calldatas,\n        bytes32 descriptionHash\n    ) internal virtual returns (uint256) {\n        uint256 proposalId = hashProposal(targets, values, calldatas, descriptionHash);\n        ProposalState status = state(proposalId);\n\n        require(\n            status != ProposalState.Canceled && status != ProposalState.Expired && status != ProposalState.Executed,\n            \"Governor: proposal not active\"\n        );\n        _proposals[proposalId].canceled = true;\n\n        emit ProposalCanceled(proposalId);\n\n        return proposalId;\n    }\n\n    /**\n     * @dev See {IGovernor-castVote}.\n     */\n    function castVote(uint256 proposalId, uint8 support) public virtual override returns (uint256) {\n        address voter = _msgSender();\n        return _castVote(proposalId, voter, support, \"\");\n    }\n\n    /**\n     * @dev See {IGovernor-castVoteWithReason}.\n     */\n    function castVoteWithReason(\n        uint256 proposalId,\n        uint8 support,\n        string calldata reason\n    ) public virtual override returns (uint256) {\n        address voter = _msgSender();\n        return _castVote(proposalId, voter, support, reason);\n    }\n\n    /**\n     * @dev See {IGovernor-castVoteBySig}.\n     */\n    function castVoteBySig(\n        uint256 proposalId,\n        uint8 support,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) public virtual override returns (uint256) {\n        address voter = ECDSA.recover(\n            _hashTypedDataV4(keccak256(abi.encode(BALLOT_TYPEHASH, proposalId, support))),\n            v,\n            r,\n            s\n        );\n        return _castVote(proposalId, voter, support, \"\");\n    }\n\n    /**\n     * @dev Internal vote casting mechanism: Check that the vote is pending, that it has not been cast yet, retrieve\n     * voting weight using {IGovernor-getVotes} and call the {_countVote} internal function.\n     *\n     * Emits a {IGovernor-VoteCast} event.\n     */\n    function _castVote(\n        uint256 proposalId,\n        address account,\n        uint8 support,\n        string memory reason\n    ) internal virtual returns (uint256) {\n        ProposalCore storage proposal = _proposals[proposalId];\n        require(state(proposalId) == ProposalState.Active, \"Governor: vote not currently active\");\n\n        uint256 weight = getVotes(account, proposal.voteStart.getDeadline());\n        _countVote(proposalId, account, support, weight);\n\n        emit VoteCast(account, proposalId, support, weight, reason);\n\n        return weight;\n    }\n\n    /**\n     * @dev Address through which the governor executes action. Will be overloaded by module that execute actions\n     * through another contract such as a timelock.\n     */\n    function _executor() internal view virtual returns (address) {\n        return address(this);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/ERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Timers.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Timers.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Tooling for timepoints, timers and delays\n */\nlibrary Timers {\n    struct Timestamp {\n        uint64 _deadline;\n    }\n\n    function getDeadline(Timestamp memory timer) internal pure returns (uint64) {\n        return timer._deadline;\n    }\n\n    function setDeadline(Timestamp storage timer, uint64 timestamp) internal {\n        timer._deadline = timestamp;\n    }\n\n    function reset(Timestamp storage timer) internal {\n        timer._deadline = 0;\n    }\n\n    function isUnset(Timestamp memory timer) internal pure returns (bool) {\n        return timer._deadline == 0;\n    }\n\n    function isStarted(Timestamp memory timer) internal pure returns (bool) {\n        return timer._deadline > 0;\n    }\n\n    function isPending(Timestamp memory timer) internal view returns (bool) {\n        return timer._deadline > block.timestamp;\n    }\n\n    function isExpired(Timestamp memory timer) internal view returns (bool) {\n        return isStarted(timer) && timer._deadline <= block.timestamp;\n    }\n\n    struct BlockNumber {\n        uint64 _deadline;\n    }\n\n    function getDeadline(BlockNumber memory timer) internal pure returns (uint64) {\n        return timer._deadline;\n    }\n\n    function setDeadline(BlockNumber storage timer, uint64 timestamp) internal {\n        timer._deadline = timestamp;\n    }\n\n    function reset(BlockNumber storage timer) internal {\n        timer._deadline = 0;\n    }\n\n    function isUnset(BlockNumber memory timer) internal pure returns (bool) {\n        return timer._deadline == 0;\n    }\n\n    function isStarted(BlockNumber memory timer) internal pure returns (bool) {\n        return timer._deadline > 0;\n    }\n\n    function isPending(BlockNumber memory timer) internal view returns (bool) {\n        return timer._deadline > block.number;\n    }\n\n    function isExpired(BlockNumber memory timer) internal view returns (bool) {\n        return isStarted(timer) && timer._deadline <= block.number;\n    }\n}\n"
    },
    "@openzeppelin/contracts/governance/IGovernor.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (governance/IGovernor.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Interface of the {Governor} core.\n *\n * _Available since v4.3._\n */\nabstract contract IGovernor is IERC165 {\n    enum ProposalState {\n        Pending,\n        Active,\n        Canceled,\n        Defeated,\n        Succeeded,\n        Queued,\n        Expired,\n        Executed\n    }\n\n    /**\n     * @dev Emitted when a proposal is created.\n     */\n    event ProposalCreated(\n        uint256 proposalId,\n        address proposer,\n        address[] targets,\n        uint256[] values,\n        string[] signatures,\n        bytes[] calldatas,\n        uint256 startBlock,\n        uint256 endBlock,\n        string description\n    );\n\n    /**\n     * @dev Emitted when a proposal is canceled.\n     */\n    event ProposalCanceled(uint256 proposalId);\n\n    /**\n     * @dev Emitted when a proposal is executed.\n     */\n    event ProposalExecuted(uint256 proposalId);\n\n    /**\n     * @dev Emitted when a vote is cast.\n     *\n     * Note: `support` values should be seen as buckets. There interpretation depends on the voting module used.\n     */\n    event VoteCast(address indexed voter, uint256 proposalId, uint8 support, uint256 weight, string reason);\n\n    /**\n     * @notice module:core\n     * @dev Name of the governor instance (used in building the ERC712 domain separator).\n     */\n    function name() public view virtual returns (string memory);\n\n    /**\n     * @notice module:core\n     * @dev Version of the governor instance (used in building the ERC712 domain separator). Default: \"1\"\n     */\n    function version() public view virtual returns (string memory);\n\n    /**\n     * @notice module:voting\n     * @dev A description of the possible `support` values for {castVote} and the way these votes are counted, meant to\n     * be consumed by UIs to show correct vote options and interpret the results. The string is a URL-encoded sequence of\n     * key-value pairs that each describe one aspect, for example `support=bravo&quorum=for,abstain`.\n     *\n     * There are 2 standard keys: `support` and `quorum`.\n     *\n     * - `support=bravo` refers to the vote options 0 = Against, 1 = For, 2 = Abstain, as in `GovernorBravo`.\n     * - `quorum=bravo` means that only For votes are counted towards quorum.\n     * - `quorum=for,abstain` means that both For and Abstain votes are counted towards quorum.\n     *\n     * NOTE: The string can be decoded by the standard\n     * https://developer.mozilla.org/en-US/docs/Web/API/URLSearchParams[`URLSearchParams`]\n     * JavaScript class.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function COUNTING_MODE() public pure virtual returns (string memory);\n\n    /**\n     * @notice module:core\n     * @dev Hashing function used to (re)build the proposal id from the proposal details..\n     */\n    function hashProposal(\n        address[] calldata targets,\n        uint256[] calldata values,\n        bytes[] calldata calldatas,\n        bytes32 descriptionHash\n    ) public pure virtual returns (uint256);\n\n    /**\n     * @notice module:core\n     * @dev Current state of a proposal, following Compound's convention\n     */\n    function state(uint256 proposalId) public view virtual returns (ProposalState);\n\n    /**\n     * @notice module:core\n     * @dev Block number used to retrieve user's votes and quorum. As per Compound's Comp and OpenZeppelin's\n     * ERC20Votes, the snapshot is performed at the end of this block. Hence, voting for this proposal starts at the\n     * beginning of the following block.\n     */\n    function proposalSnapshot(uint256 proposalId) public view virtual returns (uint256);\n\n    /**\n     * @notice module:core\n     * @dev Block number at which votes close. Votes close at the end of this block, so it is possible to cast a vote\n     * during this block.\n     */\n    function proposalDeadline(uint256 proposalId) public view virtual returns (uint256);\n\n    /**\n     * @notice module:user-config\n     * @dev Delay, in number of block, between the proposal is created and the vote starts. This can be increassed to\n     * leave time for users to buy voting power, of delegate it, before the voting of a proposal starts.\n     */\n    function votingDelay() public view virtual returns (uint256);\n\n    /**\n     * @notice module:user-config\n     * @dev Delay, in number of blocks, between the vote start and vote ends.\n     *\n     * NOTE: The {votingDelay} can delay the start of the vote. This must be considered when setting the voting\n     * duration compared to the voting delay.\n     */\n    function votingPeriod() public view virtual returns (uint256);\n\n    /**\n     * @notice module:user-config\n     * @dev Minimum number of cast voted required for a proposal to be successful.\n     *\n     * Note: The `blockNumber` parameter corresponds to the snaphot used for counting vote. This allows to scale the\n     * quroum depending on values such as the totalSupply of a token at this block (see {ERC20Votes}).\n     */\n    function quorum(uint256 blockNumber) public view virtual returns (uint256);\n\n    /**\n     * @notice module:reputation\n     * @dev Voting power of an `account` at a specific `blockNumber`.\n     *\n     * Note: this can be implemented in a number of ways, for example by reading the delegated balance from one (or\n     * multiple), {ERC20Votes} tokens.\n     */\n    function getVotes(address account, uint256 blockNumber) public view virtual returns (uint256);\n\n    /**\n     * @notice module:voting\n     * @dev Returns weither `account` has cast a vote on `proposalId`.\n     */\n    function hasVoted(uint256 proposalId, address account) public view virtual returns (bool);\n\n    /**\n     * @dev Create a new proposal. Vote start {IGovernor-votingDelay} blocks after the proposal is created and ends\n     * {IGovernor-votingPeriod} blocks after the voting starts.\n     *\n     * Emits a {ProposalCreated} event.\n     */\n    function propose(\n        address[] memory targets,\n        uint256[] memory values,\n        bytes[] memory calldatas,\n        string memory description\n    ) public virtual returns (uint256 proposalId);\n\n    /**\n     * @dev Execute a successful proposal. This requires the quorum to be reached, the vote to be successful, and the\n     * deadline to be reached.\n     *\n     * Emits a {ProposalExecuted} event.\n     *\n     * Note: some module can modify the requirements for execution, for example by adding an additional timelock.\n     */\n    function execute(\n        address[] memory targets,\n        uint256[] memory values,\n        bytes[] memory calldatas,\n        bytes32 descriptionHash\n    ) public payable virtual returns (uint256 proposalId);\n\n    /**\n     * @dev Cast a vote\n     *\n     * Emits a {VoteCast} event.\n     */\n    function castVote(uint256 proposalId, uint8 support) public virtual returns (uint256 balance);\n\n    /**\n     * @dev Cast a with a reason\n     *\n     * Emits a {VoteCast} event.\n     */\n    function castVoteWithReason(\n        uint256 proposalId,\n        uint8 support,\n        string calldata reason\n    ) public virtual returns (uint256 balance);\n\n    /**\n     * @dev Cast a vote using the user cryptographic signature.\n     *\n     * Emits a {VoteCast} event.\n     */\n    function castVoteBySig(\n        uint256 proposalId,\n        uint8 support,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) public virtual returns (uint256 balance);\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/governance/extensions/GovernorVotesQuorumFraction.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (governance/extensions/GovernorVotesQuorumFraction.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./GovernorVotes.sol\";\n\n/**\n * @dev Extension of {Governor} for voting weight extraction from an {ERC20Votes} token and a quorum expressed as a\n * fraction of the total supply.\n *\n * _Available since v4.3._\n */\nabstract contract GovernorVotesQuorumFraction is GovernorVotes {\n    uint256 private _quorumNumerator;\n\n    event QuorumNumeratorUpdated(uint256 oldQuorumNumerator, uint256 newQuorumNumerator);\n\n    constructor(uint256 quorumNumeratorValue) {\n        _updateQuorumNumerator(quorumNumeratorValue);\n    }\n\n    function quorumNumerator() public view virtual returns (uint256) {\n        return _quorumNumerator;\n    }\n\n    function quorumDenominator() public view virtual returns (uint256) {\n        return 100;\n    }\n\n    function quorum(uint256 blockNumber) public view virtual override returns (uint256) {\n        return (token.getPastTotalSupply(blockNumber) * quorumNumerator()) / quorumDenominator();\n    }\n\n    function updateQuorumNumerator(uint256 newQuorumNumerator) external virtual onlyGovernance {\n        _updateQuorumNumerator(newQuorumNumerator);\n    }\n\n    function _updateQuorumNumerator(uint256 newQuorumNumerator) internal virtual {\n        require(\n            newQuorumNumerator <= quorumDenominator(),\n            \"GovernorVotesQuorumFraction: quorumNumerator over quorumDenominator\"\n        );\n\n        uint256 oldQuorumNumerator = _quorumNumerator;\n        _quorumNumerator = newQuorumNumerator;\n\n        emit QuorumNumeratorUpdated(oldQuorumNumerator, newQuorumNumerator);\n    }\n}\n"
    },
    "contracts/governance/SiloGovernor.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.13;\n\nimport \"@openzeppelin/contracts/governance/Governor.sol\";\nimport \"@openzeppelin/contracts/governance/extensions/GovernorSettings.sol\";\nimport \"@openzeppelin/contracts/governance/extensions/GovernorCountingSimple.sol\";\nimport \"@openzeppelin/contracts/governance/extensions/GovernorVotes.sol\";\nimport \"@openzeppelin/contracts/governance/extensions/GovernorVotesQuorumFraction.sol\";\nimport \"@openzeppelin/contracts/governance/extensions/GovernorTimelockControl.sol\";\n\n/// @title Silo Governor\n/// @notice Silo Goverannce contract\n/// @custom:security-contact security@silo.finance\ncontract SiloGovernor is\n    Governor,\n    GovernorSettings,\n    GovernorCountingSimple,\n    GovernorVotes,\n    GovernorVotesQuorumFraction,\n    GovernorTimelockControl\n{\n    /// @param _token address of SiloGovernanceToken\n    /// @param _timelock openzeppelin timelock contract\n    constructor(ERC20Votes _token, TimelockController _timelock)\n        Governor(\"SiloGovernor\")\n        GovernorSettings(1 /* 1 block */, 45818 /* 1 week */, 100000e18)\n        GovernorVotes(_token)\n        GovernorVotesQuorumFraction(1)\n        GovernorTimelockControl(_timelock)\n    {}\n\n    /// @inheritdoc IGovernor\n    function propose(\n        address[] memory _targets,\n        uint256[] memory _values,\n        bytes[] memory _calldatas,\n        string memory _description\n    )\n        public\n        override(Governor, IGovernor)\n        returns (uint256)\n    {\n        return super.propose(_targets, _values, _calldatas, _description);\n    }\n\n    /// @inheritdoc IGovernor\n    function votingDelay()\n        public\n        view\n        override(IGovernor, GovernorSettings)\n        returns (uint256)\n    {\n        return super.votingDelay();\n    }\n\n    /// @inheritdoc IGovernor\n    function votingPeriod()\n        public\n        view\n        override(IGovernor, GovernorSettings)\n        returns (uint256)\n    {\n        return super.votingPeriod();\n    }\n\n    /// @inheritdoc IGovernor\n    function quorum(uint256 _blockNumber)\n        public\n        view\n        override(IGovernor, GovernorVotesQuorumFraction)\n        returns (uint256)\n    {\n        return super.quorum(_blockNumber);\n    }\n\n    /// @inheritdoc IGovernor\n    function getVotes(address _account, uint256 _blockNumber)\n        public\n        view\n        override(IGovernor, GovernorVotes)\n        returns (uint256)\n    {\n        return super.getVotes(_account, _blockNumber);\n    }\n\n    /// @inheritdoc Governor\n    function state(uint256 _proposalId)\n        public\n        view\n        override(Governor, GovernorTimelockControl)\n        returns (ProposalState)\n    {\n        return super.state(_proposalId);\n    }\n\n    /// @inheritdoc Governor\n    function proposalThreshold()\n        public\n        view\n        override(Governor, GovernorSettings)\n        returns (uint256)\n    {\n        return super.proposalThreshold();\n    }\n\n    /// @inheritdoc Governor\n    function supportsInterface(bytes4 _interfaceId)\n        public\n        view\n        override(Governor, GovernorTimelockControl)\n        returns (bool)\n    {\n        return super.supportsInterface(_interfaceId);\n    }\n\n    /// @inheritdoc Governor\n    function _execute(\n        uint256 _proposalId,\n        address[] memory _targets,\n        uint256[] memory _values,\n        bytes[] memory _calldatas,\n        bytes32 _descriptionHash\n    )\n        internal\n        override(Governor, GovernorTimelockControl)\n    {\n        super._execute(_proposalId, _targets, _values, _calldatas, _descriptionHash);\n    }\n\n    /// @inheritdoc Governor\n    function _cancel(\n        address[] memory _targets,\n        uint256[] memory _values,\n        bytes[] memory _calldatas,\n        bytes32 _descriptionHash\n    )\n        internal\n        override(Governor, GovernorTimelockControl)\n        returns (uint256)\n    {\n        return super._cancel(_targets, _values, _calldatas, _descriptionHash);\n    }\n\n    /// @inheritdoc Governor\n    function _executor()\n        internal\n        view\n        override(Governor, GovernorTimelockControl)\n        returns (address)\n    {\n        return super._executor();\n    }\n\n\n}\n"
    },
    "@openzeppelin/contracts/governance/extensions/GovernorSettings.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (governance/extensions/GovernorSettings.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../Governor.sol\";\n\n/**\n * @dev Extension of {Governor} for settings updatable through governance.\n *\n * _Available since v4.4._\n */\nabstract contract GovernorSettings is Governor {\n    uint256 private _votingDelay;\n    uint256 private _votingPeriod;\n    uint256 private _proposalThreshold;\n\n    event VotingDelaySet(uint256 oldVotingDelay, uint256 newVotingDelay);\n    event VotingPeriodSet(uint256 oldVotingPeriod, uint256 newVotingPeriod);\n    event ProposalThresholdSet(uint256 oldProposalThreshold, uint256 newProposalThreshold);\n\n    /**\n     * @dev Initialize the governance parameters.\n     */\n    constructor(\n        uint256 initialVotingDelay,\n        uint256 initialVotingPeriod,\n        uint256 initialProposalThreshold\n    ) {\n        _setVotingDelay(initialVotingDelay);\n        _setVotingPeriod(initialVotingPeriod);\n        _setProposalThreshold(initialProposalThreshold);\n    }\n\n    /**\n     * @dev See {IGovernor-votingDelay}.\n     */\n    function votingDelay() public view virtual override returns (uint256) {\n        return _votingDelay;\n    }\n\n    /**\n     * @dev See {IGovernor-votingPeriod}.\n     */\n    function votingPeriod() public view virtual override returns (uint256) {\n        return _votingPeriod;\n    }\n\n    /**\n     * @dev See {Governor-proposalThreshold}.\n     */\n    function proposalThreshold() public view virtual override returns (uint256) {\n        return _proposalThreshold;\n    }\n\n    /**\n     * @dev Update the voting delay. This operation can only be performed through a governance proposal.\n     *\n     * Emits a {VotingDelaySet} event.\n     */\n    function setVotingDelay(uint256 newVotingDelay) public virtual onlyGovernance {\n        _setVotingDelay(newVotingDelay);\n    }\n\n    /**\n     * @dev Update the voting period. This operation can only be performed through a governance proposal.\n     *\n     * Emits a {VotingPeriodSet} event.\n     */\n    function setVotingPeriod(uint256 newVotingPeriod) public virtual onlyGovernance {\n        _setVotingPeriod(newVotingPeriod);\n    }\n\n    /**\n     * @dev Update the proposal threshold. This operation can only be performed through a governance proposal.\n     *\n     * Emits a {ProposalThresholdSet} event.\n     */\n    function setProposalThreshold(uint256 newProposalThreshold) public virtual onlyGovernance {\n        _setProposalThreshold(newProposalThreshold);\n    }\n\n    /**\n     * @dev Internal setter for the voting delay.\n     *\n     * Emits a {VotingDelaySet} event.\n     */\n    function _setVotingDelay(uint256 newVotingDelay) internal virtual {\n        emit VotingDelaySet(_votingDelay, newVotingDelay);\n        _votingDelay = newVotingDelay;\n    }\n\n    /**\n     * @dev Internal setter for the voting period.\n     *\n     * Emits a {VotingPeriodSet} event.\n     */\n    function _setVotingPeriod(uint256 newVotingPeriod) internal virtual {\n        // voting period must be at least one block long\n        require(newVotingPeriod > 0, \"GovernorSettings: voting period too low\");\n        emit VotingPeriodSet(_votingPeriod, newVotingPeriod);\n        _votingPeriod = newVotingPeriod;\n    }\n\n    /**\n     * @dev Internal setter for the proposal threshold.\n     *\n     * Emits a {ProposalThresholdSet} event.\n     */\n    function _setProposalThreshold(uint256 newProposalThreshold) internal virtual {\n        emit ProposalThresholdSet(_proposalThreshold, newProposalThreshold);\n        _proposalThreshold = newProposalThreshold;\n    }\n}\n"
    },
    "@openzeppelin/contracts/governance/extensions/GovernorCountingSimple.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (governance/extensions/GovernorCountingSimple.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../Governor.sol\";\n\n/**\n * @dev Extension of {Governor} for simple, 3 options, vote counting.\n *\n * _Available since v4.3._\n */\nabstract contract GovernorCountingSimple is Governor {\n    /**\n     * @dev Supported vote types. Matches Governor Bravo ordering.\n     */\n    enum VoteType {\n        Against,\n        For,\n        Abstain\n    }\n\n    struct ProposalVote {\n        uint256 againstVotes;\n        uint256 forVotes;\n        uint256 abstainVotes;\n        mapping(address => bool) hasVoted;\n    }\n\n    mapping(uint256 => ProposalVote) private _proposalVotes;\n\n    /**\n     * @dev See {IGovernor-COUNTING_MODE}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function COUNTING_MODE() public pure virtual override returns (string memory) {\n        return \"support=bravo&quorum=for,abstain\";\n    }\n\n    /**\n     * @dev See {IGovernor-hasVoted}.\n     */\n    function hasVoted(uint256 proposalId, address account) public view virtual override returns (bool) {\n        return _proposalVotes[proposalId].hasVoted[account];\n    }\n\n    /**\n     * @dev Accessor to the internal vote counts.\n     */\n    function proposalVotes(uint256 proposalId)\n        public\n        view\n        virtual\n        returns (\n            uint256 againstVotes,\n            uint256 forVotes,\n            uint256 abstainVotes\n        )\n    {\n        ProposalVote storage proposalvote = _proposalVotes[proposalId];\n        return (proposalvote.againstVotes, proposalvote.forVotes, proposalvote.abstainVotes);\n    }\n\n    /**\n     * @dev See {Governor-_quorumReached}.\n     */\n    function _quorumReached(uint256 proposalId) internal view virtual override returns (bool) {\n        ProposalVote storage proposalvote = _proposalVotes[proposalId];\n\n        return quorum(proposalSnapshot(proposalId)) <= proposalvote.forVotes + proposalvote.abstainVotes;\n    }\n\n    /**\n     * @dev See {Governor-_voteSucceeded}. In this module, the forVotes must be strictly over the againstVotes.\n     */\n    function _voteSucceeded(uint256 proposalId) internal view virtual override returns (bool) {\n        ProposalVote storage proposalvote = _proposalVotes[proposalId];\n\n        return proposalvote.forVotes > proposalvote.againstVotes;\n    }\n\n    /**\n     * @dev See {Governor-_countVote}. In this module, the support follows the `VoteType` enum (from Governor Bravo).\n     */\n    function _countVote(\n        uint256 proposalId,\n        address account,\n        uint8 support,\n        uint256 weight\n    ) internal virtual override {\n        ProposalVote storage proposalvote = _proposalVotes[proposalId];\n\n        require(!proposalvote.hasVoted[account], \"GovernorVotingSimple: vote already cast\");\n        proposalvote.hasVoted[account] = true;\n\n        if (support == uint8(VoteType.Against)) {\n            proposalvote.againstVotes += weight;\n        } else if (support == uint8(VoteType.For)) {\n            proposalvote.forVotes += weight;\n        } else if (support == uint8(VoteType.Abstain)) {\n            proposalvote.abstainVotes += weight;\n        } else {\n            revert(\"GovernorVotingSimple: invalid value for enum VoteType\");\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/governance/extensions/GovernorTimelockControl.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (governance/extensions/GovernorTimelockControl.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IGovernorTimelock.sol\";\nimport \"../Governor.sol\";\nimport \"../TimelockController.sol\";\n\n/**\n * @dev Extension of {Governor} that binds the execution process to an instance of {TimelockController}. This adds a\n * delay, enforced by the {TimelockController} to all successful proposal (in addition to the voting duration). The\n * {Governor} needs the proposer (an ideally the executor) roles for the {Governor} to work properly.\n *\n * Using this model means the proposal will be operated by the {TimelockController} and not by the {Governor}. Thus,\n * the assets and permissions must be attached to the {TimelockController}. Any asset sent to the {Governor} will be\n * inaccessible.\n *\n * _Available since v4.3._\n */\nabstract contract GovernorTimelockControl is IGovernorTimelock, Governor {\n    TimelockController private _timelock;\n    mapping(uint256 => bytes32) private _timelockIds;\n\n    /**\n     * @dev Emitted when the timelock controller used for proposal execution is modified.\n     */\n    event TimelockChange(address oldTimelock, address newTimelock);\n\n    /**\n     * @dev Set the timelock.\n     */\n    constructor(TimelockController timelockAddress) {\n        _updateTimelock(timelockAddress);\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, Governor) returns (bool) {\n        return interfaceId == type(IGovernorTimelock).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Overriden version of the {Governor-state} function with added support for the `Queued` status.\n     */\n    function state(uint256 proposalId) public view virtual override(IGovernor, Governor) returns (ProposalState) {\n        ProposalState status = super.state(proposalId);\n\n        if (status != ProposalState.Succeeded) {\n            return status;\n        }\n\n        // core tracks execution, so we just have to check if successful proposal have been queued.\n        bytes32 queueid = _timelockIds[proposalId];\n        if (queueid == bytes32(0)) {\n            return status;\n        } else if (_timelock.isOperationDone(queueid)) {\n            return ProposalState.Executed;\n        } else {\n            return ProposalState.Queued;\n        }\n    }\n\n    /**\n     * @dev Public accessor to check the address of the timelock\n     */\n    function timelock() public view virtual override returns (address) {\n        return address(_timelock);\n    }\n\n    /**\n     * @dev Public accessor to check the eta of a queued proposal\n     */\n    function proposalEta(uint256 proposalId) public view virtual override returns (uint256) {\n        uint256 eta = _timelock.getTimestamp(_timelockIds[proposalId]);\n        return eta == 1 ? 0 : eta; // _DONE_TIMESTAMP (1) should be replaced with a 0 value\n    }\n\n    /**\n     * @dev Function to queue a proposal to the timelock.\n     */\n    function queue(\n        address[] memory targets,\n        uint256[] memory values,\n        bytes[] memory calldatas,\n        bytes32 descriptionHash\n    ) public virtual override returns (uint256) {\n        uint256 proposalId = hashProposal(targets, values, calldatas, descriptionHash);\n\n        require(state(proposalId) == ProposalState.Succeeded, \"Governor: proposal not successful\");\n\n        uint256 delay = _timelock.getMinDelay();\n        _timelockIds[proposalId] = _timelock.hashOperationBatch(targets, values, calldatas, 0, descriptionHash);\n        _timelock.scheduleBatch(targets, values, calldatas, 0, descriptionHash, delay);\n\n        emit ProposalQueued(proposalId, block.timestamp + delay);\n\n        return proposalId;\n    }\n\n    /**\n     * @dev Overriden execute function that run the already queued proposal through the timelock.\n     */\n    function _execute(\n        uint256, /* proposalId */\n        address[] memory targets,\n        uint256[] memory values,\n        bytes[] memory calldatas,\n        bytes32 descriptionHash\n    ) internal virtual override {\n        _timelock.executeBatch{value: msg.value}(targets, values, calldatas, 0, descriptionHash);\n    }\n\n    /**\n     * @dev Overriden version of the {Governor-_cancel} function to cancel the timelocked proposal if it as already\n     * been queued.\n     */\n    function _cancel(\n        address[] memory targets,\n        uint256[] memory values,\n        bytes[] memory calldatas,\n        bytes32 descriptionHash\n    ) internal virtual override returns (uint256) {\n        uint256 proposalId = super._cancel(targets, values, calldatas, descriptionHash);\n\n        if (_timelockIds[proposalId] != 0) {\n            _timelock.cancel(_timelockIds[proposalId]);\n            delete _timelockIds[proposalId];\n        }\n\n        return proposalId;\n    }\n\n    /**\n     * @dev Address through which the governor executes action. In this case, the timelock.\n     */\n    function _executor() internal view virtual override returns (address) {\n        return address(_timelock);\n    }\n\n    /**\n     * @dev Public endpoint to update the underlying timelock instance. Restricted to the timelock itself, so updates\n     * must be proposed, scheduled and executed using the {Governor} workflow.\n     */\n    function updateTimelock(TimelockController newTimelock) external virtual onlyGovernance {\n        _updateTimelock(newTimelock);\n    }\n\n    function _updateTimelock(TimelockController newTimelock) private {\n        emit TimelockChange(address(_timelock), address(newTimelock));\n        _timelock = newTimelock;\n    }\n}\n"
    },
    "@openzeppelin/contracts/governance/extensions/IGovernorTimelock.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (governance/extensions/IGovernorTimelock.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IGovernor.sol\";\n\n/**\n * @dev Extension of the {IGovernor} for timelock supporting modules.\n *\n * _Available since v4.3._\n */\nabstract contract IGovernorTimelock is IGovernor {\n    event ProposalQueued(uint256 proposalId, uint256 eta);\n\n    function timelock() public view virtual returns (address);\n\n    function proposalEta(uint256 proposalId) public view virtual returns (uint256);\n\n    function queue(\n        address[] memory targets,\n        uint256[] memory values,\n        bytes[] memory calldatas,\n        bytes32 descriptionHash\n    ) public virtual returns (uint256 proposalId);\n}\n"
    },
    "@openzeppelin/contracts/governance/TimelockController.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (governance/TimelockController.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../access/AccessControl.sol\";\n\n/**\n * @dev Contract module which acts as a timelocked controller. When set as the\n * owner of an `Ownable` smart contract, it enforces a timelock on all\n * `onlyOwner` maintenance operations. This gives time for users of the\n * controlled contract to exit before a potentially dangerous maintenance\n * operation is applied.\n *\n * By default, this contract is self administered, meaning administration tasks\n * have to go through the timelock process. The proposer (resp executor) role\n * is in charge of proposing (resp executing) operations. A common use case is\n * to position this {TimelockController} as the owner of a smart contract, with\n * a multisig or a DAO as the sole proposer.\n *\n * _Available since v3.3._\n */\ncontract TimelockController is AccessControl {\n    bytes32 public constant TIMELOCK_ADMIN_ROLE = keccak256(\"TIMELOCK_ADMIN_ROLE\");\n    bytes32 public constant PROPOSER_ROLE = keccak256(\"PROPOSER_ROLE\");\n    bytes32 public constant EXECUTOR_ROLE = keccak256(\"EXECUTOR_ROLE\");\n    uint256 internal constant _DONE_TIMESTAMP = uint256(1);\n\n    mapping(bytes32 => uint256) private _timestamps;\n    uint256 private _minDelay;\n\n    /**\n     * @dev Emitted when a call is scheduled as part of operation `id`.\n     */\n    event CallScheduled(\n        bytes32 indexed id,\n        uint256 indexed index,\n        address target,\n        uint256 value,\n        bytes data,\n        bytes32 predecessor,\n        uint256 delay\n    );\n\n    /**\n     * @dev Emitted when a call is performed as part of operation `id`.\n     */\n    event CallExecuted(bytes32 indexed id, uint256 indexed index, address target, uint256 value, bytes data);\n\n    /**\n     * @dev Emitted when operation `id` is cancelled.\n     */\n    event Cancelled(bytes32 indexed id);\n\n    /**\n     * @dev Emitted when the minimum delay for future operations is modified.\n     */\n    event MinDelayChange(uint256 oldDuration, uint256 newDuration);\n\n    /**\n     * @dev Initializes the contract with a given `minDelay`.\n     */\n    constructor(\n        uint256 minDelay,\n        address[] memory proposers,\n        address[] memory executors\n    ) {\n        _setRoleAdmin(TIMELOCK_ADMIN_ROLE, TIMELOCK_ADMIN_ROLE);\n        _setRoleAdmin(PROPOSER_ROLE, TIMELOCK_ADMIN_ROLE);\n        _setRoleAdmin(EXECUTOR_ROLE, TIMELOCK_ADMIN_ROLE);\n\n        // deployer + self administration\n        _setupRole(TIMELOCK_ADMIN_ROLE, _msgSender());\n        _setupRole(TIMELOCK_ADMIN_ROLE, address(this));\n\n        // register proposers\n        for (uint256 i = 0; i < proposers.length; ++i) {\n            _setupRole(PROPOSER_ROLE, proposers[i]);\n        }\n\n        // register executors\n        for (uint256 i = 0; i < executors.length; ++i) {\n            _setupRole(EXECUTOR_ROLE, executors[i]);\n        }\n\n        _minDelay = minDelay;\n        emit MinDelayChange(0, minDelay);\n    }\n\n    /**\n     * @dev Modifier to make a function callable only by a certain role. In\n     * addition to checking the sender's role, `address(0)` 's role is also\n     * considered. Granting a role to `address(0)` is equivalent to enabling\n     * this role for everyone.\n     */\n    modifier onlyRoleOrOpenRole(bytes32 role) {\n        if (!hasRole(role, address(0))) {\n            _checkRole(role, _msgSender());\n        }\n        _;\n    }\n\n    /**\n     * @dev Contract might receive/hold ETH as part of the maintenance process.\n     */\n    receive() external payable {}\n\n    /**\n     * @dev Returns whether an id correspond to a registered operation. This\n     * includes both Pending, Ready and Done operations.\n     */\n    function isOperation(bytes32 id) public view virtual returns (bool pending) {\n        return getTimestamp(id) > 0;\n    }\n\n    /**\n     * @dev Returns whether an operation is pending or not.\n     */\n    function isOperationPending(bytes32 id) public view virtual returns (bool pending) {\n        return getTimestamp(id) > _DONE_TIMESTAMP;\n    }\n\n    /**\n     * @dev Returns whether an operation is ready or not.\n     */\n    function isOperationReady(bytes32 id) public view virtual returns (bool ready) {\n        uint256 timestamp = getTimestamp(id);\n        return timestamp > _DONE_TIMESTAMP && timestamp <= block.timestamp;\n    }\n\n    /**\n     * @dev Returns whether an operation is done or not.\n     */\n    function isOperationDone(bytes32 id) public view virtual returns (bool done) {\n        return getTimestamp(id) == _DONE_TIMESTAMP;\n    }\n\n    /**\n     * @dev Returns the timestamp at with an operation becomes ready (0 for\n     * unset operations, 1 for done operations).\n     */\n    function getTimestamp(bytes32 id) public view virtual returns (uint256 timestamp) {\n        return _timestamps[id];\n    }\n\n    /**\n     * @dev Returns the minimum delay for an operation to become valid.\n     *\n     * This value can be changed by executing an operation that calls `updateDelay`.\n     */\n    function getMinDelay() public view virtual returns (uint256 duration) {\n        return _minDelay;\n    }\n\n    /**\n     * @dev Returns the identifier of an operation containing a single\n     * transaction.\n     */\n    function hashOperation(\n        address target,\n        uint256 value,\n        bytes calldata data,\n        bytes32 predecessor,\n        bytes32 salt\n    ) public pure virtual returns (bytes32 hash) {\n        return keccak256(abi.encode(target, value, data, predecessor, salt));\n    }\n\n    /**\n     * @dev Returns the identifier of an operation containing a batch of\n     * transactions.\n     */\n    function hashOperationBatch(\n        address[] calldata targets,\n        uint256[] calldata values,\n        bytes[] calldata datas,\n        bytes32 predecessor,\n        bytes32 salt\n    ) public pure virtual returns (bytes32 hash) {\n        return keccak256(abi.encode(targets, values, datas, predecessor, salt));\n    }\n\n    /**\n     * @dev Schedule an operation containing a single transaction.\n     *\n     * Emits a {CallScheduled} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have the 'proposer' role.\n     */\n    function schedule(\n        address target,\n        uint256 value,\n        bytes calldata data,\n        bytes32 predecessor,\n        bytes32 salt,\n        uint256 delay\n    ) public virtual onlyRole(PROPOSER_ROLE) {\n        bytes32 id = hashOperation(target, value, data, predecessor, salt);\n        _schedule(id, delay);\n        emit CallScheduled(id, 0, target, value, data, predecessor, delay);\n    }\n\n    /**\n     * @dev Schedule an operation containing a batch of transactions.\n     *\n     * Emits one {CallScheduled} event per transaction in the batch.\n     *\n     * Requirements:\n     *\n     * - the caller must have the 'proposer' role.\n     */\n    function scheduleBatch(\n        address[] calldata targets,\n        uint256[] calldata values,\n        bytes[] calldata datas,\n        bytes32 predecessor,\n        bytes32 salt,\n        uint256 delay\n    ) public virtual onlyRole(PROPOSER_ROLE) {\n        require(targets.length == values.length, \"TimelockController: length mismatch\");\n        require(targets.length == datas.length, \"TimelockController: length mismatch\");\n\n        bytes32 id = hashOperationBatch(targets, values, datas, predecessor, salt);\n        _schedule(id, delay);\n        for (uint256 i = 0; i < targets.length; ++i) {\n            emit CallScheduled(id, i, targets[i], values[i], datas[i], predecessor, delay);\n        }\n    }\n\n    /**\n     * @dev Schedule an operation that is to becomes valid after a given delay.\n     */\n    function _schedule(bytes32 id, uint256 delay) private {\n        require(!isOperation(id), \"TimelockController: operation already scheduled\");\n        require(delay >= getMinDelay(), \"TimelockController: insufficient delay\");\n        _timestamps[id] = block.timestamp + delay;\n    }\n\n    /**\n     * @dev Cancel an operation.\n     *\n     * Requirements:\n     *\n     * - the caller must have the 'proposer' role.\n     */\n    function cancel(bytes32 id) public virtual onlyRole(PROPOSER_ROLE) {\n        require(isOperationPending(id), \"TimelockController: operation cannot be cancelled\");\n        delete _timestamps[id];\n\n        emit Cancelled(id);\n    }\n\n    /**\n     * @dev Execute an (ready) operation containing a single transaction.\n     *\n     * Emits a {CallExecuted} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have the 'executor' role.\n     */\n    function execute(\n        address target,\n        uint256 value,\n        bytes calldata data,\n        bytes32 predecessor,\n        bytes32 salt\n    ) public payable virtual onlyRoleOrOpenRole(EXECUTOR_ROLE) {\n        bytes32 id = hashOperation(target, value, data, predecessor, salt);\n        _beforeCall(id, predecessor);\n        _call(id, 0, target, value, data);\n        _afterCall(id);\n    }\n\n    /**\n     * @dev Execute an (ready) operation containing a batch of transactions.\n     *\n     * Emits one {CallExecuted} event per transaction in the batch.\n     *\n     * Requirements:\n     *\n     * - the caller must have the 'executor' role.\n     */\n    function executeBatch(\n        address[] calldata targets,\n        uint256[] calldata values,\n        bytes[] calldata datas,\n        bytes32 predecessor,\n        bytes32 salt\n    ) public payable virtual onlyRoleOrOpenRole(EXECUTOR_ROLE) {\n        require(targets.length == values.length, \"TimelockController: length mismatch\");\n        require(targets.length == datas.length, \"TimelockController: length mismatch\");\n\n        bytes32 id = hashOperationBatch(targets, values, datas, predecessor, salt);\n        _beforeCall(id, predecessor);\n        for (uint256 i = 0; i < targets.length; ++i) {\n            _call(id, i, targets[i], values[i], datas[i]);\n        }\n        _afterCall(id);\n    }\n\n    /**\n     * @dev Checks before execution of an operation's calls.\n     */\n    function _beforeCall(bytes32 id, bytes32 predecessor) private view {\n        require(isOperationReady(id), \"TimelockController: operation is not ready\");\n        require(predecessor == bytes32(0) || isOperationDone(predecessor), \"TimelockController: missing dependency\");\n    }\n\n    /**\n     * @dev Checks after execution of an operation's calls.\n     */\n    function _afterCall(bytes32 id) private {\n        require(isOperationReady(id), \"TimelockController: operation is not ready\");\n        _timestamps[id] = _DONE_TIMESTAMP;\n    }\n\n    /**\n     * @dev Execute an operation's call.\n     *\n     * Emits a {CallExecuted} event.\n     */\n    function _call(\n        bytes32 id,\n        uint256 index,\n        address target,\n        uint256 value,\n        bytes calldata data\n    ) private {\n        (bool success, ) = target.call{value: value}(data);\n        require(success, \"TimelockController: underlying transaction reverted\");\n\n        emit CallExecuted(id, index, target, value, data);\n    }\n\n    /**\n     * @dev Changes the minimum timelock duration for future operations.\n     *\n     * Emits a {MinDelayChange} event.\n     *\n     * Requirements:\n     *\n     * - the caller must be the timelock itself. This can only be achieved by scheduling and later executing\n     * an operation where the timelock is the target and the data is the ABI-encoded call to this function.\n     */\n    function updateDelay(uint256 newDelay) external virtual {\n        require(msg.sender == address(this), \"TimelockController: caller must be timelock\");\n        emit MinDelayChange(_minDelay, newDelay);\n        _minDelay = newDelay;\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/AccessControl.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/AccessControl.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IAccessControl.sol\";\nimport \"../utils/Context.sol\";\nimport \"../utils/Strings.sol\";\nimport \"../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Contract module that allows children to implement role-based access\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\n * members except through off-chain means by accessing the contract event logs. Some\n * applications may benefit from on-chain enumerability, for those cases see\n * {AccessControlEnumerable}.\n *\n * Roles are referred to by their `bytes32` identifier. These should be exposed\n * in the external API and be unique. The best way to achieve this is by\n * using `public constant` hash digests:\n *\n * ```\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n * ```\n *\n * Roles can be used to represent a set of permissions. To restrict access to a\n * function call, use {hasRole}:\n *\n * ```\n * function foo() public {\n *     require(hasRole(MY_ROLE, msg.sender));\n *     ...\n * }\n * ```\n *\n * Roles can be granted and revoked dynamically via the {grantRole} and\n * {revokeRole} functions. Each role has an associated admin role, and only\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n *\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n * that only accounts with this role will be able to grant or revoke other\n * roles. More complex role relationships can be created by using\n * {_setRoleAdmin}.\n *\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n * grant and revoke this role. Extra precautions should be taken to secure\n * accounts that have been granted it.\n */\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\n    struct RoleData {\n        mapping(address => bool) members;\n        bytes32 adminRole;\n    }\n\n    mapping(bytes32 => RoleData) private _roles;\n\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n\n    /**\n     * @dev Modifier that checks that an account has a specific role. Reverts\n     * with a standardized message including the required role.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     *\n     * _Available since v4.1._\n     */\n    modifier onlyRole(bytes32 role) {\n        _checkRole(role, _msgSender());\n        _;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) public view override returns (bool) {\n        return _roles[role].members[account];\n    }\n\n    /**\n     * @dev Revert with a standard message if `account` is missing `role`.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     */\n    function _checkRole(bytes32 role, address account) internal view {\n        if (!hasRole(role, account)) {\n            revert(\n                string(\n                    abi.encodePacked(\n                        \"AccessControl: account \",\n                        Strings.toHexString(uint160(account), 20),\n                        \" is missing role \",\n                        Strings.toHexString(uint256(role), 32)\n                    )\n                )\n            );\n        }\n    }\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) public view override returns (bytes32) {\n        return _roles[role].adminRole;\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     */\n    function renounceRole(bytes32 role, address account) public virtual override {\n        require(account == _msgSender(), \"AccessControl: can only renounce roles for self\");\n\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event. Note that unlike {grantRole}, this function doesn't perform any\n     * checks on the calling account.\n     *\n     * [WARNING]\n     * ====\n     * This function should only be called from the constructor when setting\n     * up the initial roles for the system.\n     *\n     * Using this function in any other way is effectively circumventing the admin\n     * system imposed by {AccessControl}.\n     * ====\n     *\n     * NOTE: This function is deprecated in favor of {_grantRole}.\n     */\n    function _setupRole(bytes32 role, address account) internal virtual {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Sets `adminRole` as ``role``'s admin role.\n     *\n     * Emits a {RoleAdminChanged} event.\n     */\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n        bytes32 previousAdminRole = getRoleAdmin(role);\n        _roles[role].adminRole = adminRole;\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * Internal function without access restriction.\n     */\n    function _grantRole(bytes32 role, address account) internal virtual {\n        if (!hasRole(role, account)) {\n            _roles[role].members[account] = true;\n            emit RoleGranted(role, account, _msgSender());\n        }\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * Internal function without access restriction.\n     */\n    function _revokeRole(bytes32 role, address account) internal virtual {\n        if (hasRole(role, account)) {\n            _roles[role].members[account] = false;\n            emit RoleRevoked(role, account, _msgSender());\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/IAccessControl.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev External interface of AccessControl declared to support ERC165 detection.\n */\ninterface IAccessControl {\n    /**\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n     *\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n     * {RoleAdminChanged} not being emitted signaling this.\n     *\n     * _Available since v3.1._\n     */\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\n\n    /**\n     * @dev Emitted when `account` is granted `role`.\n     *\n     * `sender` is the account that originated the contract call, an admin role\n     * bearer except when using {AccessControl-_setupRole}.\n     */\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Emitted when `account` is revoked `role`.\n     *\n     * `sender` is the account that originated the contract call:\n     *   - if using `revokeRole`, it is the admin role bearer\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n     */\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) external view returns (bool);\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     */\n    function renounceRole(bytes32 role, address account) external;\n}\n"
    },
    "contracts/mock/MockSiloGovernor.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity 0.8.13;\n\nimport \"../governance/SiloGovernor.sol\";\n\n/// @dev this is MOCK contract - DO NOT USE IT!\ncontract MockSiloGovernor is SiloGovernor {\n    constructor(ERC20Votes _token, TimelockController _timelock) SiloGovernor(_token, _timelock) {\n        // for faster QA, original value is 45K and that takes forever when minting blocks during QA\n        _setVotingPeriod(45);\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/ERC20Burnable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../ERC20.sol\";\nimport \"../../../utils/Context.sol\";\n\n/**\n * @dev Extension of {ERC20} that allows token holders to destroy both their own\n * tokens and those that they have an allowance for, in a way that can be\n * recognized off-chain (via event analysis).\n */\nabstract contract ERC20Burnable is Context, ERC20 {\n    /**\n     * @dev Destroys `amount` tokens from the caller.\n     *\n     * See {ERC20-_burn}.\n     */\n    function burn(uint256 amount) public virtual {\n        _burn(_msgSender(), amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, deducting from the caller's\n     * allowance.\n     *\n     * See {ERC20-_burn} and {ERC20-allowance}.\n     *\n     * Requirements:\n     *\n     * - the caller must have allowance for ``accounts``'s tokens of at least\n     * `amount`.\n     */\n    function burnFrom(address account, uint256 amount) public virtual {\n        uint256 currentAllowance = allowance(account, _msgSender());\n        require(currentAllowance >= amount, \"ERC20: burn amount exceeds allowance\");\n        unchecked {\n            _approve(account, _msgSender(), currentAllowance - amount);\n        }\n        _burn(account, amount);\n    }\n}\n"
    },
    "contracts/governance/SiloGovernanceToken.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.13;\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Votes.sol\";\n\n/// @title Silo Governance Token\n/// @notice Official Silo token that governs Silo treasury and protocol (TBD)\n/// @custom:security-contact security@silo.finance\ncontract SiloGovernanceToken is ERC20, ERC20Burnable, Ownable, ERC20Permit, ERC20Votes {\n    constructor()\n        ERC20(\"Silo Governance Token\", \"Silo\")\n        ERC20Permit(\"SiloGovernanceToken\")\n    {\n        // mint 1B tokens to deployer\n        _mint(msg.sender, 1e9 * 10 ** decimals());\n    }\n\n    /// @notice Mint new tokens. Callable only by owner.\n    /// @dev Silo DAO will be made an owner and control minting.\n    /// @param _to mint recipient\n    /// @param _amount mint amount\n    function mint(address _to, uint256 _amount) public onlyOwner {\n        _mint(_to, _amount);\n    }\n\n    /// @inheritdoc ERC20\n    function _afterTokenTransfer(address _from, address _to, uint256 _amount)\n        internal\n        override(ERC20, ERC20Votes)\n    {\n        super._afterTokenTransfer(_from, _to, _amount);\n    }\n\n    /// @inheritdoc ERC20\n    function _mint(address _to, uint256 _amount)\n        internal\n        override(ERC20, ERC20Votes)\n    {\n        super._mint(_to, _amount);\n    }\n\n    /// @inheritdoc ERC20\n    function _burn(address _account, uint256 _amount)\n        internal\n        override(ERC20, ERC20Votes)\n    {\n        super._burn(_account, _amount);\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates",
          "devdoc",
          "userdoc"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}